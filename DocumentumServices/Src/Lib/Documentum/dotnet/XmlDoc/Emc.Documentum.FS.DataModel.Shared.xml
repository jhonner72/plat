<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Emc.Documentum.FS.DataModel.Shared</name>
    </assembly>
    <members>
        <member name="T:Emc.Documentum.FS.DataModel.Core.Content.ActivityInfo">
            <summary>
            Data unit for representation an ucf connection.
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Content.ActivityInfo.GetCookies">
            <summary>
            Collection of cookies related to the UCF connection
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Content.ActivityInfo.AddCookies(System.Net.Cookie[])">
            <summary>
            Collection of cookies related to the UCF connection
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Content.ActivityInfo.AddCookies(System.Collections.Generic.ICollection{System.Net.Cookie})">
            <summary>
            Collection of cookies related to the UCF connection
            </summary>
        </member>
        <member name="F:Emc.Documentum.FS.DataModel.Core.Content.ActivityInfo.UCF_ACTIVITY">
            <summary>
            UCF_ACTIVITY
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Content.ActivityInfo.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Content.ActivityInfo.#ctor(System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="autoCloseConnection">
            AutoCloseConnection auto close flag, <para/> if true the ucf connection
            represented by this ActivityInfo will be closed
            by DFS framework after the service call
            </param>
            <seealso cref="T:Emc.Documentum.FS.DataModel.Core.Content.Content">Content</seealso>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Content.ActivityInfo.#ctor(System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="sessionId">JSESSIONID of ucf connection</param>
            <param name="initiatorSessionId">
            JSESSIONID of ucf connection initiator.
            This is DFS framework`s internal data and
            DFS consumers should pass here either
            null or incoming client request`s JSESSIONID (if the consumer`s code is executed in the application server environment)
            </param>
            <param name="activityId">ucf id</param>
            <param name="targetDeploymentId">Target Deployment ID</param>
            <param name="autoCloseConnection">
            AutoCloseConnection auto close flag, <para/> if true the ucf connection
            represented by this ActivityInfo will be closed
            by DFS framework after the service call
            </param>
            <seealso cref="T:Emc.Documentum.FS.DataModel.Core.Content.Content">Content</seealso>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Content.ActivityInfo.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="sessionId">JSESSIONID of ucf connection</param>
            <param name="initiatorSessionId">
            JSESSIONID of ucf connection initiator.
            This is DFS framework`s internal data and
            DFS consumers should pass here either
            null or incoming client request`s JSESSIONID (if the consumer`s code is executed in the application server environment)
            </param>
            <param name="activityId">ucf id</param>
            <param name="targetDeploymentId">Target Deployment ID</param>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Content.ActivityInfo.Clone">
            <summary>
            Clones profile.
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Content.ActivityInfo.SessionId">
            <summary>
            JSESSIONID of ucf connection represented by this ActivityInfo
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Content.ActivityInfo.InitiatorSessionId">
            <summary>
            DFS internal data
            JSESSIONID of ucf connection initiator.
            DFS consumers should pass here either
            null or incoming client request`s JSESSIONID (if the consumer`s code is executed in the application server environment)
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Content.ActivityInfo.ActivityId">
            <summary>
            UCF id
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Content.ActivityInfo.AutoCloseConnection">
            <summary>
            Auto close flag.
            True - if ucf connection represented by this ActivityInfo
            should be closed by framework, after the service call.
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Content.ActivityInfo.Closed">
            <summary>
            True - if the ucf connection was closed by framework
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Content.ActivityInfo.TargetDeploymentId">
            <summary>
            Deployment id of the calling service.
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Content.ActivityInfo.InitiatorDeploymentId">
            <summary>
            DFS Internal variable.
            </summary>
        </member>
        <member name="T:Emc.Documentum.FS.DataModel.Core.Content.BinaryContent">
            <summary>
            BinaryContent.
            Contains content as byte array. Used with Base64 content transfer mode.
            </summary>
        </member>
        <member name="T:Emc.Documentum.FS.DataModel.Core.Content.Content">
            <summary>
            Base class for contents.<para/>
            Contains information about content`s type, format, page number and page modifier.
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Content.Content.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Content.Content.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="format">content's format</param>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Content.Content.#ctor(System.String,System.Int32,System.String,System.Nullable{Emc.Documentum.FS.DataModel.Core.Content.RenditionType})">
            <summary>
            Constructor
            </summary>
            <param name="format">content's format</param>
            <param name="pageNumber">page number</param>
            <param name="pageModifier">page modifier</param>
            <param name="renditionType">rendition type</param>
            <seealso cref="T:Emc.Documentum.FS.DataModel.Core.Content.RenditionType">RenditionType</seealso>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Content.Content.#ctor(System.String,System.Int32,System.String,System.Nullable{Emc.Documentum.FS.DataModel.Core.Content.RenditionType},System.Nullable{Emc.Documentum.FS.DataModel.Core.Content.ContentIntentModifier})">
            <summary>
            Constructor
            </summary>
            <param name="format">content's format</param>
            <param name="pageNumber">page number</param>
            <param name="pageModifier">page modifier</param>
            <param name="renditionType">rendition type</param>
            /// <param name="intentModifier">content intent modifier type</param>
            <seealso cref="T:Emc.Documentum.FS.DataModel.Core.Content.RenditionType">RenditionType</seealso>
            <seealso cref="T:Emc.Documentum.FS.DataModel.Core.Content.ContentIntentModifier">ContentIntentModifier</seealso>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Content.Content.GetName">
            <summary>
            Content's type
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Content.Content.CanGetAsFile">
            <summary>
            Determines if content can be represented as file. 
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Content.Content.CanGetAsByteArray">
            <summary>
            Determines if content can be represented as byte array. 
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Content.Content.CanGetAsUcfPackageInfo">
            <summary>
            Internal use only
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Content.Content.GetAsUcfPackageInfo">
            <summary>
            Internal use only
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Content.Content.GetAsFile">
            <summary>
            Gets content representation as FileInfo. The file path is determined internally. 
            If there is a temp file generated during content transformation, the file won't be deleted.
            </summary>
            <seealso cref="M:Emc.Documentum.FS.DataModel.Core.Content.Content.GetAsFile(System.String,System.String,System.Boolean)">GetAsFile(string, string, bool)</seealso>
            <seealso cref="M:Emc.Documentum.FS.DataModel.Core.Content.Content.GetAsFileStream">GetAsFileStream</seealso>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Content.Content.GetAsFile(System.String,System.String,System.Boolean)">
            <summary>
            Gets content representation as FileInfo. Destination directory and file extension can be specified.
            If there is a temp file generated during content transformation, the file won't be deleted.
            </summary>
            <param name="destDir"> the destination directory; the directory must not be null; 
            the destination directory is created if it does not exist.</param>
            <param name="filename"> name of the file; an internally named file is returned if the name is null;
            a renamed file is returned if a file with the same name already exists.</param>
            <param name="deleteLocalHint"> If the content originally contains a content file (e.g. FileContent or UcfContent), 
            TRUE indicates to delete the original content file; FALSE indicates to leave it existed. If the content originally 
            does not contain a content file, the parameter is ignored.</param>
            <seealso cref="M:Emc.Documentum.FS.DataModel.Core.Content.Content.GetAsFile">GetAsFile()</seealso>
            <seealso cref="M:Emc.Documentum.FS.DataModel.Core.Content.Content.GetAsFileStream">GetAsFileStream</seealso>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Content.Content.GetAsFileStream">
            <summary>
            Gets content representation as FileStream. The file path is determined internally. 
            If the Content points to a temp file generated by DFS runtime, the temp file will be removed automatically when the FileStream handler is closed.
            </summary>
            <seealso cref="M:Emc.Documentum.FS.DataModel.Core.Content.Content.GetAsFile">GetAsFile()</seealso>
            <seealso cref="M:Emc.Documentum.FS.DataModel.Core.Content.Content.GetAsFile(System.String,System.String,System.Boolean)">GetAsFile(string, string, bool)</seealso>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Content.Content.GetAsByteArray">
            <summary>
            Gets content representation as byte array
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Content.Content.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="F:Emc.Documentum.FS.DataModel.Core.Content.Content.m_filepath">
            <summary>
            Private implementation
            </summary>
        </member>
        <member name="F:Emc.Documentum.FS.DataModel.Core.Content.Content.m_bytedata">
            <summary>
            Private implementation
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Content.Content.RenditionType">
            <summary>
            Content`s rendition type.
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Content.Content.renditionTypeSpecified">
            <exclude/>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Content.Content.IntentModifier">
            <summary>
            Content`s intent modifier type.
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Content.Content.intentModifierSpecified">
            <exclude/>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Content.Content.Format">
            <summary>
            Content`s format.
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Content.Content.PageNumber">
            <summary>
            Content's page number.
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Content.Content.PageModifier">
            <summary>
            Content's page modifier.
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Content.Content.ContentTransferMode">
            <summary>
            Transfer mode for this content. <para/>
            Note: It is reserved for future use. Current version of DFS unuses it.
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Content.Content.contentTransferModeSpecified">
            <exclude/>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Content.BinaryContent.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Content.BinaryContent.#ctor(System.Byte[],System.String)">
            <summary>
            Constructor
            </summary>
            <param name="bytes">content represented as byte[] (constructor doesn`t clone it but saves the reference to it)</param>
            <param name="format">content`s format</param>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Content.BinaryContent.#ctor(System.Byte[],System.String,System.Int32,System.String,System.Nullable{Emc.Documentum.FS.DataModel.Core.Content.RenditionType})">
            <summary>
            Constructor
            </summary>
            <param name="bytes">content as byte[] (constructor doesn`t clone it but saves the reference to it)</param>
            <param name="format">content format (that is, the dm_format name)</param>
            <param name="pageNumber">corresponds to the dmr_content.page property in the repository for content objects that have multiple pages</param>
            <param name="pageModifier">corresponds to the dmr_content.page_modifier attribute in the repository. This setting is used to distinguish different renditions of an object that have the same format</param>
            <param name="renditionType">rendition type</param>
            <seealso cref="T:Emc.Documentum.FS.DataModel.Core.Content.Content">Content</seealso>
            <seealso cref="T:Emc.Documentum.FS.DataModel.Core.Content.RenditionType">RenditionType</seealso>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Content.BinaryContent.#ctor(System.Byte[],System.String,System.Int32,System.String,System.Nullable{Emc.Documentum.FS.DataModel.Core.Content.RenditionType},System.Nullable{Emc.Documentum.FS.DataModel.Core.Content.ContentIntentModifier})">
            <summary>
            Constructor
            </summary>
            <param name="bytes">content as byte[] (constructor doesn`t clone it but saves the reference to it)</param>
            <param name="format">content format (that is, the dm_format name)</param>
            <param name="pageNumber">corresponds to the dmr_content.page property in the repository for content objects that have multiple pages</param>
            <param name="pageModifier">corresponds to the dmr_content.page_modifier attribute in the repository. This setting is used to distinguish different renditions of an object that have the same format</param>
            <param name="renditionType">rendition type</param>
            <param name="intentModifier">content intent modifier</param>
            <seealso cref="T:Emc.Documentum.FS.DataModel.Core.Content.Content">Content</seealso>
            <seealso cref="T:Emc.Documentum.FS.DataModel.Core.Content.RenditionType">RenditionType</seealso>
            <seealso cref="T:Emc.Documentum.FS.DataModel.Core.Content.ContentIntentModifier">ContentIntentModifier</seealso>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Content.BinaryContent.GetName">
            <summary>
            Name of content
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Content.BinaryContent.CanGetAsByteArray">
            <summary>
            True - If content cant be taken as byte array.
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Content.BinaryContent.CanGetAsFile">
            <summary>
            True - If content cant be taken as file.
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Content.BinaryContent.CanGetAsUcfPackageInfo">
            <summary>
            Internal use only
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Content.BinaryContent.Value">
            <summary>
            Contains content in byte array format
            </summary>
        </member>
        <member name="T:Emc.Documentum.FS.DataModel.Core.Content.ContentIntentModifier">
            <summary>
            ContentIntentModifier enum specifies the add or remove intention of the {@link Content}.
            </summary>
        </member>
        <member name="F:Emc.Documentum.FS.DataModel.Core.Content.ContentIntentModifier.SET">
            <summary>
            Indicates the intent to set a new or keep an existing content
            </summary>
        </member>
        <member name="F:Emc.Documentum.FS.DataModel.Core.Content.ContentIntentModifier.INSERT">
            <summary>
            Indicates the intent to insert a new content
            </summary>
        </member>
        <member name="F:Emc.Documentum.FS.DataModel.Core.Content.ContentIntentModifier.REMOVE">
            <summary>
            Indicates the intent to remove an existing content
            </summary>
        </member>
        <member name="T:Emc.Documentum.FS.DataModel.Core.Content.ContentTransferMode">
            <summary>
            Enumerates all possible ways to transfer contents.
            </summary>
        </member>
        <member name="F:Emc.Documentum.FS.DataModel.Core.Content.ContentTransferMode.BASE64">
            <summary>
            Transfer via SOAP using base64 encoding
            </summary>
        </member>
        <member name="F:Emc.Documentum.FS.DataModel.Core.Content.ContentTransferMode.MTOM">
            <summary>
            Transfer via SOAP using attachments 
            </summary>
        </member>
        <member name="F:Emc.Documentum.FS.DataModel.Core.Content.ContentTransferMode.UCF">
            <summary>
            Transfer content via ucf
            </summary>
        </member>
        <member name="T:Emc.Documentum.FS.DataModel.Core.Content.DataHandlerContent">
            <summary>
            DFS Compatibility purposes only. Not intended to use.
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Content.DataHandlerContent.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Content.DataHandlerContent.#ctor(System.Byte[],System.String)">
            <summary>
            Constructor
            </summary>
            <param name="bytes">content represented as byte[] (constructor doesn`t clone it but saves the reference to it)</param>
            <param name="format">content`s format</param>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Content.DataHandlerContent.#ctor(System.Byte[],System.String,System.Int32,System.String,System.Nullable{Emc.Documentum.FS.DataModel.Core.Content.RenditionType})">
            <summary>
            Constructor
            </summary>
            <param name="bytes">content as byte[] (constructor doesn`t clone it but saves the reference to it)</param>
            <param name="format">content`s format</param>
            <param name="pageNumber">page number</param>
            <param name="pageModifier">page modifier</param>
            <param name="renditionType">rendition type</param>
            <seealso cref="T:Emc.Documentum.FS.DataModel.Core.Content.Content">Content</seealso>
            <seealso cref="T:Emc.Documentum.FS.DataModel.Core.Content.RenditionType">RenditionType</seealso>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Content.DataHandlerContent.#ctor(System.Byte[],System.String,System.Int32,System.String,System.Nullable{Emc.Documentum.FS.DataModel.Core.Content.RenditionType},System.Nullable{Emc.Documentum.FS.DataModel.Core.Content.ContentIntentModifier})">
            <summary>
            Constructor
            </summary>
            <param name="bytes">content as byte[] (constructor doesn`t clone it but saves the reference to it)</param>
            <param name="format">content`s format</param>
            <param name="pageNumber">page number</param>
            <param name="pageModifier">page modifier</param>
            <param name="renditionType">rendition type</param>
            <param name="intentModifier">content intent modifier</param>
            <seealso cref="T:Emc.Documentum.FS.DataModel.Core.Content.Content">Content</seealso>
            <seealso cref="T:Emc.Documentum.FS.DataModel.Core.Content.RenditionType">RenditionType</seealso>
            <seealso cref="T:Emc.Documentum.FS.DataModel.Core.Content.ContentIntentModifier">ContentIntentModifier</seealso>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Content.DataHandlerContent.GetName">
            <summary>
            Name of content
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Content.DataHandlerContent.CanGetAsByteArray">
            <summary>
            True - If content cant be taken as byte array.
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Content.DataHandlerContent.CanGetAsFile">
            <summary>
            True - If content cant be taken as file.
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Content.DataHandlerContent.CanGetAsUcfPackageInfo">
            <summary>
            Internal use only
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Content.DataHandlerContent.Value">
            <summary>
            Contains content in byte array format.
            </summary>
        </member>
        <member name="T:Emc.Documentum.FS.DataModel.Core.Content.FileContent">
            <summary>
            Contains content as a file and can be used only for UCF-based content transfer.
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Content.FileContent.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Content.FileContent.#ctor(System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="localPath">local file path to content</param>
            <param name="format">content`s format</param>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Content.FileContent.#ctor(System.String,System.String,System.Int32,System.String,System.Nullable{Emc.Documentum.FS.DataModel.Core.Content.RenditionType})">
            <summary>
            Constructor
            </summary>
            <param name="localPath">local file path</param>
            <param name="format">content`s format</param>
            <param name="pageNumber">page number</param>
            <param name="pageModifier">page modifier</param>
            <param name="renditionType">rendition type</param>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Content.FileContent.#ctor(System.String,System.String,System.Int32,System.String,System.Nullable{Emc.Documentum.FS.DataModel.Core.Content.RenditionType},System.Nullable{Emc.Documentum.FS.DataModel.Core.Content.ContentIntentModifier})">
            <summary>
            Constructor
            </summary>
            <param name="localPath">local file path</param>
            <param name="format">content`s format</param>
            <param name="pageNumber">page number</param>
            <param name="pageModifier">page modifier</param>
            <param name="renditionType">rendition type</param>
            <param name="intentModifier">content intent modifier</param>
            <seealso cref="T:Emc.Documentum.FS.DataModel.Core.Content.RenditionType">RenditionType</seealso>
            <seealso cref="T:Emc.Documentum.FS.DataModel.Core.Content.ContentIntentModifier">ContentIntentModifier</seealso>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Content.FileContent.#ctor(System.String,System.String,System.Int32,System.String,System.Nullable{Emc.Documentum.FS.DataModel.Core.Content.RenditionType},System.Nullable{Emc.Documentum.FS.DataModel.Core.Content.ContentIntentModifier},System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="localPath">local file path</param>
            <param name="format">content`s format</param>
            <param name="pageNumber">page number</param>
            <param name="pageModifier">page modifier</param>
            <param name="renditionType">rendition type</param>
            <param name="intentModifier">content intent modifier</param>
            <param name="isInternalTempFile">the flag specifying whether it is a temp file</param>
            <seealso cref="T:Emc.Documentum.FS.DataModel.Core.Content.RenditionType">RenditionType</seealso>
            <seealso cref="T:Emc.Documentum.FS.DataModel.Core.Content.ContentIntentModifier">ContentIntentModifier</seealso>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Content.FileContent.GetName">
            <summary>
            Content's type name
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Content.FileContent.GetAsFile">
            <summary>
            Gets content representation as FileInfo. If there is a temp file generated during content transformation, the file won't be deleted automatically.
            </summary>
            <seealso cref="M:Emc.Documentum.FS.DataModel.Core.Content.FileContent.GetAsFileStream">GetAsFileStream</seealso>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Content.FileContent.GetAsFileStream">
            <summary>
            Gets content representation as FileStream. 
            If the Content points to a temp file generated by DFS runtime, the temp file will be removed automatically when the FileStream handler is closed.
            </summary>
            <seealso cref="M:Emc.Documentum.FS.DataModel.Core.Content.FileContent.GetAsFile">GetAsFile</seealso>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Content.FileContent.CanGetAsFile">
            <summary>
            Determines if content can be represented as file. 
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Content.FileContent.CanGetAsByteArray">
            <summary>
            Determines if content can be represented as byte array. 
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Content.FileContent.CanGetAsUcfPackageInfo">
            <summary>
            Internal use only
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Content.FileContent.LocalPath">
            <summary>
            Content`s file path.
            </summary>
        </member>
        <member name="T:Emc.Documentum.FS.DataModel.Core.Content.ProgressInfo">
            <summary>
             The ProgressInfo encapsulates information about operation progress.
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Content.ProgressInfo.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Content.ProgressInfo.#ctor(System.String,System.Int32,System.Int32,System.Int32,System.String,System.Int32,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="providerName">provider name, currently can be "DFC" or "UCF" or exception message if it was thrown during the operation.</param>
            <param name="maximum">maximum value for progress field (usually 100)</param>
            <param name="minimum">minimum value for progress field (usually 0)</param>
            <param name="progress">operation progress</param>
            <param name="stepName">operation step name</param>
            <param name="stepNumber">operation step number</param>
            <param name="indeterminate">operation progress state</param>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Content.ProgressInfo.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Content.ProgressInfo.ProviderName">
            <summary>
            Provider name
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Content.ProgressInfo.Maximum">
            <summary>
            Maximal value for Progress property
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Content.ProgressInfo.Minimum">
            <summary>
            Minimal value for Progress property
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Content.ProgressInfo.Progress">
            <summary>
            The operation progress
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Content.ProgressInfo.StepName">
            <summary>
            The operation step name
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Content.ProgressInfo.StepNumber">
            <summary>
            The operation step number
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Content.ProgressInfo.Indeterminate">
            <summary>
            Indicates if the operation progress is indeterminate
            </summary>
        </member>
        <member name="T:Emc.Documentum.FS.DataModel.Core.Content.RenditionType">
            <summary>
            The RenditionType shows if the content is a primary content or a rendition.
            </summary>
            <seealso cref="T:Emc.Documentum.FS.DataModel.Core.Content.Content">Content</seealso>
        </member>
        <member name="F:Emc.Documentum.FS.DataModel.Core.Content.RenditionType.CLIENT">
            <summary>
            That means that the <see cref="T:Emc.Documentum.FS.DataModel.Core.Content.Content"/> is a rendition was created by an user.
            </summary>
        </member>
        <member name="F:Emc.Documentum.FS.DataModel.Core.Content.RenditionType.SERVER">
            <summary>
            That means that the <see cref="T:Emc.Documentum.FS.DataModel.Core.Content.Content"/> is a rendition was generated by the content server.
            </summary>
        </member>
        <member name="F:Emc.Documentum.FS.DataModel.Core.Content.RenditionType.PRIMARY">
            <summary>
            That means that the <see cref="T:Emc.Documentum.FS.DataModel.Core.Content.Content"/> is a primary content.
            </summary>
        </member>
        <member name="T:Emc.Documentum.FS.DataModel.Core.Content.UcfContent">
            <summary>
            The UcfContent is used by DFS framework when ContentTransferMode.UCF is used. <para/>
            It is like the <see cref="T:Emc.Documentum.FS.DataModel.Core.Content.FileContent"/> but it allows DFS consumers manage the ucf connection via ActivityInfo.
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Content.UcfContent.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Content.UcfContent.#ctor(System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="localFilePath">file path to content</param>
            <param name="format">content`s format</param>
            <seealso cref="T:Emc.Documentum.FS.DataModel.Core.Content.Content">Content</seealso>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Content.UcfContent.#ctor(System.String,System.String,System.Int32,System.String,System.Nullable{Emc.Documentum.FS.DataModel.Core.Content.RenditionType})">
            <summary>
            Constructor
            </summary>
            <param name="localFilePath">file path to content</param>
            <param name="format">content`s format</param>
            <param name="pageNumber">content`s page number</param>
            <param name="pageModifier">content`s page modifier</param>
            <param name="renditionType">rendition type</param>
            <seealso cref="T:Emc.Documentum.FS.DataModel.Core.Content.Content">Content</seealso>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Content.UcfContent.#ctor(System.String,Emc.Documentum.FS.DataModel.Core.Content.ActivityInfo,System.String,System.Int32,System.String,System.Nullable{Emc.Documentum.FS.DataModel.Core.Content.RenditionType})">
            <summary>
            Constructor
            </summary>
            <param name="localFilePath">file path to content</param>
            <param name="activityInfo">ucf connection info</param>
            <param name="format">content`s format</param>
            <param name="pageNumber">content`s page number</param>
            <param name="pageModifier">content`s page modifier</param>
            <param name="renditionType">content's rendition type</param>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Content.UcfContent.#ctor(System.String,Emc.Documentum.FS.DataModel.Core.Content.ActivityInfo,System.String,System.Int32,System.String,System.Nullable{Emc.Documentum.FS.DataModel.Core.Content.RenditionType},System.Nullable{Emc.Documentum.FS.DataModel.Core.Content.ContentIntentModifier})">
            <summary>
            Constructor
            </summary>
            <param name="localFilePath">file path to content</param>
            <param name="activityInfo">ucf connection info</param>
            <param name="format">content`s format</param>
            <param name="pageNumber">content`s page number</param>
            <param name="pageModifier">content`s page modifier</param>
            <param name="renditionType">content's rendition type</param>
            <param name="intentModifier">content intent modifier</param>
            <seealso cref="P:Emc.Documentum.FS.DataModel.Core.Content.UcfContent.ActivityInfo">ActivityInfo</seealso>
            <seealso cref="T:Emc.Documentum.FS.DataModel.Core.Content.RenditionType">RenditionType</seealso>
            <seealso cref="T:Emc.Documentum.FS.DataModel.Core.Content.ContentIntentModifier">ContentIntentModifier</seealso>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Content.UcfContent.GetName">
            <summary>
            Content's type
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Content.UcfContent.CanGetAsFile">
            <summary>
            Determines if content can be represented as file. 
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Content.UcfContent.CanGetAsByteArray">
            <summary>
            Determines if content can be represented as byte array. 
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Content.UcfContent.CanGetAsUcfPackageInfo">
            <summary>
            Internal use only
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Content.UcfContent.GetAsUcfPackageInfo">
            <summary>
            Internal use only
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Content.UcfContent.LocalFilePath">
            <summary>
            Content`s file path.
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Content.UcfContent.ActivityInfo">
            <summary>
            Optional <see cref="P:Emc.Documentum.FS.DataModel.Core.Content.UcfContent.ActivityInfo"/> and allows to override it for this content.
            </summary>
        </member>
        <member name="T:Emc.Documentum.FS.DataModel.Core.Content.UcfPackageInfo">
            <summary>
            DFS internal use only.
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Content.UcfPackageInfo.#ctor">
            <summary>
            DFS internal use only.
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Content.UcfPackageInfo.#ctor(System.String,Emc.Documentum.FS.DataModel.Core.Content.ActivityInfo)">
            <summary>
            DFS internal use only.
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Content.UcfPackageInfo.CanUseTheUcfSessionInThisChain">
            <summary>
            DFS internal use only.
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Content.UcfPackageInfo.IsThisChainTheSessionInitiator">
            <summary>
            DFS internal use only.
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Content.UcfPackageInfo.FilePath">
            <summary>
            DFS internal use only.
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Content.UcfPackageInfo.ActivityInfo">
            <summary>
            DFS internal use only.
            </summary>
        </member>
        <member name="T:Emc.Documentum.FS.DataModel.Core.Content.UrlContent">
            <summary>
            UrlContent. 
            Contains content as URL.
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Content.UrlContent.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Content.UrlContent.#ctor(System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="url">URL to content</param>
            <param name="format">content`s format</param>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Content.UrlContent.#ctor(System.String,System.String,System.Int32,System.String,System.Nullable{Emc.Documentum.FS.DataModel.Core.Content.RenditionType})">
            <summary>
            Constructor
            </summary>
            <param name="url">URL to content</param>
            <param name="format">content`s format</param>
            <param name="pageNumber">content`s page number</param>
            <param name="pageModifier">content`s page modifier</param>
            <param name="renditionType">rendition type</param>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Content.UrlContent.#ctor(System.String,System.String,System.Int32,System.String,System.Nullable{Emc.Documentum.FS.DataModel.Core.Content.RenditionType},System.Nullable{Emc.Documentum.FS.DataModel.Core.Content.ContentIntentModifier})">
            <summary>
            Constructor
            </summary>
            <param name="url">URL to content</param>
            <param name="format">content`s format</param>
            <param name="pageNumber">content`s page number</param>
            <param name="pageModifier">content`s page modifier</param>
            <param name="renditionType">rendition type</param>
            <param name="intentModifier">content intent modifier</param>
            <seealso cref="T:Emc.Documentum.FS.DataModel.Core.Content.RenditionType">RenditionType</seealso>
            <seealso cref="T:Emc.Documentum.FS.DataModel.Core.Content.ContentIntentModifier">ContentIntentModifier</seealso>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Content.UrlContent.GetName">
            <summary>
            Content's type
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Content.UrlContent.CanGetAsByteArray">
            <summary>
            Determines if content can be represented as byte array. 
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Content.UrlContent.CanGetAsFile">
            <summary>
            Determines if content can be represented as file. 
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Content.UrlContent.CanGetAsUcfPackageInfo">
            <summary>
            Internal use only
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Content.UrlContent.Url">
            <summary>
            URL to content
            </summary>
        </member>
        <member name="T:Emc.Documentum.FS.DataModel.Core.Context.BasicIdentity">
            <summary>
            BasicIdentity directly extends the Identity parent class, and includes accessors for user name and password, but not
            for repository name.<para/>
            </summary>
        </member>
        <member name="T:Emc.Documentum.FS.DataModel.Core.Context.Identity">
            <summary>
            Identity is a mapping of repository names onto sets of user credentials used in service authentication.<para/>
            
            A service context is expected to contain only one identity per repository name. Identities will be set in a service
            context using one of two concrete subclasses: BasicIdentity and RepositoryIdentity.
            </summary>
            <seealso cref="T:Emc.Documentum.FS.DataModel.Core.Context.BasicIdentity">BasicIdentity</seealso>
            <seealso cref="T:Emc.Documentum.FS.DataModel.Core.Context.RepositoryIdentity">RepositoryIdentity</seealso>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Context.Identity.Clone">
            <summary>
            Clones identity.
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Context.BasicIdentity.#ctor">
            <summary>
            Constructs a new BasicIdentity.
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Context.BasicIdentity.#ctor(System.String,System.String)">
            <summary>
            Constructs a new BasicIdentity with given username and password
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Context.BasicIdentity.Clone">
            <summary>
            Clones identity.
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Context.BasicIdentity.UserName">
            <summary>
            User name.
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Context.BasicIdentity.Password">
            <summary>
            Password.
            </summary>
        </member>
        <member name="T:Emc.Documentum.FS.DataModel.Core.Context.OverridePermission">
            <summary>
            OverridePermission can be used to acquire extra permissions that are not granted to users by default.
            Extra permissions can be requested by ServiceContext#setOverridePermission these permissions would be valid until users reset it.
            
            Extra permissions can be also requested by com.emc.documentum.fs.datamodel.core#OperationOptions, these
            permissions would be only valid for current operation.
            </summary>
            <summary>
            OverridePermission can be used to acquire extra permissions that are not granted to users by default.
            Extra permissions can be requested by ServiceContext#setOverridePermission these permissions would be valid until users reset it.
            
            Extra permissions can be also requested by com.emc.documentum.fs.datamodel.core#OperationOptions, these
            permissions would be only valid for current operation.
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Context.OverridePermission.#ctor">
            <summary>
            Default Constructor.
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Context.OverridePermission.Clone">
            <summary>
            Clones OverridePermission.
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Context.OverridePermission.EnableUpdateInDormantState">
            whether allow users in dm_datacenter_managers group to execute update operation in dormant status.
            This permission is only for users in dm_datacenter_managers group. 
            Other users need and should not set it.
        </member>
        <member name="T:Emc.Documentum.FS.DataModel.Core.Context.RepositoryIdentity">
            <summary>
            RepositoryIdentity extends BasicIdentity, and specifies a mapping of repository name to a set of user credentials.<para/>
            
            RepositoryIdentity include a user name, password, and optionally a domain name if required by your network
            environment.
            </summary>
            <seealso cref="T:Emc.Documentum.FS.DataModel.Core.Context.Identity">Identity</seealso>
            <seealso cref="T:Emc.Documentum.FS.DataModel.Core.Context.BasicIdentity">BasicIdentity</seealso>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Context.RepositoryIdentity.#ctor">
            <summary>
            Constructs a new RepositoryIdentity.
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Context.RepositoryIdentity.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Constructs a new RepositoryIdentity with given repository name, username, password and domain.
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Context.RepositoryIdentity.Clone">
            <summary>
            Clones identity
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Context.RepositoryIdentity.RepositoryName">
            <summary>
            Represents repository name.
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Context.RepositoryIdentity.Domain">
            <domain>
            Represents domain.
            </domain>
        </member>
        <member name="T:Emc.Documentum.FS.DataModel.Core.Context.ServiceContext">
            <summary>
            ServiceContext contains mainly operation specific properties and is for optimization purpose. <para/>
            
            ServiceContext can be passed over the wire containing only single token. This is an appropriate optimization in
            applications where multiple services will be created sharing the same ServiceContext, and the ServiceContext is of
            significant size. If the ServiceContext is small and profiles are largely contained within the OperationOptions
            argument, then registration of the service context will not result in a significant optimization.
            </summary>
            <seealso cref="T:Emc.Documentum.FS.DataModel.Core.OperationOptions">OperationOptions</seealso>
            <seealso cref="T:Emc.Documentum.FS.DataModel.Core.Context.Identity">Identity</seealso>
            <seealso cref="T:Emc.Documentum.FS.DataModel.Core.Profiles.Profile">Profile</seealso>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Context.ServiceContext.SetRuntimeProperty``1(System.String,``0)">
            <summary>
            Adds a property to ServiceContext's PropertySet.
            </summary>
            <param name="name">name of the property</param>
            <param name="value">value of the property</param>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Context.ServiceContext.GetProfile(System.Type)">
            <summary>
            Returns <see cref="T:Emc.Documentum.FS.DataModel.Core.Profiles.Profile"/> of the ServiceContext. Will return null if
            there is no defined Profile for the provided type.
            </summary>
            <param name="t">Type of profile</param>
            <returns>Profile of stipulated type</returns>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Context.ServiceContext.Clone">
            <summary>
            Clones current instance of ServiceContext.
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Context.ServiceContext.Identities">
            <summary>
            Contains identities collection.
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Context.ServiceContext.Profiles">
            <summary>
            Profiles contained in ServiceContext.
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Context.ServiceContext.RuntimeProperties">
            <summary>
            Runtime properties contained in ServiceContext.
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Context.ServiceContext.OverridePermission">
            <summary>
            The current extra permissions that users requested.
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Context.ServiceContext.Token">
            <summary>
            If supplied by the service consumer, the token should have the following format:
            <machine-name/>/<machine-ip/>-<unique-id/>
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Context.ServiceContext.Locale">
            <summary>
            Locale property.
            </summary>
        </member>
        <member name="T:Emc.Documentum.FS.DataModel.Core.Context.SsoIdentity">
            <summary>
            SsoIdentity extends the BasicIdentity parent class, and includes
            accessors for user name and password, but not for repository name.<p/>
            This class can be used in cases where the service is known to access only
            a single repository, or in cases where the user credentials in all
            repositories are known to be identical. BasicIdentity can also be used to
            supply fallback credentials in the case where the user has differing
            credentials on some repositories, for which RepositoryIdentity instances
            will be set, and identical credentials on all other repositories.
            </summary>
            <seealso cref="T:Emc.Documentum.FS.DataModel.Core.Context.RepositoryIdentity">RepositoryIdentity</seealso>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Context.SsoIdentity.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Context.SsoIdentity.#ctor(System.String,System.String,System.String)">
            <summary>
            Constructs a SsoIdentity object.
            </summary>
            <param name="userName">a string representing the username</param>
            <param name="password">a string representing the password</param>
            <param name="ssoType">a string representing the type of SSO manager</param>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Context.SsoIdentity.#ctor(System.Web.HttpRequest)">
            <summary>
            Constructs a SsoIdentity object from the incoming HTTP request. 
            Will read all known HTTP headers/cookies defined in "dfs-sso-config.properties" 
            and initialize username, password and SSO type.
            </summary>
            <param name="request">the incoming HTTP request</param>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Context.SsoIdentity.Clone">
            <summary>
            Clones identity
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Context.SsoIdentity.SsoType">
            <summary>
            DFC-specific SSO integration type (e.g. dm_rsa).
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Context.SsoIdentity.HttpRequest">
            <exclude/>
        </member>
        <member name="T:Emc.Documentum.FS.DataModel.Shared.Impl.Soap.BinarySecurityToken">
            <summary>
            A wsse:BinarySecurityToken element
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Shared.Impl.Soap.BinarySecurityToken.OnWriteHeaderContents(System.Xml.XmlDictionaryWriter,System.ServiceModel.Channels.MessageVersion)">
            <summary>
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Shared.Impl.Soap.BinarySecurityToken.Name">
            <summary>
            The SOAP header name
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Shared.Impl.Soap.BinarySecurityToken.Namespace">
            <summary>
            The SOAP header namespace
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Shared.Impl.Soap.BinarySecurityToken.QualificationValueType">
            <summary>
            The token type
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Shared.Impl.Soap.BinarySecurityToken.EncodingType">
            <summary>
            The encoding applied to the token value
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Shared.Impl.Soap.BinarySecurityToken.ValueType">
            <summary>
            The token value type
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Shared.Impl.Soap.BinarySecurityToken.Id">
            <summary>
            The token id
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Shared.Impl.Soap.BinarySecurityToken.Value">
            <summary>
            The token value
            </summary>
        </member>
        <member name="T:Emc.Documentum.FS.DataModel.Shared.Impl.Soap.EncodingType">
            <summary>
            Encoding types supported by elements in this package
            </summary>
        </member>
        <member name="F:Emc.Documentum.FS.DataModel.Shared.Impl.Soap.EncodingType.Base64Binary">
            <summary>
            BASE64 encoding
            </summary>
        </member>
        <member name="T:Emc.Documentum.FS.DataModel.Shared.Impl.Soap.Security">
            <summary>
            A wsse:Security element
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Shared.Impl.Soap.Security.OnWriteHeaderContents(System.Xml.XmlDictionaryWriter,System.ServiceModel.Channels.MessageVersion)">
            <summary>
            Marshalls the encapsulated elements into the SOAP header
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Shared.Impl.Soap.Security.Name">
            <summary>
            The SOAP header name
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Shared.Impl.Soap.Security.Namespace">
            <summary>
            The SOAP header namespace
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Shared.Impl.Soap.Security.BinarySecurityToken">
            <summary>
            The wsse:BinarySecurityToken element associated with the security header
            </summary>
        </member>
        <member name="T:Emc.Documentum.FS.DataModel.Shared.Impl.XmlNamespace">
            <summary>
            </summary>
        </member>
        <member name="F:Emc.Documentum.FS.DataModel.Shared.Impl.XmlNamespace.WSSE">
            <summary>
            </summary>
        </member>
        <member name="F:Emc.Documentum.FS.DataModel.Shared.Impl.XmlNamespace.WSSE11">
            <summary>
            </summary>
        </member>
        <member name="F:Emc.Documentum.FS.DataModel.Shared.Impl.XmlNamespace.WSU">
            <summary>
            </summary>
        </member>
        <member name="F:Emc.Documentum.FS.DataModel.Shared.Impl.XmlNamespace.S">
            <summary>
            </summary>
        </member>
        <member name="T:Emc.Documentum.FS.DataModel.Core.Profiles.CheckinProfile">
            <summary>
            CheckinProfile normally passed within OperationOptions, controls specific behaviors of the checkin operation. <para/>
            
            Has two internal properties:<para/>
            deleteLocalFileHint  -  If true, remove the local file from the client
            (when using <see cref="F:Emc.Documentum.FS.DataModel.Core.Content.ContentTransferMode.UCF"/> transfer mode in <see cref="T:Emc.Documentum.FS.DataModel.Core.Profiles.ContentTransferProfile"/>)
            
            when checking in to the repository. Default value is false.<para/>
            makeCurrent  - If true, makes the checked in version the CURRENT version. Default value is false.
            </summary>
            <seealso cref="T:Emc.Documentum.FS.DataModel.Core.Profiles.ContentTransferProfile">ContentTransferProfile</seealso>
            <seealso cref="T:Emc.Documentum.FS.DataModel.Core.Content.ContentTransferMode">ContentTransferMode</seealso>
            <seealso cref="T:Emc.Documentum.FS.DataModel.Core.OperationOptions">OperationOptions</seealso>
        </member>
        <member name="T:Emc.Documentum.FS.DataModel.Core.Profiles.Profile">
            <summary>
            Profile base abstract class for all core services profiles.
            </summary>
            <para/><seealso cref="T:Emc.Documentum.FS.DataModel.Core.Profiles.CheckinProfile">CheckinProfile</seealso>
            <para/><seealso cref="T:Emc.Documentum.FS.DataModel.Core.Profiles.CheckoutProfile">CheckoutProfile</seealso>
            <para/><seealso cref="T:Emc.Documentum.FS.DataModel.Core.Profiles.ContentProfile">ContentProfile</seealso>
            <para/><seealso cref="T:Emc.Documentum.FS.DataModel.Core.Profiles.ContentTransferProfile">ContentTransferProfile</seealso>
            <para/><seealso cref="T:Emc.Documentum.FS.DataModel.Core.Profiles.CopyProfile">CopyProfile</seealso>
            <para/><seealso cref="T:Emc.Documentum.FS.DataModel.Core.Profiles.DeleteProfile">DeleteProfile</seealso>
            <para/><seealso cref="T:Emc.Documentum.FS.DataModel.Core.Profiles.MoveProfile">MoveProfile</seealso>
            <para/><seealso cref="T:Emc.Documentum.FS.DataModel.Core.Profiles.PermissionProfile">PermissionProfile</seealso>
            <para/><seealso cref="T:Emc.Documentum.FS.DataModel.Core.Profiles.PropertyProfile">PropertyProfile</seealso>
            <para/><seealso cref="T:Emc.Documentum.FS.DataModel.Core.Profiles.RelationshipProfile">RelationshipProfile</seealso>
            <para/><seealso cref="T:Emc.Documentum.FS.DataModel.Core.Profiles.SchemaProfile">SearchProfile</seealso>
            <para/><seealso cref="T:Emc.Documentum.FS.DataModel.Core.Profiles.SchemaProfile">RichTextProfile</seealso>
            <para/><seealso cref="T:Emc.Documentum.FS.DataModel.Core.Profiles.SchemaProfile">ClusteringProfile</seealso>
            <para/><seealso cref="T:Emc.Documentum.FS.DataModel.Core.Profiles.SchemaProfile">LifecycleExecutionProfile</seealso>
            <para/><seealso cref="T:Emc.Documentum.FS.DataModel.Core.Profiles.SchemaProfile">VdmRetrieveProfile</seealso>
            <para/><seealso cref="T:Emc.Documentum.FS.DataModel.Core.Profiles.SchemaProfile">VdmUpdateProfile</seealso>
            <para/><seealso cref="T:Emc.Documentum.FS.DataModel.Core.Profiles.SchemaProfile">CreateProfile</seealso>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Profiles.Profile.Clone">
            <summary>
            Clones Profile
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Profiles.CheckinProfile.#ctor">
            <summary>
            Constructs a new CheckinProfile.
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Profiles.CheckinProfile.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Constructs a new CheckinProfile with all flags set.
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Profiles.CheckinProfile.Clone">
            <summary>
            Clones CheckinProfile.
            </summary>
            <returns>Cloned profile.</returns>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Profiles.CheckinProfile.DeleteLocalFileHint">
            <summary>
            If true, remove the local file from the client
            (when using <see cref="F:Emc.Documentum.FS.DataModel.Core.Content.ContentTransferMode.UCF"/> transfer mode in <see cref="T:Emc.Documentum.FS.DataModel.Core.Profiles.ContentTransferProfile"/>)
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Profiles.CheckinProfile.MakeCurrent">
            <summary>
            If true, makes the checked in version the CURRENT version.
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Profiles.CheckinProfile.IsCheckinOnlyVDMRoot">
            <summary>
            Indicates whether or not the Virtual Document Root is checked in by itself
            or with all of the documents that are linked to it.
            </summary>
        </member>
        <member name="T:Emc.Documentum.FS.DataModel.Core.Profiles.CheckoutProfile">
            <summary>
            CheckoutProfile, which is normally passed within <code>OperationOptions</code>, controls specific
            behaviors of the checkout operation. <p/>
            It has one internal property:<para/>
            CheckoutOnlyVDMRoot  -  If true, in case of a Virtual document it will checkout only the Virtual Document Root
            The default value is false.
            </summary>
            <seealso cref="T:Emc.Documentum.FS.DataModel.Core.OperationOptions">OperationOptions</seealso>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Profiles.CheckoutProfile.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Profiles.CheckoutProfile.#ctor(System.Boolean)">
            <summary>
            Constructs a new CheckoutProfile.
            </summary>
            <param name="checkoutOnlyVDMRoot">
            Set to true to checkout only the Virtual Document Root.
            The default is false (check out the root and all linked documents).
            </param>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Profiles.CheckoutProfile.Clone">
            <summary>
            Clones profile.
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Profiles.CheckoutProfile.CheckoutOnlyVDMRoot">
            <summary>
            Indicates whether or not the Virtual Document Root is checked out by itself or
            with all of the documents that are linked to it.<p/>
            If true, will checkout only the virtual document without
            checking out the documents that are linked to it. The default is false
            and will checkout all of the documents that are linked to the virtual document.
            </summary>
        </member>
        <member name="T:Emc.Documentum.FS.DataModel.Core.Profiles.ClusteringProfile">
            <summary>
            ClusteringProfile, which is normally passed within <code>OperationOptions</code>, is used to set
            clustering calculation settings. <p/>
            </summary>
            <seealso cref="T:Emc.Documentum.FS.DataModel.Core.Profiles.Profile">Profile</seealso>
            <seealso cref="T:Emc.Documentum.FS.DataModel.Core.OperationOptions">OperationOptions</seealso>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Profiles.ClusteringProfile.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Profiles.ClusteringProfile.#ctor(Emc.Documentum.FS.DataModel.Core.Query.ClusteringStrategy)">
            <summary>
            Creates a ClusteringProfile with the specified ClusteringStrategy
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Profiles.ClusteringProfile.AddClusteringStrategy(Emc.Documentum.FS.DataModel.Core.Query.ClusteringStrategy)">
            <summary>
            Adds a ClusteringStrategy to this ClusteringProfile.
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Profiles.ClusteringProfile.Clone">
            <summary>
            Clones Profile
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Profiles.ClusteringProfile.ClusteringStrategies">
            <summary>
            The ClusteringProfile ClusteringStrategy list.
            </summary>        
        </member>
        <member name="T:Emc.Documentum.FS.DataModel.Core.Profiles.ContentProfile">
            <summary>
            The ContentProfile is intended to manipulate contents. It indicates how the DFS framework should return them.<para/>
            <li> Contents can be filtered</li>
            <li> Can be transformed to required type</li>
            <li> Can be handled after the transfer has been completed</li>
            </summary>
            <seealso cref="N:Emc.Documentum.FS.DataModel.Core.Content">Content</seealso>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Profiles.ContentProfile.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Profiles.ContentProfile.#ctor(Emc.Documentum.FS.DataModel.Core.Profiles.FormatFilter,System.String,Emc.Documentum.FS.DataModel.Core.Profiles.PageFilter,System.Int32,Emc.Documentum.FS.DataModel.Core.Profiles.PageModifierFilter,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="formatFilter">format filter</param>
            <param name="format">content`s format to be filtered by <i>(if formatFilter is <see cref="F:Emc.Documentum.FS.DataModel.Core.Profiles.FormatFilter.SPECIFIED"/>)</i></param>
            <param name="pageFilter">page filter</param>
            <param name="pageNumber">content`s page number to be filtered by <i>(if pageFilter is <see cref="F:Emc.Documentum.FS.DataModel.Core.Profiles.FormatFilter.SPECIFIED"/>)</i></param>
            <param name="pageModifierFilter">page modifier filter</param>
            <param name="pageModifier">content`s page modifier to be filtered by <i>(if pageModifierFilter is <see cref="F:Emc.Documentum.FS.DataModel.Core.Profiles.FormatFilter.SPECIFIED"/>)</i></param>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Profiles.ContentProfile.#ctor(Emc.Documentum.FS.DataModel.Core.Profiles.FormatFilter,System.String,Emc.Documentum.FS.DataModel.Core.Profiles.PageFilter,System.Int32,Emc.Documentum.FS.DataModel.Core.Profiles.PageModifierFilter,System.String,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="formatFilter">format filter</param>
            <param name="format">content`s format to be filtered by <i>(if formatFilter is <see cref="F:Emc.Documentum.FS.DataModel.Core.Profiles.FormatFilter.SPECIFIED"/>)</i></param>
            <param name="pageFilter">page filter</param>
            <param name="pageNumber">content`s page number to be filtered by <i>(if pageFilter is <see cref="F:Emc.Documentum.FS.DataModel.Core.Profiles.FormatFilter.SPECIFIED"/>)</i></param>
            <param name="pageModifierFilter">page modifier filter</param>
            <param name="pageModifier">content`s page modifier to be filtered by <i>(if pageModifierFilter is <see cref="F:Emc.Documentum.FS.DataModel.Core.Profiles.FormatFilter.SPECIFIED"/>)</i></param>
            <param name="launchApplicationAction">command string <see cref="P:Emc.Documentum.FS.DataModel.Core.Profiles.ContentProfile.PostTransferAction"/></param>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Profiles.ContentProfile.#ctor(Emc.Documentum.FS.DataModel.Core.Profiles.FormatFilter,System.String,Emc.Documentum.FS.DataModel.Core.Profiles.PageFilter,System.Int32,Emc.Documentum.FS.DataModel.Core.Profiles.PageModifierFilter,System.String,System.String,Emc.Documentum.FS.DataModel.Core.Profiles.UrlReturnPolicy,Emc.Documentum.FS.DataModel.Core.Profiles.RenditionTypeFilter,Emc.Documentum.FS.DataModel.Core.Profiles.RenditionOption)">
            <summary>
            Constructor.
            </summary>
            <param name="formatFilter">format filter</param>
            <param name="format">content`s format to be filtered by <i>(if formatFilter is <see cref="F:Emc.Documentum.FS.DataModel.Core.Profiles.FormatFilter.SPECIFIED"/>)</i></param>
            <param name="pageFilter">page filter</param>
            <param name="pageNumber">content`s page number to be filtered by <i>(if pageFilter is <see cref="F:Emc.Documentum.FS.DataModel.Core.Profiles.FormatFilter.SPECIFIED"/>)</i></param>
            <param name="pageModifierFilter">page modifier filter</param>
            <param name="pageModifier">content`s page modifier to be filtered by <i>(if pageModifierFilter is <see cref="F:Emc.Documentum.FS.DataModel.Core.Profiles.FormatFilter.SPECIFIED"/>)</i></param>
            <param name="launchApplicationAction">command string <see cref="P:Emc.Documentum.FS.DataModel.Core.Profiles.ContentProfile.PostTransferAction"/></param>
            <param name="urlReturnPolicy">url return policy</param>
            <param name="renditionTypeFilter">rendition type filter</param>
            <param name="renditionOption">rendition option</param>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Profiles.ContentProfile.Clone">
            <summary>
            Clones profile.
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Profiles.ContentProfile.FormatFilter">
            <summary>  
            Gets format filter.<para/>
            <li> If format filter is <see cref="F:Emc.Documentum.FS.DataModel.Core.Profiles.FormatFilter.SPECIFIED"/> then value returned by
            <see cref="P:Emc.Documentum.FS.DataModel.Core.Profiles.ContentProfile.Format"/> will be used to filter contents.
            Only those contents will be returned which have the same format.</li>
            <li> If format filter is <see cref="F:Emc.Documentum.FS.DataModel.Core.Profiles.FormatFilter.ANY"/>
            then all contents will be returned.</li>
            <li> If format filter is <see cref="F:Emc.Documentum.FS.DataModel.Core.Profiles.FormatFilter.NONE"/>
            then no contents will be returned. (Other filters: <see cref="P:Emc.Documentum.FS.DataModel.Core.Profiles.ContentProfile.PageFilter"/>,<see cref="P:Emc.Documentum.FS.DataModel.Core.Profiles.ContentProfile.PageModifierFilter"/> are ignored)</li>
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Profiles.ContentProfile.formatFilterSpecified">
            <exclude/>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Profiles.ContentProfile.Format">
            <summary>
            Content's format.
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Profiles.ContentProfile.PageFilter">
            <summary>
            Page filter.
            <li> If page filter value is <see cref="F:Emc.Documentum.FS.DataModel.Core.Profiles.PageFilter.SPECIFIED">PageFilter.SPECIFIED</see> then value returned by <see cref="P:Emc.Documentum.FS.DataModel.Core.Profiles.ContentProfile.PageNumber"/> will be
            used to filter contents. Only those contents will be returned which have the same page number.</li>
            <li> If page filter value is <see cref="F:Emc.Documentum.FS.DataModel.Core.Profiles.PageFilter.ANY"/> then contents won`t be filtered by page number.</li>
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Profiles.ContentProfile.pageFilterSpecified">
            <exclude/>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Profiles.ContentProfile.PageNumber">
            <summary>
            Content`s page number to filter.
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Profiles.ContentProfile.PageModifierFilter">
            <summary>
            Page modifier filter.
            <li> If page modifier filter value is <see cref="F:Emc.Documentum.FS.DataModel.Core.Profiles.PageModifierFilter.SPECIFIED"/>
            then value returned by <see cref="P:Emc.Documentum.FS.DataModel.Core.Profiles.ContentProfile.PageModifier"/> will be used to filter contents. Only contents
            those have the same page modifier will be returned.</li>
            <li> If page modifier is <see cref="F:Emc.Documentum.FS.DataModel.Core.Profiles.PageModifierFilter.ANY"/>
            then contents won`t be filtered by page modifier.</li>
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Profiles.ContentProfile.pageModifierFilterSpecified">
            <exclude/>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Profiles.ContentProfile.PageModifier">
            <summary>
            Gets a page modifier for this content.
            </summary>
            <seealso cref="P:Emc.Documentum.FS.DataModel.Core.Profiles.ContentProfile.PageModifierFilter">PageModifierFilter</seealso>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Profiles.ContentProfile.ContentReturnType">
            <summary>
            Gets type of content to transform into.
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Profiles.ContentProfile.PostTransferAction">
            <summary>
            Sets the command to handle the contents on client side after the transfer has been completed. It is used only for UCF transfer mode.
            <list type="table">
            
            <item>
                <term><i>"dfs:view"</i></term>
                <description>runs the default viewer for each returned content</description>
            </item>
            <item>
                <term><i>"dfs:edit"</i></term>
                <description>runs the default editor</description>
            </item>
            <item>
                <term><i>"dfs:edit?app=notepad"</i></term>
                <description>runs the custom editor (notepad)</description>
            </item>
            <item>
                <term><i>"dfs:edit?app=java-cp\"c:\\Program Files\\javacustomapp\\app.jar\"com.emc...ContentHandler"</i></term>
                <description>runs the custom content handler<para/>
            <b>OS equivalent is:</b><para/>
            <i>c:\> java -cp "c:\Program Files\javacustomapp\app.jar" com.emc...ContentHandler ContentsFileName</i>
            </description>
            </item>
            </list>
            
            
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Profiles.ContentProfile.UrlReturnPolicy">
            <summary>
            Gets url return policy.
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Profiles.ContentProfile.RenditionTypeFilter">
            <summary>
            Content`s rendition type filter.
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Profiles.ContentProfile.RenditionOption">
            <summary>
            Content`s rendition option.
            </summary>
        </member>
        <member name="T:Emc.Documentum.FS.DataModel.Core.Profiles.ContentRegistryOption">
            <summary>
            The ContentRegistryOption shows the registry options of handling a returned content at the client machine.
            Options IMPLIED, NOT_REGISTERED and REGISTERED_AS_VIEWED are supported.
            This option is applied to UCF content;
            This option is not applied to page zero primary content in the returned contents of checkout operation.
            </summary>
            <seealso cref="T:Emc.Documentum.FS.DataModel.Core.Profiles.ContentTransferProfile">ContentTransferProfile</seealso>
        </member>
        <member name="F:Emc.Documentum.FS.DataModel.Core.Profiles.ContentRegistryOption.IMPLIED">
            <summary>
            Implied behavior since 6.0. Typically, only page zero of primary content will be registered as viewed.
            </summary>
        </member>
        <member name="F:Emc.Documentum.FS.DataModel.Core.Profiles.ContentRegistryOption.UNREGISTERED">
            <summary>
            Do not register the content file in Documentum registry.
            </summary>
        </member>
        <member name="F:Emc.Documentum.FS.DataModel.Core.Profiles.ContentRegistryOption.REGISTERED_AS_VIEWED">
            <summary>
            The content file in Documentum registry. The file is read-only and will be automatically cleaned up.
            </summary>
        </member>
        <member name="T:Emc.Documentum.FS.DataModel.Core.Profiles.ContentTransferProfile">
            <summary>
            The ContentTransferProfile is used to indicate how a content should be transfered to/from DFS.
            </summary>
            <seealso cref="T:Emc.Documentum.FS.DataModel.Core.OperationOptions">OperationOptions</seealso>
            <seealso cref="T:Emc.Documentum.FS.DataModel.Core.Context.ServiceContext">ServiceContext</seealso>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Profiles.ContentTransferProfile.#ctor">
            <summary>
            Default constructor. Default transfer mode is MTOM
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Profiles.ContentTransferProfile.Clone">
            <summary>
            Clones profile. Do not super clone ActivityInfo.
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Profiles.ContentTransferProfile.ActivityInfo">
            <summary>
            UCF connection descriptor.
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Profiles.ContentTransferProfile.TransferMode">
            <summary>
            Contents` transfer mode.
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Profiles.ContentTransferProfile.transferModeSpecified">
            <exclude/>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Profiles.ContentTransferProfile.Geolocation">
            <summary>
            Geographical location of the client computer used to optimize content transfer.
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Profiles.ContentTransferProfile.AllowCachedContentTransfer">
            <summary>
            Establish whether or not cached content transfer is allowed.
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Profiles.ContentTransferProfile.AllowAsyncContentTransfer">
            <summary>
            Establish whether or not asynchronous content transfer is allowed.
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Profiles.ContentTransferProfile.IsProcessOLELinks">
            <summary>
            Flag that determines whether to process Microsoft Office links.
            If true enables inbound link processing when the UCF client is Windows.  Scanning is done on the UCF client, 
            and will create or modify a compound Virtual document if links are found in the document. 
            Microsoft Office must be installed or the operation will fail.
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Profiles.ContentTransferProfile.XmlApplicationName">
            <summary>
            The name of XML application name, if one was set,that is applied to the document upon import.
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Profiles.ContentTransferProfile.ContentRegistryOption">
            <summary>
            The content`s registry option. It is used only for UCF transfer mode.
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Profiles.ContentTransferProfile.DestinationDirectory">
            <summary>
            The content`s destination directory at the client machine. It is used only for UCF transfer mode.
            </summary>
        </member>
        <member name="T:Emc.Documentum.FS.DataModel.Core.Profiles.CopyProfile">
            <summary>
            CopyProfile normally passed within OperationOptions, controls specific behaviors of the copy operation.<p/>
            
            Has two internal properties:<para/>
            DeepCopyFolders  - If true, copies all folders and their contents descended from any folder specified in fromObjects.
            Default value is false.
            <p/>
            NonCurrentObjectAllowed - If true, allows copy of non-CURRENT objects; otherwise
            ObjectService.Copy(ObjectIdentitySet, ObjectLocation, DataPackage, OperationOptions)
            throws an exception on attempt to copy non-CURRENT object. Default value is false.
            </summary>
            <seealso cref="T:Emc.Documentum.FS.DataModel.Core.OperationOptions">OperationOptions</seealso>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Profiles.CopyProfile.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Profiles.CopyProfile.Clone">
            <summary>
            Clones profile.
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Profiles.CopyProfile.IsNonCurrentObjectAllowed">
            <summary>
            NonCurrentObjectAllowed - If true, allows copy of non-CURRENT objects; otherwise
            ObjectService.Copy(ObjectIdentitySet, ObjectLocation, DataPackage, OperationOptions)
            throws an exception on attempt to copy non-CURRENT object. Default value is false.
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Profiles.CopyProfile.IsDeepCopyFolders">
            <summary>
            If true, copies all folders and their contents descended from any folder specified in
            fromObjects
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Profiles.CopyProfile.IsCopyOnlyVDMRoot">
            <summary>
            If true will copy only the Virtual document without copying out the
            documents linked to it. Default is false and will copy also all the documents linked to Virtual Document.
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Profiles.CopyProfile.LeaveAssemblies">
            <summary>
            Specifies whether the assemblies should be copied with their assembly documents.<p/>
            If true, then only the assembly parent will be copied.<p/>
            If false, then all of the documents in the assembly will be copied and a new assembly structure will be created.
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Profiles.CopyProfile.LeaveRelationships">
            <summary>
            Specifies whether the relationships(containment or assembly) should be fixed.<p/>
            If true, then the objects specified in the copy operation are copied but the relationships(containment or
            assembly) are not applied.<p/>
            If false, then all relationships are resolved.
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Profiles.CopyProfile.CopyChildrenAsReferences">
            <summary>
            Specifies whether the children in a virtual document are referenced when parent is copied or copy creates.<p/>
            If false, Create new copies of referenced children when parent is copied.<p/>
            If true, then reference existing children when parent is copied.
            </summary>
        </member>
        <member name="T:Emc.Documentum.FS.DataModel.Core.Profiles.CreateProfile">
            <summary>
            CreateProfile is a profile controlling version state and labels on the creation of document objects <para/>
            It has one two internal properties:<para/>
            documentCheckout  -  If true, in case of a document it will be checkedout on creation.Ignored for non-document objects.
            The default value is false.<para/>
            documentLabels  -  A list of labels being applied to the newly-creating document. Ignored for non-document objects.
            </summary>
            <seealso cref="T:Emc.Documentum.FS.DataModel.Core.OperationOptions">OperationOptions</seealso>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Profiles.CreateProfile.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Profiles.CreateProfile.#ctor(System.Boolean,System.Collections.Generic.List{System.String})">
            <summary>
            Constructs a new CreateProfile.
            </summary>
            <param name="documentCheckout">
            Set to true to checkout the document on creation. Ignored for non-document objects.
            The default is false.
            </param>
            <param name="documentLabels">
            Apply labels on the newly creating document. Ignored for non-document objects.
            </param>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Profiles.CreateProfile.Clone">
            <summary>
            Clones profile.
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Profiles.CreateProfile.DocumentCheckout">
            <summary>
            
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Profiles.CreateProfile.DocumentLabels">
            <summary>
            
            </summary>
        </member>
        <member name="T:Emc.Documentum.FS.DataModel.Core.Profiles.DeleteProfile">
            <summary>
            DeleteProfile normally passed within OperationOptions, controls specific behaviors of the delete operation. <p/>
            Has five internal properties:<p/>
            IsDeepDeleteFolders - If true, deletes all folders under a folder specified in objectsToDelete. This setting does not
            specify whether non-folder objects that are linked into other folders are deleted from the repository. Default value
            is false.
            <p/>
            IsDeepDeleteVdmInFolders - If true, for each folder specified in objectsToDelete, removes all virtual document
            children descended from virtual documents residing in the folder tree, even if the child objects of the virtual
            document reside in folders outside the folder tree descended from the specified folder. Default value is false.
            <p/>
            VersionStrategy - DeleteVersionStrategy.SELECTED_VERSIONS delete only the specified version of the object.
            If CURRENT version only is deleted, the previous version becomes the CURRENT version. Default value is
            DeleteVersionStrategy#ALL_VERSIONS.
            <p/>
            PopulateWithReferences - Specifies whether reference objects should be dereferenced during population i.e. when
            files/objects are added to the operation. True will indicate that the reference objects themselves will be added to
            the operation. False will indicate that reference objects will be dereferenced and the remote object will be added to
            the operation. The default is false.<p/>
            
            deepDeleteChildrenInFolders - 
            </summary>
            <seealso cref="T:Emc.Documentum.FS.DataModel.Core.Profiles.DeleteVersionStrategy">DeleteVersionStrategy</seealso>
            <seealso cref="T:Emc.Documentum.FS.DataModel.Core.OperationOptions">OperationOptions</seealso>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Profiles.DeleteProfile.#ctor">
            <summary>
            Constructs a new DeleteProfile.
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Profiles.DeleteProfile.Clone">
            <summary>
            Clones profile.
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Profiles.DeleteProfile.IsDeleteVdm">
            <summary>
            If true the delete operation will delete virtual document with all the children. 
            If false (default) only the root of the virtual document will be deleted.
            This flag is processed only when the id of a virtual document root is 
            passed to the operation. If to the operation is passed a folder id that contains 
            a virtual document than all the children of the virtual document that are in the 
            folder will be deleted. If isDeepDeleteVdmInFolders set to true than the children 
            of the virtual document that resides under other folders will also be deleted.
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Profiles.DeleteProfile.IsDeepDeleteFolders">
            <summary>
            If true, deletes all folders under a folder specified in objectsToDelete. This
            setting does not specify whether non-folder objects that are linked into other folders are deleted from the
            repository.
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Profiles.DeleteProfile.IsDeepDeleteVdmInFolders">
            <summary>
            If true, for each folder specified in objectsToDelete, removes all virtual
            document children descended from virtual documents residing in the folder tree, even if the child objects of the
            virtual document reside in folders outside the folder tree descended from the specified folder.
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Profiles.DeleteProfile.IsPopulateWithReferences">
            <summary>
            Specifies whether reference objects should be dereferenced during population
            i.e. when files/objects are added to the operation. True will indicate that the reference objects themselves will
            be added to the operation. False will indicate that reference objects will be dereferenced and the remote object
            will be added to the operation.
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Profiles.DeleteProfile.IsDeepDeleteChildrenInFolders">
            <summary>
            Specifies if folder's children should be deleted.
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Profiles.DeleteProfile.VersionStrategy">
            <summary>
            SETS versionStrategy - DeleteVersionStrategy#SELECTED_VERSIONS delete only the specified version of
            the object. If CURRENT version only is deleted, the previous version becomes the CURRENT version.
            Default value is <see cref="F:Emc.Documentum.FS.DataModel.Core.Profiles.DeleteVersionStrategy.ALL_VERSIONS">DeleteVersionStrategy#ALL_VERSIONS</see>.
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Profiles.DeleteProfile.versionStrategySpecified">
            <exclude/>
        </member>
        <member name="T:Emc.Documentum.FS.DataModel.Core.Profiles.DeleteVersionStrategy">
            <summary>
            Enumeration used in <see cref="T:Emc.Documentum.FS.DataModel.Core.Profiles.DeleteProfile">DeleteProfile</see> to specify the deleting strategy
            </summary>
        </member>
        <member name="F:Emc.Documentum.FS.DataModel.Core.Profiles.DeleteVersionStrategy.IMPLIED">
            <summary>
            IMPLIED = ALL_VERSIONS
            </summary>
        </member>
        <member name="F:Emc.Documentum.FS.DataModel.Core.Profiles.DeleteVersionStrategy.SELECTED_VERSIONS">
            <summary>
            Delete the selected version of the object.
            </summary>
        </member>
        <member name="F:Emc.Documentum.FS.DataModel.Core.Profiles.DeleteVersionStrategy.UNUSED_VERSIONS">
            <summary>
            Delete the unused versions of the object. Unused versions are those versions that do not have symbolic labels.
            </summary>
        </member>
        <member name="F:Emc.Documentum.FS.DataModel.Core.Profiles.DeleteVersionStrategy.ALL_VERSIONS">
            <summary>
            Delete all versions of the object.
            </summary>
        </member>
        <member name="T:Emc.Documentum.FS.DataModel.Core.Profiles.DepthFilter">
            <summary>
            DepthFilter enum sets the depth of the returned relationships.
            </summary>
        </member>
        <member name="F:Emc.Documentum.FS.DataModel.Core.Profiles.DepthFilter.SINGLE">
            <summary>
            Only immediately related objects are included (no "descend/ascend")
            </summary>
        </member>
        <member name="F:Emc.Documentum.FS.DataModel.Core.Profiles.DepthFilter.SPECIFIED">
            <summary>
            Descend/ascend specified number of levels (1-N)
            </summary>
        </member>
        <member name="F:Emc.Documentum.FS.DataModel.Core.Profiles.DepthFilter.UNLIMITED">
            <summary>
            Descend/ascend unlimited number of levels.
            </summary>
        </member>
        <member name="T:Emc.Documentum.FS.DataModel.Core.Profiles.FormatFilter">
            <summary>
            Format filter enum. Is used in conjunction with ContentProfile.
            </summary>
            <seealso cref="T:Emc.Documentum.FS.DataModel.Core.Profiles.ContentProfile">ContentProfile</seealso>
        </member>
        <member name="F:Emc.Documentum.FS.DataModel.Core.Profiles.FormatFilter.NONE">
            <seealso cref="P:Emc.Documentum.FS.DataModel.Core.Profiles.ContentProfile.FormatFilter"/>
        </member>
        <member name="F:Emc.Documentum.FS.DataModel.Core.Profiles.FormatFilter.SPECIFIED">
            <seealso cref="P:Emc.Documentum.FS.DataModel.Core.Profiles.ContentProfile.FormatFilter"/>
        </member>
        <member name="F:Emc.Documentum.FS.DataModel.Core.Profiles.FormatFilter.ANY">
            <seealso cref="P:Emc.Documentum.FS.DataModel.Core.Profiles.ContentProfile.FormatFilter"/>
        </member>
        <member name="T:Emc.Documentum.FS.DataModel.Core.Profiles.LifecycleExecutionProfile">
            <summary>
            LifecycleExecutionProfile normally passed within OperationOptions, controls specific behaviors of the
            LifecycleService.executeOperation. <p/>
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Profiles.LifecycleExecutionProfile.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Profiles.LifecycleExecutionProfile.#ctor(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Property constructor
            </summary>
            <param name="testOnly">if true, the execute operation will not change the object state, but will only check the possibility of performing the operation. Not valid for DEMOTE operation.</param>
            <param name="bypassEntryCriteria">if true, the operation will bypass any entry criteria defined by a state and force promotion into that state. Has no effect on a DEMOTE operation.</param>
            <param name="resetToBase">if true, will cause a DEMOTE or RESUME operation to place the object into the base lifecycle state.</param>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Profiles.LifecycleExecutionProfile.Clone">
            <summary>
            Clones Profile
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Profiles.LifecycleExecutionProfile.TestOnly">
            <summary>
            The 'TestOnly' Boolean property. If it is true, the execute operation will not change the object state,
            but will only check the possibility of performing the operation. Not valid for DEMOTE operations.
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Profiles.LifecycleExecutionProfile.BypassEntryCriteria">
            <summary>
            The 'BypassEntryCriteria' boolean property. If this value is true, the operation will bypass any entry criteria
            defined on a state and force promotion into that state. Has no effect on a DEMOTE operation.
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Profiles.LifecycleExecutionProfile.ResetToBase">
            <summary>
            The 'ResetToBase' boolean property. If this value is true, a DEMOTE or RESUME operation will place in the object into the base lifecycle state.
            </summary>
        </member>
        <member name="T:Emc.Documentum.FS.DataModel.Core.Profiles.ListUpdateMethod">
            <summary>
            ListUpdateMethod class in 6.5 is used in <see cref="T:Emc.Documentum.FS.DataModel.Core.Profiles.VdmUpdateProfile">VdmUpdateProfile</see> to define the method of processing the virtual
            document children list in the VirtualDocumentService.
            </summary>
        </member>
        <member name="F:Emc.Documentum.FS.DataModel.Core.Profiles.ListUpdateMethod.REPLACE">
            <summary>
            The previous assigned list will be deleted and the new one will be placed as new.
            </summary>
        </member>
        <member name="F:Emc.Documentum.FS.DataModel.Core.Profiles.ListUpdateMethod.MERGE">
            <summary>
            A concatenation of the list will be performed. See methods docs for more details.
            </summary>
        </member>
        <member name="T:Emc.Documentum.FS.DataModel.Core.Profiles.MoveProfile">
            <summary>
            MoveProfile normally passed within OperationOptions, controls specific behaviors of the move operation. <p/>
            Has one internal property:<p/>
            IsNonCurrentObjectsAllowed - If true, allows move of non-CURRENT objects; otherwise
            ObjectService.move(ObjectIdentitySet, ObjectLocation, ObjectLocation, DataPackage, OperationOptions)
            throws an exception on attempt to copy non-CURRENT object. Default value is false.
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Profiles.MoveProfile.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Profiles.MoveProfile.Clone">
            <summary>
            Clones Profile
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Profiles.MoveProfile.IsNonCurrentObjectAllowed">
            <summary>
            IsNonCurrentObjectsAllowed - If true, allows move of non-CURRENT objects; otherwise
            ObjectService.move(ObjectIdentitySet, ObjectLocation, ObjectLocation, DataPackage, OperationOptions)
            throws an exception on attempt to copy non-CURRENT object. Default value is false.
            </summary>
        </member>
        <member name="T:Emc.Documentum.FS.DataModel.Core.Profiles.PageFilter">
            <summary>
            Page filter enum. Is used in conjunction with ContentProfile
            </summary>
            <seealso cref="T:Emc.Documentum.FS.DataModel.Core.Profiles.ContentProfile">ContentProfile</seealso>
        </member>
        <member name="F:Emc.Documentum.FS.DataModel.Core.Profiles.PageFilter.SPECIFIED">
            <seealso cref="P:Emc.Documentum.FS.DataModel.Core.Profiles.ContentProfile.PageModifier"/>
        </member>
        <member name="F:Emc.Documentum.FS.DataModel.Core.Profiles.PageFilter.ANY">
            <seealso cref="P:Emc.Documentum.FS.DataModel.Core.Profiles.ContentProfile.PageModifier"/>
        </member>
        <member name="T:Emc.Documentum.FS.DataModel.Core.Profiles.PageModifierFilter">
            <summary>
            Page modifier filter enum. Is used in conjunction with ContentProfile
            </summary>
            <seealso cref="T:Emc.Documentum.FS.DataModel.Core.Profiles.ContentProfile">ContentProfile</seealso>
        </member>
        <member name="F:Emc.Documentum.FS.DataModel.Core.Profiles.PageModifierFilter.SPECIFIED">
            <seealso cref="P:Emc.Documentum.FS.DataModel.Core.Profiles.ContentProfile.PageModifierFilter"/>
        </member>
        <member name="F:Emc.Documentum.FS.DataModel.Core.Profiles.PageModifierFilter.ANY">
            <seealso cref="P:Emc.Documentum.FS.DataModel.Core.Profiles.ContentProfile.PageModifierFilter"/>
        </member>
        <member name="T:Emc.Documentum.FS.DataModel.Core.Profiles.PermissionProfile">
            <summary>
            The PermissionProfile class enables the client to set filters that control the contents of the Permission lists in
            DataObject instances returned by services.<p/>
            
            By default, platform services return an empty Permission list: the client must explicitly request in a
            PermissionProfile that permissions be returned. The ContentProfile includes a single filter, PermissionTypeFilter,
            with a corresponding permissionType setting that is used or ignored depending on the PermissionTypeFilter value. The
            permissionType is specified with a Permission.PermissionType enum constant.
            </summary>
            <seealso cref="T:Emc.Documentum.FS.DataModel.Core.OperationOptions">OperationOptions</seealso>
            <seealso cref="P:Emc.Documentum.FS.DataModel.Core.Profiles.PermissionProfile.PermissionType">PermissionType</seealso>
            <seealso cref="P:Emc.Documentum.FS.DataModel.Core.Profiles.PermissionProfile.PermissionTypeFilter">PermissionTypeFilter</seealso>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Profiles.PermissionProfile.#ctor">
            <summary>
            Constructs a new PermissionProfile.
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Profiles.PermissionProfile.#ctor(Emc.Documentum.FS.DataModel.Core.Profiles.PermissionTypeFilter,Emc.Documentum.FS.DataModel.Core.PermissionType,System.Boolean)">
            <summary>
            Constructs a PermissionProfile object
            </summary>
            <param name="permissionTypeFilter">See <see cref="P:Emc.Documentum.FS.DataModel.Core.Profiles.PermissionProfile.PermissionTypeFilter"/></param>
            <param name="permissionType"></param>
            <param name="useCompoundPermissions">See <see cref="P:Emc.Documentum.FS.DataModel.Core.Profiles.PermissionProfile.PermissionType"/></param>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Profiles.PermissionProfile.Clone">
            <summary>
            Clones profile
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Profiles.PermissionProfile.PermissionTypeFilter">
            <summary>
            PermissionTypeFilter:<p/>
            It states:<para/>
            NONE - No permissions are included. All other filters are ignored.<para/>
            SPECIFIED - Only permission type specified in the PermissionType attribute is included.<para/>
            ANY - All permission types are included.
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Profiles.PermissionProfile.permissionTypeFilterSpecified">
            <exclude/>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Profiles.PermissionProfile.PermissionType">
            <summary>
            PermissionType:<p/>
            It states:<para/>
            BASIC - Basic permissions to be included.<para/>
            EXTENDED- Extended permissions to be included
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Profiles.PermissionProfile.permissionTypeSpecified">
            <exclude/>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Profiles.PermissionProfile.IsUseCompoundPermissions">
            <summary>
            This method controls dealing with compound permissions.  For example, all basic permissions for Documentum
            are compound.  If DELETE is specified, all other operations are automatically allowed.  This is great from
            permission management but is less useful when evaluating what can be done with a given object.
            If IsUseCompoundPermissions is set to false (default), service is expected to return a separate instance of Permission
            for every applicable permission.  If user is allowed to DELETE object, a list of all BASIC permissions will be
            returned: {BROWSE, READ, ..., DELETE}. If value is set to false, only DELETE permission entry will be returned.
            </summary>
        </member>
        <member name="T:Emc.Documentum.FS.DataModel.Core.Profiles.PermissionTypeFilter">
            <summary>
            PermissionTypeFilter enum specifies the permissions to be included.
            </summary>
            <seealso cref="T:Emc.Documentum.FS.DataModel.Core.Permission">Permission</seealso>
        </member>
        <member name="F:Emc.Documentum.FS.DataModel.Core.Profiles.PermissionTypeFilter.NONE">
            <summary>
            No permissions are included. All other filters are ignored.
            </summary>
        </member>
        <member name="F:Emc.Documentum.FS.DataModel.Core.Profiles.PermissionTypeFilter.SPECIFIED">
            <summary>
            Only permission type specified in the PermissionType attribute is included
            </summary>
        </member>
        <member name="F:Emc.Documentum.FS.DataModel.Core.Profiles.PermissionTypeFilter.ANY">
            <summary>
            All permission types are included
            </summary>
        </member>
        <member name="T:Emc.Documentum.FS.DataModel.Core.Profiles.PropertyFilterMode">
            <summary>
            PropertyFilterMode enum is used in PropertyProfile to specify the properties included in result DataObject.<p/>
            </summary>
            <seealso cref="T:Emc.Documentum.FS.DataModel.Core.Profiles.PropertyProfile">PropertyProfile</seealso>
        </member>
        <member name="F:Emc.Documentum.FS.DataModel.Core.Profiles.PropertyFilterMode.NONE">
            <summary>
            The object identity is returned only.  Property Set will be empty.
            </summary>
        </member>
        <member name="F:Emc.Documentum.FS.DataModel.Core.Profiles.PropertyFilterMode.IMPLIED">
            <summary>
            Default filter is applied.  In most cases, NONE would be used by default, but some operations may
            override only in the case if IMPLIED is selected.
            </summary>
        </member>
        <member name="F:Emc.Documentum.FS.DataModel.Core.Profiles.PropertyFilterMode.SPECIFIED_BY_INCLUDE">
            <summary>
            No properties are returned unless specified in the includeProperties
            </summary>
        </member>
        <member name="F:Emc.Documentum.FS.DataModel.Core.Profiles.PropertyFilterMode.SPECIFIED_BY_EXCLUDE">
            <summary>
             All properties are returned unless specified in the excludeProperties
            </summary>
        </member>
        <member name="F:Emc.Documentum.FS.DataModel.Core.Profiles.PropertyFilterMode.ALL_NON_SYSTEM">
            <summary>
            All non-system properties are returned
            </summary>
        </member>
        <member name="F:Emc.Documentum.FS.DataModel.Core.Profiles.PropertyFilterMode.ALL">
            <summary>
            All properties are returned
            </summary>
        </member>
        <member name="T:Emc.Documentum.FS.DataModel.Core.Profiles.PropertyProfile">
            <summary>
            A PropertyProfile defines property filters that limit the properties returned with an object by a service.<p/>
            This allows you to optimize the service by returning only those properties that your service consumer requires.
            PropertyProfile, like other profiles, normally is passed within OperationOptions. You specify how PropertyProfile
            filters returned properties by setting its FilterMode.
            </summary>
            <seealso cref="T:Emc.Documentum.FS.DataModel.Core.Profiles.PropertyFilterMode">PropertyFilterMode</seealso>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Profiles.PropertyProfile.#ctor">
            <summary>
            Constructs a new PropertyProfile.
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Profiles.PropertyProfile.#ctor(Emc.Documentum.FS.DataModel.Core.Profiles.PropertyFilterMode)">
            <summary>
            Constructs a new PropertyProfile.
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Profiles.PropertyProfile.Clone">
            <summary>
            Clones profile.
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Profiles.PropertyProfile.IncludeProperties">
            <summary>
            The properties to be included in returned result. No properties are returned on empty List.
            includeProperties is ignored if FilterMode is not set to SPECIFIED_BY_INCLUDE.
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Profiles.PropertyProfile.ExcludeProperties">
            <summary>
            The properties to be excluded from the  returned result. All properties are returned on empty List.
            excludeProperties is ignored if FilterMode is not set to SPECIFIED_BY_EXCLUDE.
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Profiles.PropertyProfile.FilterMode">
            <summary>
            FilterMode property
            </summary>
            <seealso cref="T:Emc.Documentum.FS.DataModel.Core.Profiles.PropertyFilterMode">PropertyFilterMode</seealso>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Profiles.PropertyProfile.filterModeSpecified">
            <exclude/>
        </member>
        <member name="T:Emc.Documentum.FS.DataModel.Core.Profiles.RelationshipNameFilter">
            <summary>
            RelationshipNameFilter enum specifies the Relationships to be included.
            </summary>
            <seealso cref="T:Emc.Documentum.FS.DataModel.Core.Profiles.RelationshipProfile">RelationshipProfile</seealso>
        </member>
        <member name="F:Emc.Documentum.FS.DataModel.Core.Profiles.RelationshipNameFilter.NONE">
            <summary>
            No relations will be included.
            </summary>
        </member>
        <member name="F:Emc.Documentum.FS.DataModel.Core.Profiles.RelationshipNameFilter.SPECIFIED">
            <summary>
            Only relations with the name specified in the RelationName attribute will be included.
            </summary>
        </member>
        <member name="F:Emc.Documentum.FS.DataModel.Core.Profiles.RelationshipNameFilter.ANY">
            <summary>
            Relations included regardless of this filter.
            </summary>
        </member>
        <member name="T:Emc.Documentum.FS.DataModel.Core.Profiles.RelationshipProfile">
            <summary>
            A RelationshipProfile is a client optimization mechanism that provides fine control over the size and complexity of
            DataObject instances returned by services.<p/>
            
            By default, the object service get operation returns DataObject containing no Relationship instances. To alter this
            behavior, you must provide a RelationshipProfile that explicit sets the types of Relationship instances to return.
            </summary>
            <seealso cref="T:Emc.Documentum.FS.DataModel.Core.Profiles.RelationshipNameFilter">RelationshipNameFilter</seealso>
            <seealso cref="P:Emc.Documentum.FS.DataModel.Core.Profiles.RelationshipProfile.TargetRoleFilter">TargetRoleFilter</seealso>
            <seealso cref="P:Emc.Documentum.FS.DataModel.Core.Profiles.RelationshipProfile.ResultDataMode">ResultDataMode</seealso>
            <seealso cref="P:Emc.Documentum.FS.DataModel.Core.Profiles.RelationshipProfile.PropertyProfile">PropertyProfile</seealso>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Profiles.RelationshipProfile.#ctor">
            <summary>
            Constructs a new RelationshipProfile.
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Profiles.RelationshipProfile.#ctor(Emc.Documentum.FS.DataModel.Core.Profiles.ResultDataMode,Emc.Documentum.FS.DataModel.Core.Profiles.RelationshipNameFilter,System.String,Emc.Documentum.FS.DataModel.Core.Profiles.TargetRoleFilter,System.String,Emc.Documentum.FS.DataModel.Core.Profiles.DepthFilter,System.Int32,Emc.Documentum.FS.DataModel.Core.Profiles.PropertyProfile)">
            <summary>
            Constructs a new RelationshipProfile.
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Profiles.RelationshipProfile.#ctor(Emc.Documentum.FS.DataModel.Core.Profiles.ResultDataMode,Emc.Documentum.FS.DataModel.Core.Profiles.RelationshipNameFilter,System.String,Emc.Documentum.FS.DataModel.Core.Profiles.TargetRoleFilter,System.String,Emc.Documentum.FS.DataModel.Core.Profiles.DepthFilter,System.Int32)">
            <summary>
            Constructs a new RelationshipProfile.
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Profiles.RelationshipProfile.Clone">
            <summary>
            Clones profile.
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Profiles.RelationshipProfile.ResultDataMode">
            <summary>
            Determine whether the Relationship instances contained in a DataObject returned by an
            object service get operation are of type ObjectRelationship or ReferenceRelationship. If they are of type
            ObjectRelationship they will contain actual DataObject instances; if they are of type ReferenceRelationship, they
            will contain only an ObjectIdentity.
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Profiles.RelationshipProfile.resultDataModeSpecified">
            <exclude/>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Profiles.RelationshipProfile.NameFilter">
            <summary>
            SPECIFIED - Relationship instances with the name specified in the relationName field will be included.<para/>
            ANY - relationName field is ignored, and Relationship instances are not filtered by name.
            </summary>
            <seealso cref="T:Emc.Documentum.FS.DataModel.Core.Profiles.RelationshipNameFilter">RelationshipNameFilter</seealso>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Profiles.RelationshipProfile.nameFilterSpecified">
            <exclude/>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Profiles.RelationshipProfile.RelationName">
            <summary>
            Relation name by which the relations will be filtered.
            </summary>
            <seealso cref="P:Emc.Documentum.FS.DataModel.Core.Profiles.RelationshipProfile.NameFilter">RelationshipProfile.NameFilter</seealso>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Profiles.RelationshipProfile.TargetRoleFilter">
            <summary>
            TargetRoleFilter.<p/>
            SPECIFIED - Only relations with the target role specified in the TargetRole attribute will be included.<para/>
            ANY - All relations will be included regardless of the TargetRole attribute.
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Profiles.RelationshipProfile.targetRoleFilterSpecified">
            <exclude/>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Profiles.RelationshipProfile.TargetRole">
            <summary>
            Relation's target role by which the relations will be filtered.
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Profiles.RelationshipProfile.DepthFilter">
            <summary>
            DepthFilter<p/>
            SINGLE - Only immediately related objects are included (no "descend/ascend").<para/>
            SPECIFIED - Descend/ascend specified number of levels (1-N).
            UNLIMITED - Descend/ascend unlimited number of levels.
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Profiles.RelationshipProfile.depthFilterSpecified">
            <remarks/>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Profiles.RelationshipProfile.Depth">
            <summary>
            Depth of the relation retrieval.
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Profiles.RelationshipProfile.propertyProfileSpecified">
            <remarks/>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Profiles.RelationshipProfile.PropertyProfile">
            <summary>
            PropertyProfile is used to filter relationship properties.
            </summary>
        </member>
        <member name="T:Emc.Documentum.FS.DataModel.Core.Profiles.RenditionOption">
            <summary>
            The RenditionOption shows if the content is a primary content or a rendition.
            </summary>
            <seealso cref="N:Emc.Documentum.FS.DataModel.Core.Content">Content</seealso>
            <seealso cref="T:Emc.Documentum.FS.DataModel.Core.Content.RenditionType">RenditionType</seealso>
        </member>
        <member name="F:Emc.Documentum.FS.DataModel.Core.Profiles.RenditionOption.CLIENT">
            <summary>
            That means that is a rendition was created by an user.
            </summary>
        </member>
        <member name="F:Emc.Documentum.FS.DataModel.Core.Profiles.RenditionOption.SERVER">
            <summary>
            That means that a rendition was generated by the content server.
            </summary>
        </member>
        <member name="F:Emc.Documentum.FS.DataModel.Core.Profiles.RenditionOption.PRIMARY">
            <summary>
            That means that rendition is a primary content.
            </summary>
        </member>
        <member name="F:Emc.Documentum.FS.DataModel.Core.Profiles.RenditionOption.CLIENT_AND_SERVER">
            <summary>
            That means that renditions are all non-primary content.
            </summary>
        </member>
        <member name="F:Emc.Documentum.FS.DataModel.Core.Profiles.RenditionOption.PRIMARY_AND_CLIENT">
            <summary>
            That means that  renditions are  primary and client .
            </summary>
        </member>
        <member name="F:Emc.Documentum.FS.DataModel.Core.Profiles.RenditionOption.PRIMARY_AND_SERVER">
            <summary>
            That means that  renditions are  primary and server .
            </summary>
        </member>
        <member name="T:Emc.Documentum.FS.DataModel.Core.Profiles.RenditionTypeFilter">
            <summary>
            Rendition type filter enum. Is used in conjunction with ContentProfile.
            </summary>
            <seealso cref="N:Emc.Documentum.FS.DataModel.Core.Content">Content</seealso>
            <seealso cref="T:Emc.Documentum.FS.DataModel.Core.Content.RenditionType">RenditionType</seealso>
        </member>
        <member name="F:Emc.Documentum.FS.DataModel.Core.Profiles.RenditionTypeFilter.SPECIFIED">
            <summary>
            The specified filter is applied.
            </summary>
        </member>
        <member name="F:Emc.Documentum.FS.DataModel.Core.Profiles.RenditionTypeFilter.ANY">
            <summary>
            No filter is applied and all contents are returned.
            </summary>
        </member>
        <member name="T:Emc.Documentum.FS.DataModel.Core.Profiles.ResultDataMode">
            <summary>
            ResultDataMode enum specifies the result type of the returned relationships.<p/>
            </summary>
        </member>
        <member name="F:Emc.Documentum.FS.DataModel.Core.Profiles.ResultDataMode.REFERENCE">
            <summary>
            All relations are returned by reference
            </summary>
        </member>
        <member name="F:Emc.Documentum.FS.DataModel.Core.Profiles.ResultDataMode.OBJECT">
            <summary>
            All relations are returned via. DataObject
            </summary>
        </member>
        <member name="T:Emc.Documentum.FS.DataModel.Core.Profiles.RichTextProfile">
            <summary>
            The RichTextProfile controls the return image and anchor URLs. It also controls whether to transfer content
            (eg. images) with the richtext object.
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Profiles.RichTextProfile.#ctor">
            <summary>
            Constructs a new RichTextProfile with no anchorUrlTemplate and no imageUrlTemplate
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Profiles.RichTextProfile.#ctor(System.String,System.String)">
            <summary>
            Constructs a new RichTextProfile with anchorUrlTemplate and imageUrlTemplate
            </summary>
            <param name="anchorUrlTemplate">string representing the template of URL for anchors</param>
            <param name="imageUrlTemplate">string representing the template of URL for images</param>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Profiles.RichTextProfile.Clone">
            <summary>
            Clones profile
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Profiles.RichTextProfile.ImageUrlTemplate">
            <summary>
            The anchorUrlTemplate to be used for returning image urls as a part of RichText body
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Profiles.RichTextProfile.AnchorUrlTemplate">
            <summary>
            The anchorUrlTemplate to be used for returning image urls as a part of RichText body
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Profiles.RichTextProfile.IsTransferContent">
            <summary>
            Returns/Sets if the Content (images) list will be transfered as a part of RichText object
            </summary>
        </member>
        <member name="T:Emc.Documentum.FS.DataModel.Core.Profiles.SchemaProfile">
            <summary>
            The SchemaProfile controls the returned data in the SchemaService.
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Profiles.SchemaProfile.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Profiles.SchemaProfile.#ctor(System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="scope">display scope</param>
            <param name="includeTypes">return data about types</param>
            <param name="includeProperties">return data about properties</param>
            <param name="includeValues">return data about values</param>
            <seealso cref="P:Emc.Documentum.FS.DataModel.Core.Profiles.SchemaProfile.IncludeTypes">IncludeTypes</seealso>
            <seealso cref="P:Emc.Documentum.FS.DataModel.Core.Profiles.SchemaProfile.IncludeProperties">IncludeProperties</seealso>
            <seealso cref="P:Emc.Documentum.FS.DataModel.Core.Profiles.SchemaProfile.IncludeValues">IncludeValues</seealso>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Profiles.SchemaProfile.#ctor(System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="scope">display scope</param>
            <param name="includeTypes">return data about types</param>
            <param name="includeProperties">return data about properties</param>
            <param name="includeValues">return data about values</param>
            <param name="includeRelationships">return data about relationships</param>
            <seealso cref="P:Emc.Documentum.FS.DataModel.Core.Profiles.SchemaProfile.IncludeTypes">IncludeTypes</seealso>
            <seealso cref="P:Emc.Documentum.FS.DataModel.Core.Profiles.SchemaProfile.IncludeProperties">IncludeProperties</seealso>
            <seealso cref="P:Emc.Documentum.FS.DataModel.Core.Profiles.SchemaProfile.IncludeValues">IncludeValues</seealso>
            <seealso cref="P:Emc.Documentum.FS.DataModel.Core.Profiles.SchemaProfile.IncludeRelationships">IncludeRelationships</seealso>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Profiles.SchemaProfile.#ctor(System.String,System.Boolean,Emc.Documentum.FS.DataModel.Core.Schema.PropertyInfoFilter,System.Boolean,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="scope">display scope</param>
            <param name="includeTypes">return data about types</param>
            <param name="propertyInfoFilter">return property info filter</param>
            <param name="includeValues">return data about values</param>
            <param name="includeRelationships">return data about relationships</param>
            <seealso cref="P:Emc.Documentum.FS.DataModel.Core.Profiles.SchemaProfile.IncludeTypes">IncludeTypes</seealso>
            <seealso cref="T:Emc.Documentum.FS.DataModel.Core.Schema.PropertyInfoFilter">PropertyInfoFilter</seealso>
            <seealso cref="P:Emc.Documentum.FS.DataModel.Core.Profiles.SchemaProfile.IncludeValues">IncludeValues</seealso>
            <seealso cref="P:Emc.Documentum.FS.DataModel.Core.Profiles.SchemaProfile.IncludeRelationships">IncludeRelationships</seealso>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Profiles.SchemaProfile.Clone">
            <summary>
            Clones profile
            </summary>
        </member>
        <member name="F:Emc.Documentum.FS.DataModel.Core.Profiles.SchemaProfile.DEFAULT_SCOPE">
            <summary>
            Default Scope
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Profiles.SchemaProfile.IncludeTypes">
            <summary>
            If true the data about types will be loaded and returned.
            (If it supports this)
            </summary>
            <seealso cref="P:Emc.Documentum.FS.DataModel.Core.Schema.SchemaInfo.TypeInfos">SchemaInfo.TypeInfos</seealso>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Profiles.SchemaProfile.IncludeProperties">
            <summary>
            If true the data about type`s attributes will be loaded and returned by the SchemaService.
            (If it supports this)
            This parameter is obsolete, please use PropertyInfoFilter instead.
            </summary>
            <seealso cref="P:Emc.Documentum.FS.DataModel.Core.Schema.TypeInfo.PropertyInfos">TypeInfo.PropertyInfos</seealso>
            <seealso cref="T:Emc.Documentum.FS.DataModel.Core.Schema.PropertyInfoFilter">PropertyInfoFilter</seealso>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Profiles.SchemaProfile.ObsoleteIncludeProperties">
            <summary>
            Preserved for internal use. Please use PropertyInfoFilter instead.
            </summary>
            <seealso cref="P:Emc.Documentum.FS.DataModel.Core.Schema.TypeInfo.PropertyInfos">TypeInfo.PropertyInfos</seealso>
            <seealso cref="T:Emc.Documentum.FS.DataModel.Core.Schema.PropertyInfoFilter">PropertyInfoFilter</seealso>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Profiles.SchemaProfile.PropertyFilter">
            <summary>
            Sets propertyInfoFilter to be used when types are retrieved.
            Default value 'null', while isIncludeProperties exists the filtering will be passed to isIncludeProperties, i. e.
            if isIncludeProperties == true all properties will be returned, if any value is set to PropertyFilter the
            isIncludeProperties will be ignored.
            </summary>
            <seealso cref="P:Emc.Documentum.FS.DataModel.Core.Schema.TypeInfo.PropertyInfos">TypeInfo.PropertyInfos</seealso>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Profiles.SchemaProfile.IncludeValues">
            <summary>
            If true the data about attribute`s values will be loaded and returned by the SchemaService.
            (If it supports this)
            </summary>
            <seealso cref="P:Emc.Documentum.FS.DataModel.Core.Schema.PropertyInfo.ValueAssist">PropertyInfo.ValueAssist</seealso>
            <seealso cref="P:Emc.Documentum.FS.DataModel.Core.Schema.PropertyInfo.ValueMap">PropertyInfo.ValueMap</seealso>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Profiles.SchemaProfile.IncludeRelationships">
            <summary>
            If true the data about relationships will be loaded and returned by the SchemaService.
            (If it supports this)
            </summary>
            <seealso cref="P:Emc.Documentum.FS.DataModel.Core.Schema.TypeInfo.RelationshipInfos">TypeInfo.RelationshipInfos</seealso>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Profiles.SchemaProfile.Scope">
            <summary>
            Display scope. The data about display configs in this scope will be loaded and returned by the SchemaService.
            (If it supports this)
            </summary>
            <seealso cref="P:Emc.Documentum.FS.DataModel.Core.Schema.TypeInfo.PropertyDisplaySections">TypeInfo.PropertyDisplaySections</seealso>
        </member>
        <member name="T:Emc.Documentum.FS.DataModel.Core.Profiles.SearchProfile">
            <summary>
            SearchProfile, which is normally passed within <code>OperationOptions</code>, is used to set
            parameters for search execution. <p/>
            </summary>
            <seealso cref="T:Emc.Documentum.FS.DataModel.Core.Profiles.Profile">Profile</seealso>
            <seealso cref="T:Emc.Documentum.FS.DataModel.Core.OperationOptions">OperationOptions</seealso>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Profiles.SearchProfile.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Profiles.SearchProfile.Clone">
            <summary>
            Clones profile
            </summary>
            <returns>Cloned profile.</returns>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Profiles.SearchProfile.IsAsyncCall">
            <summary>
            Indicated if it is async call.
            </summary>
        </member>
        <member name="T:Emc.Documentum.FS.DataModel.Core.Profiles.TargetRoleFilter">
            <summary>
            TargetRoleFilter enum specifies if the TargetRole attribute will be ignored or not.<p/>
            </summary>
            <seealso cref="T:Emc.Documentum.FS.DataModel.Core.Profiles.RelationshipProfile">RelationshipProfile</seealso>
        </member>
        <member name="F:Emc.Documentum.FS.DataModel.Core.Profiles.TargetRoleFilter.SPECIFIED">
            <summary>
            Only relations with the target role specified in the TargetRole attribute will be included.
            </summary>
        </member>
        <member name="F:Emc.Documentum.FS.DataModel.Core.Profiles.TargetRoleFilter.ANY">
            <summary>
            All relations will be included regardless of the TargetRole attribute.
            </summary>
        </member>
        <member name="T:Emc.Documentum.FS.DataModel.Core.Profiles.UrlReturnPolicy">
            <summary>
            UrlReturnPolicy enum provides control over when URLs are returned. <see cref="T:Emc.Documentum.FS.DataModel.Core.Profiles.ContentProfile">ContentProfile</see> 
            </summary>
        </member>
        <member name="F:Emc.Documentum.FS.DataModel.Core.Profiles.UrlReturnPolicy.ALWAYS">
            <summary>
            Return UrlContent where URL content is available; fail with exception where URL content is not available.
            </summary>
        </member>
        <member name="F:Emc.Documentum.FS.DataModel.Core.Profiles.UrlReturnPolicy.ONLY">
            <summary>
            Return UrlContent where URL content is available; no Content in DataObject where URL content is not available.
            </summary>
        </member>
        <member name="F:Emc.Documentum.FS.DataModel.Core.Profiles.UrlReturnPolicy.PREFER">
            <summary>
            Return UrlContent where URL content is available; return actual content where URL content is not available.
            This is a default setting if UrlReturnPolicy is not specified.
            </summary>
        </member>
        <member name="F:Emc.Documentum.FS.DataModel.Core.Profiles.UrlReturnPolicy.NEVER">
            <summary>
            Return actual content, never return URL content.
            </summary>
        </member>
        <member name="T:Emc.Documentum.FS.DataModel.Core.Profiles.VdmRetrieveProfile">
            <summary>
            VdmRetrieveProfile class is used to set operation behaviors that affect retrieval of virtual documents. It is used in the
            ObjectService, VersionControlService and VirtualDocumentService.  In the VirtualDocumentService it is used by the retrieve operation,
            and also in the createSnapshot operation, where it governs how the snapshot is assembled and the value returned by the operation.
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Profiles.VdmRetrieveProfile.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Profiles.VdmRetrieveProfile.#ctor(System.Boolean,System.String)">
            <summary>
            Property constructor
            </summary>
            <param name="shouldFollowAssembly">Sets operation behavior for retrieving nodes with associated assemblies
            (snapshots and inline snapshots). Set this to true when retrieving a snapshot of a virtual document.
            </param>
            <param name="binding">version label to use for late binding of virtual document nodes.
            Does not apply if ShouldFollowAssembly is set to "true" or the object being processed is a non-inline snapshot.</param>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Profiles.VdmRetrieveProfile.Clone">
            <summary>
            Clones profile.
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Profiles.VdmRetrieveProfile.IsShouldFollowAssembly">
            <summary>
            Operation behavior for retrieving nodes with associated assemblies (that is, snapshots).
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Profiles.VdmRetrieveProfile.Binding">
            <summary>
            The version label to use for late binding of virtual document nodes.
            </summary>
        </member>
        <member name="T:Emc.Documentum.FS.DataModel.Core.Profiles.VdmUpdateProfile">
            <summary>
            The VdmUpdateProfile class provides settings that govern the behavior of the update method.
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Profiles.VdmUpdateProfile.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Profiles.VdmUpdateProfile.#ctor(Emc.Documentum.FS.DataModel.Core.VersionStrategy,System.Boolean,System.Collections.Generic.List{System.String})">
            <summary>
            Property constructor
            </summary>
            <param name="versionStrategy">specifies an option for incrementing the version number of the virtual document root when it is checked in after the update.</param>
            <param name="retainLock">a flag specifying whether the virtual document root will remain checked out after update.</param>
            <param name="labels">a list of symbolic labels to apply to the virtual document root. If you provide this label and want the version
            to remain the CURRENT version, you must specifically add "CURRENT" to the label list.</param>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Profiles.VdmUpdateProfile.#ctor(Emc.Documentum.FS.DataModel.Core.VersionStrategy,System.Boolean,System.Collections.Generic.List{System.String},Emc.Documentum.FS.DataModel.Core.Profiles.ListUpdateMethod,System.Boolean)">
            <summary>
            Property constructor
            </summary>
            <param name="versionStrategy">specifies an option for incrementing the version number of the virtual document root when it is checked in after the update.</param>
            <param name="retainLock">a flag specifying whether the virtual document root will remain checked out after update.</param>
            <param name="labels">a list of symbolic labels to apply to the virtual document root. If you provide this label and want the version
            to remain the CURRENT version, you must specifically add "CURRENT" to the label list.</param>
            <param name="updateMethod">a value specifying whether the child list will be replaced or supplemented by the list provided in the update operation.</param>
            <param name="convertToSimple">a flag determining whether the virtual document will be converted to a simple document if after the update it contains no children.</param>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Profiles.VdmUpdateProfile.Clone">
            <summary>
            Clones profile.
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Profiles.VdmUpdateProfile.Labels">
            <summary>
            A list of symbolic labels to apply to the virtual document root. <p/>
            If you provide this label and want the version to remain the CURRENT version, you must specifically add "CURRENT" to the label list.
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Profiles.VdmUpdateProfile.VersionStrategy">
            <summary>
            Option for incrementing the version number of the virtual document root when it is checked in after the update.
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Profiles.VdmUpdateProfile.versionStrategySpecified">
            <summary>
            DFS internal property.
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Profiles.VdmUpdateProfile.RetainLock">
            <summary>
            A flag specifying whether the virtual document root will remain checked out after update.
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Profiles.VdmUpdateProfile.UpdateMethod">
            <summary>
            A value specifying whether the child list will be replaced or supplemented by the list provided in the update operation.
            Possible values are ListUpdateMethod.MERGE and ListUpdateMethod.REPLACE.
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Profiles.VdmUpdateProfile.updateMethodSpecified">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Profiles.VdmUpdateProfile.ConvertToSimple">
            <summary>
            A flag determining whether the virtual document will be converted to a simple document if after the update it contains no children.
            </summary>
        </member>
        <member name="T:Emc.Documentum.FS.DataModel.Core.Properties.ArrayProperty`1">
            <summary>
            ArrayProperty abstract class is the base class of all array properties.
            </summary>
            <seealso cref="T:Emc.Documentum.FS.DataModel.Core.Properties.Property">Property</seealso>
            <seealso cref="T:Emc.Documentum.FS.DataModel.Core.Properties.BooleanArrayProperty">BooleanArrayProperty</seealso>
            <seealso cref="T:Emc.Documentum.FS.DataModel.Core.Properties.DateArrayProperty">DateArrayProperty</seealso>
            <seealso cref="T:Emc.Documentum.FS.DataModel.Core.Properties.NumberArrayProperty">NumberArrayProperty</seealso>
            <seealso cref="T:Emc.Documentum.FS.DataModel.Core.Properties.ObjectIdArrayProperty">ObjectIdArrayProperty</seealso>
            <seealso cref="T:Emc.Documentum.FS.DataModel.Core.Properties.StringArrayProperty">StringArrayProperty</seealso>
            <seealso cref="T:Emc.Documentum.FS.DataModel.Core.Properties.ValueAction">ValueAction</seealso>
        </member>
        <member name="T:Emc.Documentum.FS.DataModel.Core.Properties.Property">
            <summary>
            Property abstract class is the base class of all DFS properties.
            </summary>
            <seealso cref="T:Emc.Documentum.FS.DataModel.Core.Properties.BooleanProperty">BooleanProperty</seealso>
            <seealso cref="T:Emc.Documentum.FS.DataModel.Core.Properties.DateProperty">DateProperty</seealso>
            <seealso cref="T:Emc.Documentum.FS.DataModel.Core.Properties.NumberProperty">NumberProperty</seealso>
            <seealso cref="T:Emc.Documentum.FS.DataModel.Core.Properties.ObjectIdProperty">ObjectIdProperty</seealso>
            <seealso cref="T:Emc.Documentum.FS.DataModel.Core.Properties.StringProperty">StringProperty</seealso>
            <seealso cref="T:Emc.Documentum.FS.DataModel.Core.Properties.ArrayProperty`1">ArrayProperty</seealso>
            <seealso cref="T:Emc.Documentum.FS.DataModel.Core.Properties.BooleanArrayProperty">BooleanArrayProperty</seealso>
            <seealso cref="T:Emc.Documentum.FS.DataModel.Core.Properties.DateArrayProperty">DateArrayProperty</seealso>
            <seealso cref="T:Emc.Documentum.FS.DataModel.Core.Properties.NumberArrayProperty">NumberArrayProperty</seealso>
            <seealso cref="T:Emc.Documentum.FS.DataModel.Core.Properties.ObjectIdArrayProperty">ObjectIdArrayProperty</seealso>
            <seealso cref="T:Emc.Documentum.FS.DataModel.Core.Properties.StringArrayProperty">StringArrayProperty</seealso>
        </member>
        <member name="F:Emc.Documentum.FS.DataModel.Core.Properties.Property.NAME_SEPARATOR">
            <summary>
            Name separator
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Properties.Property.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Properties.Property.#ctor(System.String)">
            <summary>
            Constructs a new Property and sets the name of the property.
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Properties.Property.GetValueAsString">
            <summary>
            Returns the value of the properties as String.
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Properties.Property.GetValueAsObject">
            <summary>
            Returns the values of the property.
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Properties.Property.accept(Emc.Documentum.FS.DataModel.Core.Properties.IPropertyVisitor)">
            <summary>
            See Visitor pattern Accept method
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Properties.Property.GetQueryFormattedProperty">
            <summary>
            Returns query formatted string as follows propertyName='value'.
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Properties.Property.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Properties.Property.Clone">
            <summary>
            Clones property
            </summary>
        </member>
        <member name="F:Emc.Documentum.FS.DataModel.Core.Properties.Property.NULL_STRING">
            <summary>
            Null string value
            </summary>
        </member>
        <member name="F:Emc.Documentum.FS.DataModel.Core.Properties.Property.VALUE_SEPARATOR">
            <summary>
            Value separator
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Properties.Property.Name">
            <summary>
            Fully qualified name.
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Properties.Property.IsTransient">
            <summary>
            Internal use only. Transient properties are not processed.
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Properties.ArrayProperty`1.#ctor">
            <summary>
            Constructs a new ArrayProperty.
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Properties.ArrayProperty`1.#ctor(System.String)">
            <summary>
            Constructs a new ArrayProperty and sets the property name.
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Properties.ArrayProperty`1.GetValueAsString">
            <summary>
            Returns the value of the properties as String.
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Properties.ArrayProperty`1.IterateValuesAsObjects">
            <summary>
            Returns an IEnumerator on Values of the ArrayProperty extending classes.
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Properties.ArrayProperty`1.IterateValuesAsStrings">
            <summary>
            Returns an IEnumerator on string representation of the Values of the ArrayProperty extending classes.
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Properties.ArrayProperty`1.GetValuesAsList">
            <summary>
            Returns all values as a List.
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Properties.ArrayProperty`1.AddDeletePropertySequence(System.Int32)">
            <summary>
            Adds to actions list a new ValueAction with ValueActionType.DELETE. <p/>
            This method needs the index of the value in Object's property list. Each time a sequence is processed the Object's
            property list is reindexed.<p/>
            For example. An object has a repeating string property "animals" = {lion, tiger, panther} we want on update to
            remove "lion" and "panther" values from the object. We should provide two delete sequences with indexes {0,1}
            First delete sequence will delete "lion" then the list is reindexed and we have a new list {tiger, panther} and
            the second delete sequence have to be with index 1.
            </summary>
            <param name="index">index of the value in Object's property list.</param>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Properties.ArrayProperty`1.AddInsertPropertySequence(`0,System.Int32)">
            <summary>
            Adds to actions list a new ValueAction with ValueActionType.INSERT. <p/>
            This method needs the index of the value in Object's property list. Each time a sequence is processed the Object's
            property list is reindexed.<p/>
            
            
            </summary>
            <seealso cref="M:Emc.Documentum.FS.DataModel.Core.Properties.ArrayProperty`1.AddDeletePropertySequence(System.Int32)">AddDeletePropertySequence</seealso>
            <seealso cref="T:Emc.Documentum.FS.DataModel.Core.Properties.ValueAction">ValueAction</seealso>
            <seealso cref="T:Emc.Documentum.FS.DataModel.Core.Properties.ValueActionType">ValueActionType</seealso>
            <param name="value">value to be inserted.</param>
            <param name="index">index in object's property list.</param>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Properties.ArrayProperty`1.AddSetPropertySequence(`0,System.Int32)">
            <summary>
            Adds to actions list a new ValueAction with ValueActionType.SET. <p/>
            This method needs the index of the value in Object's property list. Each time a sequence is processed the Object's
            property list is reindexed.<p/>
            
            </summary>
            <seealso cref="M:Emc.Documentum.FS.DataModel.Core.Properties.ArrayProperty`1.AddDeletePropertySequence(System.Int32)">AddDeletePropertySequence</seealso>
            <seealso cref="T:Emc.Documentum.FS.DataModel.Core.Properties.ValueAction">ValueAction</seealso>
            <seealso cref="T:Emc.Documentum.FS.DataModel.Core.Properties.ValueActionType">ValueActionType</seealso>
            <param name="value">value to be replaced.</param>
            <param name="index">index in object's property list.</param>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Properties.ArrayProperty`1.AddAppendPropertySequence(`0)">
            <summary>
            Adds to actions list a new ValueAction with ValueActionType.APPEND.
            </summary>
            <seealso cref="M:Emc.Documentum.FS.DataModel.Core.Properties.ArrayProperty`1.AddDeletePropertySequence(System.Int32)">AddDeletePropertySequence</seealso>
            <seealso cref="T:Emc.Documentum.FS.DataModel.Core.Properties.ValueAction">ValueAction</seealso>
            <seealso cref="T:Emc.Documentum.FS.DataModel.Core.Properties.ValueActionType">ValueActionType</seealso>
            <param name="value">value to be appended.</param>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Properties.ArrayProperty`1.GetValueActions">
            <summary>
            Returns the array of the ValueActions.
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Properties.ArrayProperty`1.SetValueActions(Emc.Documentum.FS.DataModel.Core.Properties.ValueAction[])">
            <summary>
            Convenience method. Sets the array of the ValueActions. It is advised to use one of the next methods
            <see cref="M:Emc.Documentum.FS.DataModel.Core.Properties.ArrayProperty`1.AddAppendPropertySequence(`0)"/>, <see cref="M:Emc.Documentum.FS.DataModel.Core.Properties.ArrayProperty`1.AddSetPropertySequence(`0,System.Int32)"/>,
            <see cref="M:Emc.Documentum.FS.DataModel.Core.Properties.ArrayProperty`1.AddInsertPropertySequence(`0,System.Int32)"/>, <see cref="M:Emc.Documentum.FS.DataModel.Core.Properties.ArrayProperty`1.AddDeletePropertySequence(System.Int32)"/>
            </summary>
            <param name="valueActions">the array of the ValueActions.</param>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Properties.ArrayProperty`1.ValueActions">
            <summary>
            Convenience method. Sets the array of the ValueActions. It is advised to use one of the next methods
            <see cref="M:Emc.Documentum.FS.DataModel.Core.Properties.ArrayProperty`1.AddAppendPropertySequence(`0)"/>, <see cref="M:Emc.Documentum.FS.DataModel.Core.Properties.ArrayProperty`1.AddSetPropertySequence(`0,System.Int32)"/>,
            <see cref="M:Emc.Documentum.FS.DataModel.Core.Properties.ArrayProperty`1.AddInsertPropertySequence(`0,System.Int32)"/>, <see cref="M:Emc.Documentum.FS.DataModel.Core.Properties.ArrayProperty`1.AddDeletePropertySequence(System.Int32)"/>
            </summary>
        </member>
        <member name="T:Emc.Documentum.FS.DataModel.Core.Properties.BooleanArrayProperty">
            <summary>
            BooleanArrayProperty class is the bridge to bool repeating attribute in DFC.
            </summary>
            <seealso cref="T:Emc.Documentum.FS.DataModel.Core.Properties.ArrayProperty`1">ArrayProperty{T}</seealso>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Properties.BooleanArrayProperty.#ctor">
            <summary>
            Constructs a new BooleanArrayProperty.
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Properties.BooleanArrayProperty.#ctor(System.String,System.Nullable{System.Boolean}[])">
            <summary>
            Constructs a new BooleanArrayProperty and sets the name and the values.
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Properties.BooleanArrayProperty.GetValues">
            <summary>
            Returns the values as an Array.
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Properties.BooleanArrayProperty.GetValuesAsList">
            <summary>
            Returns all values as a List.
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Properties.BooleanArrayProperty.SetValues(System.Nullable{System.Boolean}[])">
            <summary>
            Setter for property 'values'.
            </summary>
            <param name="values">Array of bool</param>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Properties.BooleanArrayProperty.MakeProperty(System.String,System.Nullable{System.Boolean}[])">
            <summary>
            Converts the bools to an BooleanArrayProperty
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Properties.BooleanArrayProperty.IterateValuesAsObjects">
            <summary>
            Returns an IEnumerator on Values of the ArrayProperty extending classes.
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Properties.BooleanArrayProperty.IterateValuesAsStrings">
            <summary>
            Returns an IEnumerator on string representation of the Values of the ArrayProperty extending classes.
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Properties.BooleanArrayProperty.GetValueAsObject">
            <summary>
            Returns the values of the property.
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Properties.BooleanArrayProperty.accept(Emc.Documentum.FS.DataModel.Core.Properties.IPropertyVisitor)">
            <summary>
            See Visitor pattern Accept method
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Properties.BooleanArrayProperty.Clone">
            <summary>
            Clones property
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Properties.BooleanArrayProperty.Values">
            <summary>
            Values of BooleanArrayProperty
            </summary>
        </member>
        <member name="T:Emc.Documentum.FS.DataModel.Core.Properties.BooleanProperty">
            <summary>
            BooleanProperty base class to handle boolean properties.
            </summary>
            <seealso cref="T:Emc.Documentum.FS.DataModel.Core.Properties.Property">Property</seealso>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Properties.BooleanProperty.#ctor">
            <summary>
            Constructs a new BooleanProperty.
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Properties.BooleanProperty.#ctor(System.String,System.Boolean)">
            <summary>
            Constructs a new BooleanProperty and sets the name and the value.
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Properties.BooleanProperty.GetValueAsString">
            <summary>
            Returns the value of the properties as String.
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Properties.BooleanProperty.GetValueAsObject">
            <summary>
            Returns the values of the property.
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Properties.BooleanProperty.accept(Emc.Documentum.FS.DataModel.Core.Properties.IPropertyVisitor)">
            <summary>
            See Visitor pattern Accept method
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Properties.BooleanProperty.Clone">
            <summary>
            Clones property
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Properties.BooleanProperty.Value">
            <summary>
            Property value
            </summary>
        </member>
        <member name="T:Emc.Documentum.FS.DataModel.Core.Properties.DateArrayProperty">
            <summary>
            DateArrayProperty class is the bridge to date repeating attribute in DFC.
            </summary>
            <seealso cref="T:Emc.Documentum.FS.DataModel.Core.Properties.Property">Property</seealso>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Properties.DateArrayProperty.#ctor">
            <summary>
            Constructs a new DateArrayProperty.
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Properties.DateArrayProperty.#ctor(System.String,System.Nullable{System.DateTime}[])">
            <summary>
            Constructs a new DateArrayProperty and sets the name and the values.
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Properties.DateArrayProperty.GetValues">
            <summary>
            Return the values as an array
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Properties.DateArrayProperty.GetValuesAsList">
            <summary>
            Returns all values as a List.
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Properties.DateArrayProperty.accept(Emc.Documentum.FS.DataModel.Core.Properties.IPropertyVisitor)">
            <summary>
            See Visitor pattern Accept method
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Properties.DateArrayProperty.GetValueAsObject">
            <summary>
            Returns the values of the property.
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Properties.DateArrayProperty.IterateValuesAsObjects">
            <summary>
            Returns an IEnumerator on Values of the ArrayProperty extending classes.
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Properties.DateArrayProperty.IterateValuesAsStrings">
            <summary>
            Returns an IEnumerator on string representation of the Values of the ArrayProperty extending classes.
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Properties.DateArrayProperty.Clone">
            <summary>
            Clones property
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Properties.DateArrayProperty.Values">
            <summary>
            Values of DateArrayProperty
            </summary>
        </member>
        <member name="T:Emc.Documentum.FS.DataModel.Core.Properties.DateProperty">
            <remarks/>
            <summary>
            DateProperty base class to handle Date properties.
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Properties.DateProperty.#ctor">
            <summary>
            Constructs a new DateProperty.
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Properties.DateProperty.#ctor(System.String,System.Nullable{System.DateTime})">
            <summary>
            Constructs a new DateProperty and sets the name and the value.
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Properties.DateProperty.GetValueAsObject">
            <summary>
            Returns the values of the property.
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Properties.DateProperty.accept(Emc.Documentum.FS.DataModel.Core.Properties.IPropertyVisitor)">
            <summary>
            See Visitor pattern Accept method
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Properties.DateProperty.GetValueAsString">
            <summary>
            Returns the value of the properties as String.
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Properties.DateProperty.Clone">
            <summary>
            Clones property
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Properties.DateProperty.Value">
            <summary>
            Value of DateProperty
            </summary>
        </member>
        <member name="T:Emc.Documentum.FS.DataModel.Core.Properties.IPropertyVisitor">
            <exclude/>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Properties.IPropertyVisitor.visit(Emc.Documentum.FS.DataModel.Core.Properties.StringProperty)">
            <exclude/>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Properties.IPropertyVisitor.visit(Emc.Documentum.FS.DataModel.Core.Properties.DateArrayProperty)">
            <exclude/>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Properties.IPropertyVisitor.visit(Emc.Documentum.FS.DataModel.Core.Properties.BooleanProperty)">
            <exclude/>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Properties.IPropertyVisitor.visit(Emc.Documentum.FS.DataModel.Core.Properties.NumberProperty)">
            <exclude/>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Properties.IPropertyVisitor.visit(Emc.Documentum.FS.DataModel.Core.Properties.DateProperty)">
            <exclude/>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Properties.IPropertyVisitor.visit(Emc.Documentum.FS.DataModel.Core.Properties.ObjectIdProperty)">
            <exclude/>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Properties.IPropertyVisitor.visit(Emc.Documentum.FS.DataModel.Core.Properties.StringArrayProperty)">
            <exclude/>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Properties.IPropertyVisitor.visit(Emc.Documentum.FS.DataModel.Core.Properties.NumberArrayProperty)">
            <exclude/>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Properties.IPropertyVisitor.visit(Emc.Documentum.FS.DataModel.Core.Properties.BooleanArrayProperty)">
            <exclude/>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Properties.IPropertyVisitor.visit(Emc.Documentum.FS.DataModel.Core.Properties.ObjectIdArrayProperty)">
            <exclude/>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Properties.IPropertyVisitor.visit(Emc.Documentum.FS.DataModel.Core.Properties.RichTextProperty)">
            <exclude/>
        </member>
        <member name="T:Emc.Documentum.FS.DataModel.Core.Properties.NumberArrayProperty">
            <summary>
            NumberArrayProperty class is the bridge to number repeating attributes in DFC.
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Properties.NumberArrayProperty.#ctor">
            <summary>
            Constructs a new NumberArrayProperty.
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Properties.NumberArrayProperty.#ctor(System.String,System.Object[])">
            <summary>
            Constructs a new NumberArrayProperty and sets the name and the values.
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Properties.NumberArrayProperty.GetValues">
            <summary>
            Returns the values as an Array.
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Properties.NumberArrayProperty.GetValuesAsList">
            <summary>
            Returns all values as a List.
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Properties.NumberArrayProperty.SetValues(System.Object[])">
            <summary>
            Setter for property 'Values'.
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Properties.NumberArrayProperty.accept(Emc.Documentum.FS.DataModel.Core.Properties.IPropertyVisitor)">
            <summary>
            See Visitor pattern Accept method
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Properties.NumberArrayProperty.GetValueAsObject">
            <summary>
            Returns the values of the property.
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Properties.NumberArrayProperty.IterateValuesAsObjects">
            <summary>
            Returns an IEnumerator on Values of the ArrayProperty extending classes.
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Properties.NumberArrayProperty.IterateValuesAsStrings">
            <summary>
            Returns an IEnumerator on string representation of the Values of the ArrayProperty extending classes.
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Properties.NumberArrayProperty.MakeProperty(System.String,System.Int16[])">
            <summary>
            Creates new NumberArrayProperty with given name and values.
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Properties.NumberArrayProperty.MakeProperty(System.String,System.Int32[])">
            <summary>
            Creates new NumberArrayProperty with given name and values.
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Properties.NumberArrayProperty.MakeProperty(System.String,System.Int64[])">
            <summary>
            Creates new NumberArrayProperty with given name and values.
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Properties.NumberArrayProperty.MakeProperty(System.String,System.Double[])">
            <summary>
            Creates new NumberArrayProperty with given name and values.
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Properties.NumberArrayProperty.Clone">
            <summary>
            Clones property
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Properties.NumberArrayProperty.Values">
            <summary>
            Values of NumberArrayProperty
            </summary>
        </member>
        <member name="T:Emc.Documentum.FS.DataModel.Core.Properties.NumberProperty">
            <summary>
            NumberProperty base class to handle number properties.
            </summary>
            <seealso cref="T:Emc.Documentum.FS.DataModel.Core.Properties.Property">Property</seealso>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Properties.NumberProperty.#ctor">
            <summary>
            Constructs a new NumberProperty.
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Properties.NumberProperty.#ctor(System.String,System.Object)">
            <summary>
            Constructs a new NumberProperty and sets the name and the value.
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Properties.NumberProperty.GetValueAsString">
            <summary>
            Returns the value of the properties as String.
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Properties.NumberProperty.GetValueAsObject">
            <summary>
            Returns the values of the property.
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Properties.NumberProperty.accept(Emc.Documentum.FS.DataModel.Core.Properties.IPropertyVisitor)">
            <summary>
            See Visitor pattern Accept method
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Properties.NumberProperty.Clone">
            <summary>
            Clones property
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Properties.NumberProperty.Item">
            <summary>
            Value of Number property
            </summary>
        </member>
        <member name="T:Emc.Documentum.FS.DataModel.Core.Properties.ObjectIdArrayProperty">
            <summary>
            ObjectIdArrayProperty class is the bridge to ID repeating attribute in DFC.
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Properties.ObjectIdArrayProperty.#ctor">
            <summary>
            Constructs a new ObjectIdArrayProperty.
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Properties.ObjectIdArrayProperty.#ctor(System.String,Emc.Documentum.FS.DataModel.Core.ObjectId[])">
            <summary>
            Constructs a new ObjectIdArrayProperty and sets the name and the values.
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Properties.ObjectIdArrayProperty.GetValues">
            <summary>
            Returns the values as an Array.
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Properties.ObjectIdArrayProperty.GetValuesAsList">
            <summary>
            Returns all values as a List.
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Properties.ObjectIdArrayProperty.SetValues(Emc.Documentum.FS.DataModel.Core.ObjectId[])">
            <summary>
            Setter for property 'values'.
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Properties.ObjectIdArrayProperty.accept(Emc.Documentum.FS.DataModel.Core.Properties.IPropertyVisitor)">
            <summary>
            See Visitor pattern Accept method
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Properties.ObjectIdArrayProperty.GetValueAsObject">
            <summary>
            Returns the values of the property.
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Properties.ObjectIdArrayProperty.IterateValuesAsObjects">
            <summary>
            Returns an IEnumerator on Values of the ArrayProperty extending classes.
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Properties.ObjectIdArrayProperty.IterateValuesAsStrings">
            <summary>
            Returns an IEnumerator on string representation of the Values of the ArrayProperty extending classes.
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Properties.ObjectIdArrayProperty.Clone">
            <summary>
            Clones property
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Properties.ObjectIdArrayProperty.Values">
            <summary>
            Values of ObjectIdArrayProperty
            </summary>
            <seealso cref="T:Emc.Documentum.FS.DataModel.Core.ObjectId">ObjectId</seealso>
        </member>
        <member name="T:Emc.Documentum.FS.DataModel.Core.Properties.ObjectIdProperty">
            <summary>
            ObjectIdProperty base class to handle ID properties.
            </summary>
            <seealso cref="T:Emc.Documentum.FS.DataModel.Core.Properties.Property">Property</seealso>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Properties.ObjectIdProperty.#ctor">
            <summary>
            Constructs a new ObjectIdProperty.
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Properties.ObjectIdProperty.#ctor(System.String,Emc.Documentum.FS.DataModel.Core.ObjectId)">
            <summary>
            Constructs a new ObjectIdProperty and sets the name and the value.
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Properties.ObjectIdProperty.GetValueAsObject">
            <summary>
            Returns the values of the property.
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Properties.ObjectIdProperty.accept(Emc.Documentum.FS.DataModel.Core.Properties.IPropertyVisitor)">
            <summary>
            See Visitor pattern Accept method
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Properties.ObjectIdProperty.GetValueAsString">
            <summary>
            Returns the value of the properties as String.
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Properties.ObjectIdProperty.Clone">
            <summary>
            Clones property
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Properties.ObjectIdProperty.Value">
            <summary>
            Value of ObjectIdProperty
            </summary>
            <seealso cref="T:Emc.Documentum.FS.DataModel.Core.ObjectId">ObjectId</seealso>
        </member>
        <member name="T:Emc.Documentum.FS.DataModel.Core.Properties.PropertySet">
            <summary>
            PropertySet is a simple container of <see cref="T:Emc.Documentum.FS.DataModel.Core.Properties.Property">Property</see>.
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Properties.PropertySet.#ctor">
            <summary>
            Constructs a new PropertySet.
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Properties.PropertySet.#ctor(Emc.Documentum.FS.DataModel.Core.Properties.Property[])">
            <summary>
            Constructs a new PropertySet and set the properties.
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Properties.PropertySet.Set``1(System.String,``0)">
            <summary>
            Adds a new property to the set.
            </summary>
            <param name="name">name of the property.</param>
            <param name="value">value of the property.</param>
            <returns>the property that was added.</returns>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Properties.PropertySet.Set(Emc.Documentum.FS.DataModel.Core.Properties.Property[])">
            <summary>
            Adds properties to the set. If the property with the same already is in the set it will be replaced.
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Properties.PropertySet.Iterator">
            <summary>
            Returns an enumerator of the properties in the set.
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Properties.PropertySet.Get(System.String)">
            <summary>
            Returns the property with the given name.
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Properties.PropertySet.GetValueAsString">
            <summary>
            Returns in a String all the properties names and values separated by "|".
            (propertyName1=value1|propertyName2=value2)
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Properties.PropertySet.Clone">
            <summary>
            Clones property set
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Properties.PropertySet.Properties">
            <summary>
            Properties from property set.
            </summary>
            <seealso cref="T:Emc.Documentum.FS.DataModel.Core.Properties.Property">Property</seealso>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Properties.PropertySet.IsInternal">
            <exclude/>
            <summary>Internal use only</summary>
        </member>
        <member name="T:Emc.Documentum.FS.DataModel.Core.Properties.RichTextProperty">
            <summary>
            RichTextProperty class to handle RichText property.<p/>
            </summary>
            <seealso cref="T:Emc.Documentum.FS.DataModel.Core.Properties.Property">Property</seealso>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Properties.RichTextProperty.#ctor">
            <summary>
            Constructs a new RichTextProperty with no name and value.
            The 'IsTransient' attribute is set to 'true' by default to
            prevent Content Server from validating this property.
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Properties.RichTextProperty.#ctor(System.String,Emc.Documentum.FS.DataModel.Core.RichText)">
            <summary>
            Constructs a new RichTextProperty with name and RichText value object
            The 'IsTransient' attribute is set to 'true' by default to
            prevent Content Server from validating this property.
            </summary>
            <param name="name">string representing the name of the property</param>
            <param name="value">RichText object representing the value of the property</param>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Properties.RichTextProperty.GetValueAsString">
            <summary>
            Returns the value of the properties as String.
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Properties.RichTextProperty.GetValueAsObject">
            <summary>
            Returns the values of the property.
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Properties.RichTextProperty.accept(Emc.Documentum.FS.DataModel.Core.Properties.IPropertyVisitor)">
            <summary>
            See Visitor pattern Accept method
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Properties.RichTextProperty.Clone">
            <summary>
            Clones property
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Properties.RichTextProperty.Value">
            <summary>
            Property value
            </summary>
        </member>
        <member name="T:Emc.Documentum.FS.DataModel.Core.Properties.StringArrayProperty">
            <summary>
            StringArrayProperty class is the bridge to String repeating attribute in DFC.
            </summary>
            <seealso cref="T:Emc.Documentum.FS.DataModel.Core.Properties.ArrayProperty`1">ArrayProperty</seealso>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Properties.StringArrayProperty.#ctor">
            <summary>
            Constructs a new StringArrayProperty.
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Properties.StringArrayProperty.#ctor(System.String,System.String[])">
            <summary>
            Constructs a new StringArrayProperty and sets the name and the values.
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Properties.StringArrayProperty.GetValues">
            <summary>
            Returns the values as an array.
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Properties.StringArrayProperty.GetValuesAsList">
            <summary>
            Returns all values as a List.
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Properties.StringArrayProperty.SetValues(System.String[])">
            <summary>
            Setter for property 'values'.
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Properties.StringArrayProperty.IterateValuesAsObjects">
            <summary>
            Returns an IEnumerator on Values of the ArrayProperty extending classes.
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Properties.StringArrayProperty.IterateValuesAsStrings">
            <summary>
            Returns an IEnumerator on string representation of the Values of the ArrayProperty extending classes.
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Properties.StringArrayProperty.GetValueAsObject">
            <summary>
            Returns the values of the property.
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Properties.StringArrayProperty.accept(Emc.Documentum.FS.DataModel.Core.Properties.IPropertyVisitor)">
            <summary>
            See Visitor pattern Accept method
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Properties.StringArrayProperty.Clone">
            <summary>
            Clones property
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Properties.StringArrayProperty.Values">
            <summary>
            Values of StringArrayProperty
            </summary>
        </member>
        <member name="T:Emc.Documentum.FS.DataModel.Core.Properties.StringProperty">
            <summary>
            StringProperty base class to handle String properties.
            </summary>
            <seealso cref="T:Emc.Documentum.FS.DataModel.Core.Properties.ArrayProperty`1">ArrayProperty</seealso>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Properties.StringProperty.#ctor">
            <summary>
            Constructs a new StringProperty.
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Properties.StringProperty.#ctor(System.String,System.String)">
            <summary>
            Constructs a new StringProperty and sets the name and the values.
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Properties.StringProperty.GetValueAsString">
            <summary>
            Returns the value of the properties as String.
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Properties.StringProperty.GetValueAsObject">
            <summary>
            Returns the values of the property.
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Properties.StringProperty.accept(Emc.Documentum.FS.DataModel.Core.Properties.IPropertyVisitor)">
            <summary>
            See Visitor pattern Accept method
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Properties.StringProperty.Clone">
            <summary>
            Clones property
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Properties.StringProperty.Value">
            <summary>
            Value of StringProperty
            </summary>
        </member>
        <member name="T:Emc.Documentum.FS.DataModel.Core.Properties.ValueAction">
            <summary>
            ValueAction represents the  intent of the user on the value on the provided index.<p/>
            
            This class maps the index of the value in Object's property list with user's intent. Each time an action is processed
            the Object's property list is reindexed.<p/>
            
            For example. An object has a repeating string property "animals" = {lion, tiger, panther} we want on update to
            remove "lion" and "panther" values from the object. We should provide two delete sequences with indexes {0,1}
            First delete sequence will delete "lion" then the list is reindexed and we have a new list {tiger, panther} and
            the second delete sequence have to be with index 1.
            </summary>
            <seealso cref="T:Emc.Documentum.FS.DataModel.Core.Properties.ValueActionType">ValueActionType</seealso>
            <seealso cref="T:Emc.Documentum.FS.DataModel.Core.Properties.ArrayProperty`1">ArrayProperty</seealso>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Properties.ValueAction.#ctor">
            <summary>
            Constructs a new ValueAction.
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Properties.ValueAction.#ctor(Emc.Documentum.FS.DataModel.Core.Properties.ValueActionType,System.Int32)">
            <summary>
            Constructs a new ValueAction and set the type of the action and the index of the property.
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Properties.ValueAction.Clone">
            <summary>
            Clones object
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Properties.ValueAction.Type">
            <summary>
            Value action type that is mapped to the property index.
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Properties.ValueAction.Index">
            <summary>
            Index of the property to be modified.
            </summary>
        </member>
        <member name="T:Emc.Documentum.FS.DataModel.Core.Properties.ValueActionType">
            <summary>
            ValueActionType enum represents the intent in <see cref="T:Emc.Documentum.FS.DataModel.Core.Properties.ValueAction"/>.
            </summary>
        </member>
        <member name="F:Emc.Documentum.FS.DataModel.Core.Properties.ValueActionType.APPEND">
            <summary>
            Intent to add at the end of the repeating property list of a new value. It ignores index in ValueAction.
            </summary>
        </member>
        <member name="F:Emc.Documentum.FS.DataModel.Core.Properties.ValueActionType.INSERT">
            <summary>
            Intent to insert at the provided index of a new value.
            </summary>
        </member>
        <member name="F:Emc.Documentum.FS.DataModel.Core.Properties.ValueActionType.DELETE">
            <summary>
            Intent to delete the value from the repeating property list at the provided index. It ignores the value
            associated to the ValueAction in ArrayProperty extending classes.
            </summary>
        </member>
        <member name="F:Emc.Documentum.FS.DataModel.Core.Properties.ValueActionType.SET">
            <summary>
            Intent to replace the value from the repeating property list at the provided index.
            </summary>
        </member>
        <member name="T:Emc.Documentum.FS.DataModel.Core.Query.Cluster">
            <summary>
            Cluster class represents a cluster which is a group of similar objects.
            These objects are automatically and dynamically grouped into categories
            created from the words and phrases these objects contain.
            </summary>
            <seealso cref="T:Emc.Documentum.FS.DataModel.Core.Query.ClusterTree">ClusterTree</seealso>
        </member>
        <member name="T:Emc.Documentum.FS.DataModel.Core.Query.Grouping">
            <summary>
            Base abstract class for grouping results
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Query.Cluster.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Query.Cluster.#ctor(System.Collections.Generic.List{System.String})">
            <summary>
            Construct a Cluster and the set the name of this cluster
            </summary>
            <param name="labels">The cluster labels</param>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Query.Cluster.AddClusterObject(Emc.Documentum.FS.DataModel.Core.ObjectIdentity)">
            <summary>
            Add the object identity to this cluster.
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Query.Cluster.ClusterValues">
            <summary>
            Cluster display values.
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Query.Cluster.ClusterObjectsIdentities">
            <summary>
            The identities of the objects belonging to this cluster.
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Query.Cluster.ClusterSize">
            <summary>
            The cluster size.
            </summary>
        </member>
        <member name="T:Emc.Documentum.FS.DataModel.Core.Query.ClusteringRange">
            <summary>
            Sets the number of clusters computed by the clustering service.
            </summary>
        </member>
        <member name="F:Emc.Documentum.FS.DataModel.Core.Query.ClusteringRange.LOW">
            <summary>
            Indicates LOW clustering range.
            </summary>
        </member>
        <member name="F:Emc.Documentum.FS.DataModel.Core.Query.ClusteringRange.MEDIUM">
            <summary>
            Indicates MEDIUM clustering range.
            </summary>
        </member>
        <member name="F:Emc.Documentum.FS.DataModel.Core.Query.ClusteringRange.HIGH">
            <summary>
            Indicates HIGH clustering range.
            </summary>
        </member>
        <member name="T:Emc.Documentum.FS.DataModel.Core.Query.ClusteringStrategy">
            <summary>
            A ClusteringStrategy specifies the strategy to compute clusters.
            </summary>
        </member>
        <member name="T:Emc.Documentum.FS.DataModel.Core.Query.GroupingStrategy">
            <summary>
            Base abstract class for grouping strategies
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Query.ClusteringStrategy.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Query.ClusteringStrategy.#ctor(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            Constructs a new ClusteringStrategy, set the name and the list of attributes of this strategy.
            </summary>
            <param name="name">the name of the strategy</param>
            <param name="attrs">the list of object attributes</param>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Query.ClusteringStrategy.Attributes">
            <summary>
            The strategy attributes list.
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Query.ClusteringStrategy.Tokenizers">
            <summary>
            The ProperySet is a set of StringProperty where the name is the attribute name and the value
            is the tokenizer name to apply to this attribute.
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Query.ClusteringStrategy.ClusteringRange">
            <summary>
            ClusteringRange.
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Query.ClusteringStrategy.clusteringRangeSpecified">
            <exclude/>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Query.ClusteringStrategy.ClusteringThreshold">
            <summary>
            The clustering threshold. Values &lt;= 0 are not supported.
            Set the minimal size of a cluster. Clusters below this size will not be returned.
            To get all possible clusters, sets threshold to 1.
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Query.ClusteringStrategy.StrategyName">
            <summary>
            Strategy name.
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Query.ClusteringStrategy.ReturnIdentitySet">
            <summary>
            Indicates if object identities should be returned with the clusters.
            </summary>
        </member>
        <member name="T:Emc.Documentum.FS.DataModel.Core.Query.ClusterTree">
            <summary>
            A ClusterTree is a container for Cluster objects that are calculated according to a ClusteringStrategy.
            </summary>
            <seealso cref="T:Emc.Documentum.FS.DataModel.Core.Query.Cluster">Cluster</seealso>
            <seealso cref="T:Emc.Documentum.FS.DataModel.Core.Query.ClusteringStrategy">ClusteringStrategy</seealso>
        </member>
        <member name="T:Emc.Documentum.FS.DataModel.Core.Query.GroupingTree">
            <summary>
            Base abstract class for grouping trees
            </summary>
            <seealso cref="T:Emc.Documentum.FS.DataModel.Core.Query.ClusterTree">ClusterTree</seealso>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Query.ClusterTree.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Query.ClusterTree.#ctor(Emc.Documentum.FS.DataModel.Core.Query.ClusteringStrategy)">
            <summary>
            Construct a new ClusterTree and set the ClusteringStrategy
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Query.ClusterTree.AddCluster(Emc.Documentum.FS.DataModel.Core.Query.Cluster)">
            <summary>
            Adds a cluster to this ClusterTree.
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Query.ClusterTree.Clusters">
            <summary>
            The list of Cluster belonging to this ClusterTree.
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Query.ClusterTree.Strategy">
            <summary>
            ClusterTree ClusteringStrategy.
            </summary>
        </member>
        <member name="T:Emc.Documentum.FS.DataModel.Core.Query.Condition">
            <summary>
            Enumerates content server search conditions.<br/>
            Some Conditions are not supported by every Property, check the Schema Service.
            </summary>
            <seealso cref="P:Emc.Documentum.FS.DataModel.Core.Schema.PropertyInfo.SearchOperations">PropertyInfo.SearchOperations</seealso>
        </member>
        <member name="F:Emc.Documentum.FS.DataModel.Core.Query.Condition.UNDEFINED">
            <summary>
            Undefined Search Condition.
            </summary>
        </member>
        <member name="F:Emc.Documentum.FS.DataModel.Core.Query.Condition.EQUAL">
            <summary>
            Search Condition: <b>Equal</b>.
            </summary>
        </member>
        <member name="F:Emc.Documentum.FS.DataModel.Core.Query.Condition.NOT_EQUAL">
            <summary>
            Search Condition: <b>Not Equal</b>.
            </summary>
        </member>
        <member name="F:Emc.Documentum.FS.DataModel.Core.Query.Condition.GREATER_THAN">
            <summary>
            Search Condition: <b>Greater Than</b>.
            </summary>
        </member>
        <member name="F:Emc.Documentum.FS.DataModel.Core.Query.Condition.LESS_THAN">
            <summary>
            Search Condition: <b>Less Than</b>.
            </summary>
        </member>
        <member name="F:Emc.Documentum.FS.DataModel.Core.Query.Condition.GREATER_EQUAL">
            <summary>
            Search Condition: <b>Greater or Equal Than</b>.
            </summary>
        </member>
        <member name="F:Emc.Documentum.FS.DataModel.Core.Query.Condition.LESS_EQUAL">
            <summary>
            Search Condition: <b>Less or Equal Than</b>.
            </summary>
        </member>
        <member name="F:Emc.Documentum.FS.DataModel.Core.Query.Condition.BEGINS_WITH">
            <summary>
            Search Condition: <b>Begins With</b>.
            </summary>
        </member>
        <member name="F:Emc.Documentum.FS.DataModel.Core.Query.Condition.CONTAINS">
            <summary>
            Search Condition: <b>Contains</b>.
            </summary>
        </member>
        <member name="F:Emc.Documentum.FS.DataModel.Core.Query.Condition.DOES_NOT_CONTAIN">
            <summary>
            Search Condition: <b>Does Not Contain</b>.
            </summary>
        </member>
        <member name="F:Emc.Documentum.FS.DataModel.Core.Query.Condition.ENDS_WITH">
            <summary>
            Search Condition: <b>Ends With</b>.
            </summary>
        </member>
        <member name="F:Emc.Documentum.FS.DataModel.Core.Query.Condition.IN">
            <summary>
            Search Condition: <b>In</b>.
            </summary>
        </member>
        <member name="F:Emc.Documentum.FS.DataModel.Core.Query.Condition.NOT_IN">
            <summary>
            Search Condition: <b>Not In</b>.
            </summary>
        </member>
        <member name="F:Emc.Documentum.FS.DataModel.Core.Query.Condition.BETWEEN">
            <summary>
            Search Condition: <b>Between</b>.
            </summary>
        </member>
        <member name="F:Emc.Documentum.FS.DataModel.Core.Query.Condition.IS_NULL">
            <summary>
            Search Condition: <b>Is Null</b>.
            </summary>
        </member>
        <member name="F:Emc.Documentum.FS.DataModel.Core.Query.Condition.IS_NOT_NULL">
            <summary>
            Search Condition: <b>Is Not Null</b>.
            </summary>
        </member>
        <member name="T:Emc.Documentum.FS.DataModel.Core.Query.DormancyStatus">
            <summary>
            Represents dormancy status of one repository or one content server.
            </summary>   
        </member>
        <member name="F:Emc.Documentum.FS.DataModel.Core.Query.DormancyStatus.ACTIVE">
            <summary>
            The repository or content is in normal operation. It can accept 
            connections and process transactions.
            </summary>
        </member>
        <member name="F:Emc.Documentum.FS.DataModel.Core.Query.DormancyStatus.DORMANT">
            <summary>
            The repository or content does not accept new connections. All running 
            transactions have completed.
            </summary>
        </member>
        <member name="F:Emc.Documentum.FS.DataModel.Core.Query.DormancyStatus.DORMANCY_REQEUSTED">
            <summary>
            The repository or content server does not accept new connections. All 
            existing connections are placed into a read-only mode.
            </summary>
        </member>
        <member name="F:Emc.Documentum.FS.DataModel.Core.Query.DormancyStatus.PROJECTED_DORMANT">
            <summary>
             This state is only for content server.
             When a server is in projected dormant state, connection brokers do not allow
             any new connections to the content Server. Normal operations (including
             read/write transactions) continue for existing connections.
            </summary>
        </member>
        <member name="F:Emc.Documentum.FS.DataModel.Core.Query.DormancyStatus.INVALID">
            <summary>
            Unknown dormancy status.
            </summary>
        </member>
        <member name="T:Emc.Documentum.FS.DataModel.Core.Query.Expression">
            <summary>
            Base Object to express Search Expressions.
            </summary>
            <seealso cref="P:Emc.Documentum.FS.DataModel.Core.Query.ExpressionSet.Expressions">Expressions</seealso>
        </member>
        <member name="T:Emc.Documentum.FS.DataModel.Core.Query.ExpressionScope">
            <summary>
            Defines a specific expressionset to use for a specific source.
            According to DFC's API, the Scope is ignored if its associated source is not included in the search targeted repositories.
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Query.ExpressionScope.#ctor">
            <summary>
            Construct a new ExpressionScope.
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Query.ExpressionScope.#ctor(System.String,Emc.Documentum.FS.DataModel.Core.Query.ExpressionSet)">
            <summary>
            Construct a new ExpressionScope from a repositoryName and an expression set.
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Query.ExpressionScope.ExpressionSet">
            <summary>
            Gets the expression Set to add to the query for this scope.
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Query.ExpressionScope.RepositoryName">
            <summary>
            Gets the repository name this Scope applies to.
            </summary>
        </member>
        <member name="T:Emc.Documentum.FS.DataModel.Core.Query.ExpressionSet">
            <summary>
            Expresses a set of Constraints that can be added to a Structured Query.
            </summary>
            <seealso cref="T:Emc.Documentum.FS.DataModel.Core.Query.Expression">Expression</seealso>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Query.ExpressionSet.#ctor">
            <summary>
            Generates an empty ExpressionSet with a default AND operator.
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Query.ExpressionSet.#ctor(Emc.Documentum.FS.DataModel.Core.Query.ExpressionSetOperator)">
            <summary>
            Generates an empty ExpressionSet with the specified operator.
            </summary>
            <param name="op">The operator that will be used between every expression that will be added to this ExpressionSet</param>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Query.ExpressionSet.AddExpression(Emc.Documentum.FS.DataModel.Core.Query.Expression)">
            <summary>
            Adds expression
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Query.ExpressionSet.Expressions">
            <summary>
            List of expressions.
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Query.ExpressionSet.Operator">
            <summary>
            Operator property.
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Query.ExpressionSet.operatorSpecified">
            <summary>
            Internal use only
            </summary>
            <exclude/>
        </member>
        <member name="T:Emc.Documentum.FS.DataModel.Core.Query.ExpressionSetOperator">
            <summary>
             Allows to Specify which boolean operator is used to link expressions within an ExpressionSet.
            </summary>
        </member>
        <member name="F:Emc.Documentum.FS.DataModel.Core.Query.ExpressionSetOperator.AND">
            <summary>
            logical AND.
            </summary>
        </member>
        <member name="F:Emc.Documentum.FS.DataModel.Core.Query.ExpressionSetOperator.OR">
            <summary>
            logical OR.
            </summary>
        </member>
        <member name="T:Emc.Documentum.FS.DataModel.Core.Query.ExpressionValue">
            <summary>
            The Base Object that defines allowed values in a PropertyExpression.
            </summary>
            <seealso cref="T:Emc.Documentum.FS.DataModel.Core.Query.PropertyExpression">PropertyExpression</seealso>
        </member>
        <member name="T:Emc.Documentum.FS.DataModel.Core.Query.Facet">
            <remarks/>
            <summary>
            A Facet holds a list of facet values and a facet definition. The facet values are computed according to the facet
            definition.
            </summary>
            <seealso cref="T:Emc.Documentum.FS.DataModel.Core.Query.FacetValue">FacetValue</seealso>
            <seealso cref="P:Emc.Documentum.FS.DataModel.Core.Query.Facet.FacetDefinition">FacetDefinition</seealso>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Query.Facet.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Query.Facet.#ctor(System.Collections.Generic.List{Emc.Documentum.FS.DataModel.Core.Query.FacetValue},Emc.Documentum.FS.DataModel.Core.Query.FacetDefinition)">
            <summary>
            Construct a Facet
            </summary>
            <param name="facetValues">facet values</param>
            <param name="facetDefinition">facet definition</param>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Query.Facet.Values">
            <remarks/>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Query.Facet.FacetDefinition">
            <remarks/>
        </member>
        <member name="T:Emc.Documentum.FS.DataModel.Core.Query.FacetDefinition">
            <remarks/>
            <summary>
            A facet definition is a set of properties defining the way a facet is built.
            </summary> 
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Query.FacetDefinition.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Query.FacetDefinition.#ctor(System.Collections.Generic.List{System.String},Emc.Documentum.FS.DataModel.Core.Query.FacetSort,Emc.Documentum.FS.DataModel.Core.Properties.PropertySet,Emc.Documentum.FS.DataModel.Core.Query.FacetDefinition,System.String,System.String,System.Int32)">
            <summary>
            Construct a FacetDefinition
            </summary>
            <param name="attributes">attributes</param>
            <param name="facetSort">facet sort</param>
            <param name="properties">properties</param>
            <param name="subFacetDefinition">subFacetDefinition</param>
            <param name="name">name</param>
            <param name="groupBy">groupBy</param>
            <param name="maxFacetValues">maxFacetValues</param>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Query.FacetDefinition.Attributes">
            <remarks/>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Query.FacetDefinition.FacetSort">
            <remarks/>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Query.FacetDefinition.Properties">
            <remarks/>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Query.FacetDefinition.SubFacetDefinition">
            <remarks/>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Query.FacetDefinition.Name">
            <remarks/>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Query.FacetDefinition.GroupBy">
            <remarks/>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Query.FacetDefinition.MaxFacetValues">
            <remarks/>
        </member>
        <member name="T:Emc.Documentum.FS.DataModel.Core.Query.FacetSort">
            <remarks/>
        </member>
        <member name="F:Emc.Documentum.FS.DataModel.Core.Query.FacetSort.FREQUENCY">
            <summary>
            Ordered by count, descending
            </summary>
        </member>
        <member name="F:Emc.Documentum.FS.DataModel.Core.Query.FacetSort.VALUE_ASCENDING">
            <summary>
            Ordered by value (ascending). The sort is alphanumeric.
            We assume that even if the data type of the facet is date or numeric, the values are encoded in such way that
            they are alphanumerically sortable.
            </summary>
        </member>
        <member name="F:Emc.Documentum.FS.DataModel.Core.Query.FacetSort.VALUE_DESCENDING">
            <summary>
            Ordered by value (descending). The sort is alphanumeric.
            We assume that even if the data type of the facet is date or numeric, the values are encoded in such way that
            they are alphanumerically sortable.
            </summary>
        </member>
        <member name="F:Emc.Documentum.FS.DataModel.Core.Query.FacetSort.NONE">
            <summary>
            Keep the order returned by the facet handler
            </summary>
        </member>
        <member name="T:Emc.Documentum.FS.DataModel.Core.Query.FacetValue">
            <remarks/>
            <summary>
            A facet value represents a group of results. A facet value has a value and a count indicating the number of results
            contained in this group.
            </summary>  
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Query.FacetValue.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Query.FacetValue.#ctor(Emc.Documentum.FS.DataModel.Core.Properties.PropertySet,System.Collections.Generic.List{Emc.Documentum.FS.DataModel.Core.Query.FacetValue},System.String,System.Int32)">
            <summary>
            Construct a FacetValue
            </summary>
            <param name="propertySet">properties</param>
            <param name="subFacets">sub facets</param>
            <param name="value">value</param>
            <param name="count">count</param>        
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Query.FacetValue.Properties">
            <remarks/>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Query.FacetValue.SubFacetValues">
            <remarks/>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Query.FacetValue.Value">
            <remarks/>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Query.FacetValue.Count">
            <remarks/>
        </member>
        <member name="T:Emc.Documentum.FS.DataModel.Core.Query.FullTextExpression">
            <summary>
            Expresses a single String constraint that can be added to a Structured Query.
            </summary>
            <seealso cref="T:Emc.Documentum.FS.DataModel.Core.Query.StructuredQuery">StructuredQuery</seealso>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Query.FullTextExpression.#ctor">
            <summary>
            Constructs an empty Full-Text Expression.
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Query.FullTextExpression.#ctor(System.String)">
            <summary>
            Constructs a Full-Text Expression with the specified Full-Text constraint.
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Query.FullTextExpression.Value">
            <summary>
            FullTextExpression value.
            </summary>
        </member>
        <member name="T:Emc.Documentum.FS.DataModel.Core.Query.OrderByClause">
            <summary>
            Express a "order by" clause that can be added to a StructuredQuery.
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Query.OrderByClause.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Query.OrderByClause.Attribute">
            <summary>
            Order by attribute name.
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Query.OrderByClause.IsAscending">
            <summary>
            Indicates wether or not the order by should be ascending. Default value is true.
            </summary>
        </member>
        <member name="T:Emc.Documentum.FS.DataModel.Core.Query.PartitionScope">
            <summary>
            Defines a specific partition within a searched source.
            According to DFC's API, the Scope is ignored if its associated source is not included in the search targeted repositories.
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Query.PartitionScope.#ctor">
            <summary>
            Construct a new PartitionScope.
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Query.PartitionScope.#ctor(System.String,System.String)">
            <summary>
            Construct a new PartitionScope from a repositoryName and a partitionName.
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Query.PartitionScope.PartitionName">
            <summary>
            Gets the partition name within the repository.
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Query.PartitionScope.RepositoryName">
            <summary>
            Gets the repository name this Scope applies to.
            </summary>
        </member>
        <member name="T:Emc.Documentum.FS.DataModel.Core.Query.PassthroughQuery">
            <summary>
            Simple passthrough query.
            </summary>
        </member>
        <member name="T:Emc.Documentum.FS.DataModel.Core.Query.Query">
            <summary>
            Base class for queries.
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Query.Query.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Query.Query.Enumerator">
            <summary>
            Iterates all repositories added to query.
            See also: <see cref="M:Emc.Documentum.FS.DataModel.Core.Query.Query.AddRepository(System.String)">AddRepository</see>, <para/> <see cref="P:Emc.Documentum.FS.DataModel.Core.Query.Query.Repositories">Repositories</see>
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Query.Query.AddRepository(System.String)">
            <summary>
            Adds repository to the query. The query will be executed for all added repositories. 
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Query.Query.Repositories">
            <summary>
            List of repositories.
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Query.PassthroughQuery.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Query.PassthroughQuery.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Query.PassthroughQuery.#ctor(System.Collections.Generic.List{System.String},System.String)">
            <summary>
            Constructor
            </summary>
            <param name="repositories">repositories list of repositories for query</param>
            <param name="queryString">queryString DQL statement</param>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Query.PassthroughQuery.QueryString">
            <summary>
            DQL statement.
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Query.PassthroughQuery.TypeAlias">
            <summary>
            Sets type alias for query objects in the QueryResults.<p/>
            Call for <see cref="P:Emc.Documentum.FS.DataModel.Core.DataObject.Type">DataObject.Type</see>
            </summary>
        </member>
        <member name="T:Emc.Documentum.FS.DataModel.Core.Query.PropertyExpression">
            <summary>
            Expresses a constraint on a single attribute that can be added to a Structured Query.
            </summary>
            <seealso cref="T:Emc.Documentum.FS.DataModel.Core.Query.ExpressionValue">ExpressionValue</seealso>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Query.PropertyExpression.#ctor">
            <summary>
            Default Constructor.
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Query.PropertyExpression.#ctor(System.String,Emc.Documentum.FS.DataModel.Core.Query.Condition)">
            <summary>
            Constructs a PropertyExpression on the specified property with a default empty SimpleValue.
            </summary>
            <param name="property">the attribute internal name</param>
            <param name="condition">of the constraint to build.</param>
            <seealso cref="T:Emc.Documentum.FS.DataModel.Core.Query.SimpleValue">SimpleValue</seealso>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Query.PropertyExpression.#ctor(System.String,Emc.Documentum.FS.DataModel.Core.Query.Condition,System.String)">
            <summary>
            Constructs a PropertyExpression on the specified property with the specified value.
            </summary>
            <param name="property">the attribute internal name.</param>
            <param name="condition">of the constraint to build.</param>
            <param name="value">The string to construct a SimpleValue from</param>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Query.PropertyExpression.#ctor(System.String,Emc.Documentum.FS.DataModel.Core.Query.Condition,Emc.Documentum.FS.DataModel.Core.Query.ExpressionValue)">
            <summary>
            Constructs a PropertyExpression on the specified property with the specified complex value.
            </summary>
            <param name="property">the attribute internal name.</param>
            <param name="condition">of the constraint to build.</param>
            <param name="value">The ExpressionValue to add to the PropertyExpression as is.</param>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Query.PropertyExpression.Value">
            <summary>
            Value of the PropertyExpression.
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Query.PropertyExpression.Property">
            <summary>
            Property on which this expression applies.
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Query.PropertyExpression.Condition">
            <summary>
            Operation on which this expression applies.
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Query.PropertyExpression.conditionSpecified">
            <remarks/>
            <exclude/>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Query.PropertyExpression.DataType">
            <summary>
            Forces the data type of this property.
            If null, this info will be fetched from the DataDictionary.
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Query.PropertyExpression.dataTypeSpecified">
            <remarks/>
            <exclude/>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Query.PropertyExpression.IsRepeated">
            <summary>
            Forces the repeated flag of this property.
            If null, this info will be fetched from the DataDictionary.
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Query.PropertyExpression.IsCaseSensitive">
            <summary>
            Sets if the value should be considered as case sensitive or not.
            Case sensitivity requests can be costly when querying an indexed source.
            Case insensitivity can be costly when querying directly a DataBase.
            Default is true.
            </summary>
        </member>
        <member name="T:Emc.Documentum.FS.DataModel.Core.Query.QueryCluster">
            <summary>
            A QueryCluster contains a list of ClusterTrees computed on query results. The query is identified by the
            queryId field.
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Query.QueryCluster.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Query.QueryCluster.AddClusterTree(Emc.Documentum.FS.DataModel.Core.Query.ClusterTree)">
            <summary>
            Adds new <see cref="T:Emc.Documentum.FS.DataModel.Core.Query.ClusterTree">ClusterTree</see>
            </summary>
            <param name="tree">ClusterTree</param>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Query.QueryCluster.ClusterTrees">
            <summary>
            The list of ClusterTree objects.
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Query.QueryCluster.QueryStatus">
            <summary>
            Query status.
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Query.QueryCluster.QueryId">
            <summary>
            The query id associated to the query execution.
            </summary>
        </member>
        <member name="T:Emc.Documentum.FS.DataModel.Core.Query.QueryExecution">
            <remarks/>
            <summary>
            This class represents parameters for query and search services.
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Query.QueryExecution.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Query.QueryExecution.#ctor(System.Int64,System.Int32,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="startingIndex">starting index</param>
            <param name="maxResultCount">maximum results to be returned by query/search service in one call</param>
            <param name="maxResultPerSource">maximum results to be returned by search service for one source.</param>
            <seealso cref="P:Emc.Documentum.FS.DataModel.Core.Query.QueryExecution.StartingIndex">StartingIndex</seealso>
            <seealso cref="P:Emc.Documentum.FS.DataModel.Core.Query.QueryExecution.MaxResultCount">MaxResultCount</seealso>
            <seealso cref="P:Emc.Documentum.FS.DataModel.Core.Query.QueryExecution.MaxResultPerSource">MaxResultPerSource</seealso>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Query.QueryExecution.QueryId">
            <summary>
            Query id to get cached result.<para/>
            Note: Is used only for <see cref="F:Emc.Documentum.FS.DataModel.Core.CacheStrategyType.BASIC_MEMORY_CACHE_STRATEGY">CacheStrategyType.BASIC_MEMORY_CACHE_STRATEGY</see>
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Query.QueryExecution.StartingIndex">
            <summary>
            Starting index for query result.<p/>
            For example:<para/>
            If dfc query returns 1000 records and starting index is 100 then
            the the records with sequence number >= 100 and &lt;= MaxResultCount
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Query.QueryExecution.MaxResultCount">
            <summary>
            Maximum amount of results to be returned in one service call.
            By default, the limit is set to 100. If this value is set to -1, the defined maximum limit is used, 
            which is set in the dfs-runtime.properties file in the entry dfs.query_cache_policy.query_max_result. 
            If NO_CACHE_STRATEGY is adopted then maxResultCount is not limited by dfs-runtime.properties setting.
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Query.QueryExecution.MaxResultPerSource">
            <summary>
            Maximum amount of results to be returned in one service call for one source (repository)
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Query.QueryExecution.CacheStrategyType">
            <summary>
            Cache strategy for the query.
            </summary>
            <seealso cref="T:Emc.Documentum.FS.DataModel.Core.CacheStrategyType">CacheStrategyType</seealso>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Query.QueryExecution.cacheStrategyTypeSpecified">
            <remarks/>
            <exclude/>
        </member>
        <member name="T:Emc.Documentum.FS.DataModel.Core.Query.QueryFacet">
            <remarks/>
            <summary>
            A QueryFacet contains a list of Facets computed on query results. The query is identified by the queryId field.
            </summary>
            <seealso cref="T:Emc.Documentum.FS.DataModel.Core.Query.Facet">Facet</seealso>
            <seealso cref="P:Emc.Documentum.FS.DataModel.Core.Query.QueryFacet.QueryStatus">QueryStatus</seealso>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Query.QueryFacet.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Query.QueryFacet.#ctor(System.Collections.Generic.List{Emc.Documentum.FS.DataModel.Core.Query.Facet},Emc.Documentum.FS.DataModel.Core.Query.QueryStatus,System.String)">
            <summary>
            Construct a QueryFacet
            </summary>
            <param name="facets">facets</param>
            <param name="queryStatus">query status</param>
            <param name="queryId">query id</param>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Query.QueryFacet.Facets">
            <summary>
            The list of facet for the query.
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Query.QueryFacet.QueryStatus">
            <summary>
            The Query Status.
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Query.QueryFacet.QueryId">
            <summary>
            The query id associated to the query execution.
            </summary>
        </member>
        <member name="T:Emc.Documentum.FS.DataModel.Core.Query.QueryResult">
            <summary>
             The QueryResult is used by QueryService and SearchService to return the service call results.
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Query.QueryResult.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Query.QueryResult.#ctor(System.String,Emc.Documentum.FS.DataModel.Core.DataPackage)">
            <summary>
            Constructor
            </summary>
            <param name="queryId">id of the query if the {@link com.emc.documentum.fs.datamodel.core.CacheStrategyType#BASIC_MEMORY_CACHE_STRATEGY BASIC_MEMORY_CACHE_STRATEGY} was used.</param>
            <param name="dataPackage">the query result</param>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Query.QueryResult.#ctor(Emc.Documentum.FS.DataModel.Core.DataPackage)">
            <summary>
            Constructor
            </summary>
            <param name="dataPackage">the query result</param>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Query.QueryResult.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="queryId">the query result</param>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Query.QueryResult.AddDataObject(Emc.Documentum.FS.DataModel.Core.DataObject)">
            <summary>
            Adds new DataObject to DataPackage
            </summary>
            <param name="dataObject">the query id</param>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Query.QueryResult.DataPackage">
            <summary>
            Query results as DataPackage
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Query.QueryResult.QueryStatus">
            <summary>
            Query status.
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Query.QueryResult.QueryId">
            <summary>
            Query id.
            Note: It is only supported by the <see cref="F:Emc.Documentum.FS.DataModel.Core.CacheStrategyType.BASIC_MEMORY_CACHE_STRATEGY">CacheStrategyType.BASIC_MEMORY_CACHE_STRATEGY</see>
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Query.QueryResult.DataObjects">
            <summary>
            Query result as list of data object.
            </summary>
        </member>
        <member name="T:Emc.Documentum.FS.DataModel.Core.Query.QueryStatus">
            <summary>
            The QueryStatus encapsulates data about executed query
            (failed or succeeded; have query more values? etc...).
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Query.QueryStatus.RepositoryStatusInfos">
            <summary>
             Statuses for repositories where the query has been executed.
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Query.QueryStatus.HasMoreResults">
            <summary>
            Whether this repository can be asked for additional results.
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Query.QueryStatus.IsCompleted">
            <summary>
            Whether this repository can be asked for additional results.
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Query.QueryStatus.GlobalResultsCount">
            <summary>
            The global number of unique available results.
            </summary>
        </member>
        <member name="T:Emc.Documentum.FS.DataModel.Core.Query.QueryType">
            <summary>
            <B>Purpose</B>: Defines the QueryType of the query.
            </summary>
        </member>
        <member name="F:Emc.Documentum.FS.DataModel.Core.Query.QueryType.PASSTHROUGH">
            <summary>
            PASSTHROUGH to send a DQL string as a Query.
            </summary>
        </member>
        <member name="F:Emc.Documentum.FS.DataModel.Core.Query.QueryType.STRUCTURED">
            <summary>
            STRUCTURED defines a Query that is constituted with Expressions.
            </summary>
        </member>
        <member name="F:Emc.Documentum.FS.DataModel.Core.Query.QueryType.UNKNOWN">
            <summary>
            UNKNOWN The query type is neither PASSTHROUGH nor STRUCTURED.
            </summary>
        </member>
        <member name="T:Emc.Documentum.FS.DataModel.Core.Query.RangeValue">
            <summary>
            Defines a Value object that can be used in a <code>PropertyExpression</code> with the <code>Condition.BETWEEN</code> operation.<br/>
            Both limit are inclusive.<br/>
            <br/>
            <b>Warning:</b> If these limits are String representation of Date objects,
            it is strongly recommended to use a dateFormat in the StructuredQuery with at least the minutes precision.
            Otherwise, the limits might not be inclusive depending on the underlying engine behaviour.
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Query.RangeValue.#ctor">
            <summary>
            Default Constructor.
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Query.RangeValue.#ctor(System.String,System.String)">
            <summary>
            Constructs a RangeValue with the specified limits.
            </summary>
            <param name="from">The lower limit of this RangeValue.</param>
            <param name="to">The higher limit of this RangeValue.</param>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Query.RangeValue.FromValue">
            <summary>
            The lower limit of this Range.
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Query.RangeValue.ToValue">
            <summary>
            The higher limit of this Range.
            </summary>
        </member>
        <member name="T:Emc.Documentum.FS.DataModel.Core.Query.RelativeDateValue">
            <summary>
            Defines a relative date value that will be evaluated at query execution time.<br/>
            It is composed of:
            <li>A TimeUnit <code>unit</code> field {MILLISECOND, SECOND, MINUTE, HOUR, DAY, WEEK, MONTH, YEAR, ERA}.</li>
            <li>An Integer <code>value</code> that represents the amount of time to consider. (It can be positive or negative to represent past or future dates).</li>
            </summary>
            <seealso cref="T:Emc.Documentum.FS.DataModel.Core.Query.TimeUnit">TimeUnit</seealso>
            <seealso cref="T:Emc.Documentum.FS.DataModel.Core.Query.PropertyExpression">PropertyExpression</seealso>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Query.RelativeDateValue.#ctor(System.Int32,Emc.Documentum.FS.DataModel.Core.Query.TimeUnit)">
            <summary>
            Constructs a RelativeDate with the specified value and time unit.
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Query.RelativeDateValue.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Query.RelativeDateValue.Value">
            <summary>
            The amount of data to consider in this RelativeDateValue.<br/>
            This integer <code>Value</code> can be positive or negative to represent past or future dates.
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Query.RelativeDateValue.Unit">
            <summary>
            The time unit of data to consider in this RelativeDateValue.
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Query.RelativeDateValue.unitSpecified">
            <remarks/>
            <exclude/>
        </member>
        <member name="T:Emc.Documentum.FS.DataModel.Core.Query.Repository">
            <summary>
            The Repository objects describe the sources that can be searched through the Search and Query Service.
            This object has a type field to differentiate Docbase (MANAGED) from EXTERNAL sources that can be accessed using ECI Services option.
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Query.Repository.#ctor">
            <summary>
            Default Constructor.
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Query.Repository.#ctor(System.String)">
            <summary>
            Default Constructor for the specified repository name.
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Query.Repository.Properties">
            <summary>
            Object containing this repository capabilities.
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Query.Repository.Servers">
            <summary>
            List of all content servers of this repository.
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Query.Repository.Name">
            <summary>
            The internal name of this Repository.
            This name should be used to define the repositories of a Query.
            
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Query.Repository.Type">
            <summary>
            Gets the type of this Repository.<br/>
            Only <code>RepositoryType.MANAGED</code> repositories can accept <code>PassthroughQuery</code>.
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Query.Repository.typeSpecified">
            <remarks/>
            <exclude/>
        </member>
        <member name="T:Emc.Documentum.FS.DataModel.Core.Query.RepositoryEvent">
            <summary>
            The RepositoryEvent describes the events that occurred during the query execution.
            This object is returned as a report after a call to the SearchService.
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Query.RepositoryEvent.Exception">
            <summary>
            The optional exception associated with this event.
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Query.RepositoryEvent.Source">
            <summary>
            The name of the source that generated this event.
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Query.RepositoryEvent.Time">
            <summary>
            The time at which was generated this event.
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Query.RepositoryEvent.TimeSpecified">
            <summary>
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Query.RepositoryEvent.EventId">
            <summary>
            The principal Id of this event.
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Query.RepositoryEvent.EventIdSpecified">
            <summary>
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Query.RepositoryEvent.EventSubId">
            <summary>
            The sub Id of this event.
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Query.RepositoryEvent.EventSubIdSpecified">
            <summary>
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Query.RepositoryEvent.Message">
            <summary>
            The optional message associated with this event.
            </summary>
        </member>
        <member name="T:Emc.Documentum.FS.DataModel.Core.Query.RepositoryEventId">
            <summary>
            </summary>
        </member>
        <member name="F:Emc.Documentum.FS.DataModel.Core.Query.RepositoryEventId.ACTION">
            <summary>
            ID: Internal Debugging Event.
            </summary>
        </member>
        <member name="F:Emc.Documentum.FS.DataModel.Core.Query.RepositoryEventId.CALL">
            <summary>
            ID: The source backend has been contacted.
            </summary>
        </member>
        <member name="F:Emc.Documentum.FS.DataModel.Core.Query.RepositoryEventId.DONE">
            <summary>
            ID: The action is over.
            </summary>
        </member>
        <member name="F:Emc.Documentum.FS.DataModel.Core.Query.RepositoryEventId.ERROR">
            <summary>
            ID: An error occured during the execution of the query.
            </summary>
        </member>
        <member name="F:Emc.Documentum.FS.DataModel.Core.Query.RepositoryEventId.FACET_RETRIEVED">
            <summary>
            ID: indicate that the facets have been retrieved.
            </summary>
        </member>
        <member name="F:Emc.Documentum.FS.DataModel.Core.Query.RepositoryEventId.FACETS_RESULTS_TRUNCATED">
            <summary>
            ID: indicates that the number of results used to compute facets is not the full results set.
            </summary>
        </member>
        <member name="F:Emc.Documentum.FS.DataModel.Core.Query.RepositoryEventId.FETCH">
            <summary>
            ID: Some data is being fetched from the backend source.
            </summary>
        </member>
        <member name="F:Emc.Documentum.FS.DataModel.Core.Query.RepositoryEventId.FILTERED">
            <summary>
            ID: some results from the sources have been filtered.
            </summary>
        </member>
        <member name="F:Emc.Documentum.FS.DataModel.Core.Query.RepositoryEventId.FOUND">
            <summary>
            ID: Some results have been extracted from the backend returned data.
            </summary>
        </member>
        <member name="F:Emc.Documentum.FS.DataModel.Core.Query.RepositoryEventId.HIT_COUNT">
            <summary>
            ID: total number of results available on the source for the query.
            </summary>
        </member>
        <member name="F:Emc.Documentum.FS.DataModel.Core.Query.RepositoryEventId.INTERNAL">
            <summary>
            ID: message about internal working.
            </summary>
        </member>
        <member name="F:Emc.Documentum.FS.DataModel.Core.Query.RepositoryEventId.PARSED">
            <summary>
            ID: The data returned by the backend is being parsed.
            </summary>
        </member>
        <member name="F:Emc.Documentum.FS.DataModel.Core.Query.RepositoryEventId.TRANSLATION">
            <summary>
            ID: to display CLIR translation in monitor history.
            </summary>
        </member>
        <member name="F:Emc.Documentum.FS.DataModel.Core.Query.RepositoryEventId.TRUNCATED">
            <summary>
            ID: the results have been truncated.
            </summary>
        </member>
        <member name="T:Emc.Documentum.FS.DataModel.Core.Query.RepositoryEventSubId">
            <summary>
            </summary>
        </member>
        <member name="F:Emc.Documentum.FS.DataModel.Core.Query.RepositoryEventSubId.BROKENADAPTER">
            <summary>
            ERROR SubID: The source associated with the query is mis-configured or and internal error occurred (missing
            configuration file, parsing error, ...).
            </summary>
        </member>
        <member name="F:Emc.Documentum.FS.DataModel.Core.Query.RepositoryEventSubId.COMPLETE">
            <summary>
            DONE SubID: (Default) The query is normally completed.
            </summary>
        </member>
        <member name="F:Emc.Documentum.FS.DataModel.Core.Query.RepositoryEventSubId.DEFAULT">
            <summary>
            Default subID value for all Events ID.
            </summary>
        </member>
        <member name="F:Emc.Documentum.FS.DataModel.Core.Query.RepositoryEventSubId.DISCARDED">
            <summary>
            FILTERED SubID: Some results were discarded because they didn't match the query constraints.
            </summary>
        </member>
        <member name="F:Emc.Documentum.FS.DataModel.Core.Query.RepositoryEventSubId.EXPIRY">
            <summary>
            ERROR SubID: The execution took too much time and was stopped.
            </summary>
        </member>
        <member name="F:Emc.Documentum.FS.DataModel.Core.Query.RepositoryEventSubId.EXT_SOURCE_UNAVAILABLE">
            <summary>
            ERROR SubID: Cannot connect to the external source server.
            </summary>
        </member>
        <member name="F:Emc.Documentum.FS.DataModel.Core.Query.RepositoryEventSubId.FACET_DEFINITION_ERROR">
            <summary>
            There is a problem with one or several facet definitions defined in the query.
            </summary>
        </member>
        <member name="F:Emc.Documentum.FS.DataModel.Core.Query.RepositoryEventSubId.FULLTEXT_ISSUE">
            <summary>
            ERROR SubID: There was an error with the full-text search.
            </summary>
        </member>
        <member name="F:Emc.Documentum.FS.DataModel.Core.Query.RepositoryEventSubId.LOGINFAILED">
            <summary>
            ERROR SubID: The action could not be processed because the adapter was unable to log-on (that is, wrong login
            name or password).
            </summary>
        </member>
        <member name="F:Emc.Documentum.FS.DataModel.Core.Query.RepositoryEventSubId.NATIVEQUERY">
            <summary>
            INTERNAL SubID: The adapter provides a String representation of the query sent to the source.
            </summary>
        </member>
        <member name="F:Emc.Documentum.FS.DataModel.Core.Query.RepositoryEventSubId.NOTCONSTRAINED">
            <summary>
            ERROR SubID: (Default) The query cannot be processed because the query expression is not supported by the
            source.
            </summary>
        </member>
        <member name="F:Emc.Documentum.FS.DataModel.Core.Query.RepositoryEventSubId.OVERLOADED">
            <summary>
            ERROR SubID: The remote source is not available right now, try later.
            </summary>
        </member>
        <member name="F:Emc.Documentum.FS.DataModel.Core.Query.RepositoryEventSubId.QUERY_SCOPE_UNREACHABLE">
            <summary>
            ERROR SubID: Cannot reach at least one query scope, and the query returned 0 result.
            </summary>
        </member>
        <member name="F:Emc.Documentum.FS.DataModel.Core.Query.RepositoryEventSubId.QUERY_SYNTAX_NOT_VALID">
            <summary>
            ERROR SubID: The syntax used to express the query is not valid.
            </summary>
        </member>
        <member name="F:Emc.Documentum.FS.DataModel.Core.Query.RepositoryEventSubId.RECOVERY">
            <summary>
            INTERNAL SubID: The adapter stepped into recovery mode.
            </summary>
        </member>
        <member name="F:Emc.Documentum.FS.DataModel.Core.Query.RepositoryEventSubId.STOPPED">
            <summary>
            DONE SubID: The query was successfully stopped.
            </summary>
        </member>
        <member name="F:Emc.Documentum.FS.DataModel.Core.Query.RepositoryEventSubId.TOOMANYRESULTS">
            <summary>
            ERROR SubID: The query would return too many results, try to be more specific.
            </summary>
        </member>
        <member name="F:Emc.Documentum.FS.DataModel.Core.Query.RepositoryEventSubId.TYPE_NOT_SUPPORTED">
            <summary>
            ERROR SubID: The source does not support the query object type.
            </summary>
        </member>
        <member name="F:Emc.Documentum.FS.DataModel.Core.Query.RepositoryEventSubId.UNAVAILABLE">
            <summary>
            ERROR SubID: The source is not available.
            </summary>
        </member>
        <member name="F:Emc.Documentum.FS.DataModel.Core.Query.RepositoryEventSubId.UNKNOWN">
            <summary>
            ERROR SubID: There was an uncaught exception during the query processing.
            </summary>
        </member>
        <member name="F:Emc.Documentum.FS.DataModel.Core.Query.RepositoryEventSubId.UNREACHABLE">
            <summary>
            ERROR SubID: The action could not be processed because it failed too to connect to the source (network problem).
            </summary>
        </member>
        <member name="F:Emc.Documentum.FS.DataModel.Core.Query.RepositoryEventSubId.UNSUPPORTED_ATTRIBUTE_ERROR">
            <summary>
            ERROR SubID: A query attribute is not correct or not supported.
            </summary>
        </member>
        <member name="F:Emc.Documentum.FS.DataModel.Core.Query.RepositoryEventSubId.WILDCARD_SYNTAX_ERROR">
            <summary>
            ERROR SubID: The syntax used to express a wildcard search is not correct or not supported.
            </summary>
        </member>
        <member name="T:Emc.Documentum.FS.DataModel.Core.Query.RepositoryProperty">
            <summary>
            Aggregates all capabilities of a Repository (HomeUrl, description, supported Capabilities)
            </summary>
            <seealso cref="T:Emc.Documentum.FS.DataModel.Core.Query.Repository">Repository</seealso>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Query.RepositoryProperty.HomeUrl">
            <summary>
            The repository home page, where one can find either
            a standard web search interface or a detailed description of the source.
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Query.RepositoryProperty.Description">
            <summary>
            Non localized description of the Repository.
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Query.RepositoryProperty.LogicalOrExpressionSetCapability">
            <summary>
            The repository supports expressions sets with OR operator.
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Query.RepositoryProperty.HiddenObjectsCapability">
            <summary>
            States whether the repository supports hidden objects searching.
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Query.RepositoryProperty.AllVersionsCapability">
            <summary>
            Gets/Sets whether the repository can return all versions of a single object.
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Query.RepositoryProperty.DuplicateRemovalCapabilities">
            <summary>
            Gets/Sets whether the repository can remove duplicates from the results set.
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Query.RepositoryProperty.FtDQLCapability">
            <summary>
            Gets/Sets whether the repository supports FTDQL.
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Query.RepositoryProperty.TryFTDQLFirstCapability">
            <summary>
            Gets/Sets whether the repository supports "try FTDQL first" hint,
            to switch to a database search in case of FTDQL error.
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Query.RepositoryProperty.LoginCapability">
            <summary>
            Gets/Sets whether the repository needs credentials to launch searches.
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Query.RepositoryProperty.UserLoginCapability">
            <summary>
            Gets/Sets whether the repository needs user credentials to launch searches.<br/>
            (Otherwise, system credentials or guest credentials can be used to prevent the final user from having to specify its own).<br/>
            Note: Specifying user credentials can potentially grant higher access rights.
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Query.RepositoryProperty.DefaultLoginCapability">
            <summary>
            Gets/Sets whether the repository is configured with default credentials to launch searches.<br/>
            Default credentials might grant lower access rights than personal credentials.
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Query.RepositoryProperty.FacetsCapability">
            <summary>
            A String representation of true if the repository supports facets computing or false otherwise.
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Query.RepositoryProperty.MetadataWildcardsCapability">
            <summary>
            A String representation of true if the repository supports metadata wildcard or false otherwise.
            </summary>
        </member>
        <member name="T:Emc.Documentum.FS.DataModel.Core.Query.RepositoryScope">
            <summary>
            The RepositoryScope is used to limit the Search to a specified folder against a specific source.<br/>
            According to DFC's API, the repositoryScope is ignored if its associated source is not included in the search targeted repositories.
            </summary>
            <seealso cref="T:Emc.Documentum.FS.DataModel.Core.Query.Repository">Repository</seealso>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Query.RepositoryScope.RepositoryName">
            <summary>
            Repository name this Scope applies to.
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Query.RepositoryScope.LocationPath">
            <summary>
            The location path to consider for this RepositoryScope.
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Query.RepositoryScope.IsDescend">
            <summary>
            Defines if the folder should also include descendants folders or not.
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Query.RepositoryScope.IsExcluded">
            <summary>
            Defines if the results in this location should be excluded from the search results.
            </summary>
        </member>
        <member name="T:Emc.Documentum.FS.DataModel.Core.Query.RepositoryStatus">
            <summary>
            RepositoryStatus enum specifies the detailedStatus of the <see cref="T:Emc.Documentum.FS.DataModel.Core.Query.RepositoryStatusInfo"/>.
            </summary>
        </member>
        <member name="F:Emc.Documentum.FS.DataModel.Core.Query.RepositoryStatus.TRUNCATED">
            <summary>
            Indicates that the results have been truncated.
            </summary>
        </member>
        <member name="F:Emc.Documentum.FS.DataModel.Core.Query.RepositoryStatus.INTERNAL_FAILURE">
            <summary>
            Indicates that an internal error occurred, possibly due to an uncaught exception or an unavailable source.
            </summary>
        </member>
        <member name="F:Emc.Documentum.FS.DataModel.Core.Query.RepositoryStatus.NOT_CONSTRAINED">
            <summary>
            Indicates that the query was not sent to the source because the query properties are not supported by the source.
            </summary>
        </member>
        <member name="F:Emc.Documentum.FS.DataModel.Core.Query.RepositoryStatus.UNREACHABLE">
            <summary>
            Indicates that the query could not be processed because it failed too many times to connect to the source (network problem).
            </summary>
        </member>
        <member name="F:Emc.Documentum.FS.DataModel.Core.Query.RepositoryStatus.LOGIN_FAILED">
            <summary>
            Indicates that the query could not be sent to the source because of an authentification failure (wrong password).
            </summary>
        </member>
        <member name="F:Emc.Documentum.FS.DataModel.Core.Query.RepositoryStatus.COULD_NOT_FETCH">
            <summary>
            Indicates that the query could not be sent to the server because of an IO error.
            </summary>
        </member>
        <member name="F:Emc.Documentum.FS.DataModel.Core.Query.RepositoryStatus.EXT_SOURCE_UNAVAILABLE">
            <summary>
            Indicates that the connection with the external source was broken and the query could not complete properly.
            </summary>
        </member>
        <member name="F:Emc.Documentum.FS.DataModel.Core.Query.RepositoryStatus.UNAVAILABLE">
            <summary>
            Indicates that the source is not available. It may be temporary down or mispelled.
            </summary>
        </member>
        <member name="F:Emc.Documentum.FS.DataModel.Core.Query.RepositoryStatus.QUERY_SCOPE_UNREACHABLE">
            <summary>
            Indicates that at least one query scope is unreachable (either not found or no access permission).
            </summary>
        </member>
        <member name="F:Emc.Documentum.FS.DataModel.Core.Query.RepositoryStatus.WAS_STOPPED">
            <summary>
            Indicates that the query was stopped by the user and did not answer fast enough to be successful.
            </summary>
        </member>
        <member name="F:Emc.Documentum.FS.DataModel.Core.Query.RepositoryStatus.EXPIRED">
            <summary>
            Indicates that the query execution has taken too much time and has been stopped by the system.
            </summary>
        </member>
        <member name="F:Emc.Documentum.FS.DataModel.Core.Query.RepositoryStatus.TYPE_NOT_SUPPORTED">
            <summary>
            Indicates that the source does not support the query object type.
            </summary>
        </member>
        <member name="F:Emc.Documentum.FS.DataModel.Core.Query.RepositoryStatus.OVERLOADED">
            <summary>
            Indicates that the remote source is not available right now, try later.
            </summary>
        </member>
        <member name="F:Emc.Documentum.FS.DataModel.Core.Query.RepositoryStatus.TOO_MANY_RESULTS">
            <summary>
            The query would return too many results, try to be more specific.
            </summary>
        </member>
        <member name="F:Emc.Documentum.FS.DataModel.Core.Query.RepositoryStatus.QUERY_SYNTAX_NOT_VALID">
            <summary>
            The query syntax is not valid
            </summary>
        </member>
        <member name="F:Emc.Documentum.FS.DataModel.Core.Query.RepositoryStatus.WILDCARD_SYNTAX_ERROR">
            <summary>
            Unsupported wild card syntax
            </summary>
        </member>
        <member name="F:Emc.Documentum.FS.DataModel.Core.Query.RepositoryStatus.UNSUPPORTED_ATTRIBUTE_ERROR">
            <summary>
            Unsupported attribute error
            </summary>
        </member>
        <member name="F:Emc.Documentum.FS.DataModel.Core.Query.RepositoryStatus.FACET_DEFINITION_ERROR">
            <summary>
            Facet definition error
            </summary>
        </member>
        <member name="T:Emc.Documentum.FS.DataModel.Core.Query.RepositoryStatusInfo">
            <summary>
            The RepositoryStatusInfo aggregates the information on how the search executed on a single repository.<br/>
            This object is returned as a report after a call to the SearchService.
            </summary>
            <seealso cref="T:Emc.Documentum.FS.DataModel.Core.Query.QueryStatus">QueryStatus</seealso>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Query.RepositoryStatusInfo.ErrorTrace">
            <summary>
            The full stack trace of the error for debugging purposes.
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Query.RepositoryStatusInfo.RepositoryEvents">
            <summary>
            The list of events that occurred during the search execution.
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Query.RepositoryStatusInfo.Name">
            <summary>
            The Repository name this Status applies to.
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Query.RepositoryStatusInfo.Status">
            <summary>
            The main Status for this Repository.
            </summary>
            <seealso cref="P:Emc.Documentum.FS.DataModel.Core.Query.RepositoryStatusInfo.DetailedStatus">DetailedStatus</seealso>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Query.RepositoryStatusInfo.statusSpecified">
            <remarks/>
            <exclude/>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Query.RepositoryStatusInfo.DetailedStatus">
            <summary>
            The detailed Status of the query execution against the associated repository.<br/>
            The detailed Status can be used whatever the main Status is (SUCCESS or FAILURE).<br/>
            It can also be null.
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Query.RepositoryStatusInfo.detailedStatusSpecified">
            <remarks/>
            <exclude/>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Query.RepositoryStatusInfo.ErrorMessage">
            <summary>
            The Error Message if it exists.
            Contains <code>null</code> or The non localized error message for debugging purpose.
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Query.RepositoryStatusInfo.HitCount">
            <summary>
            The total number of objects matching the Query in the associated repository.<br/><br/>
            Note: The number of returned object is likely to be lower than the HitCount,
            because of the system internal limits configured for performance or optimization reasons.
            Contains The positive number of matching objects or -1 if this capability is not supported by the repository.
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Query.RepositoryStatusInfo.ResultsCount">
            <summary>
            The number of objects returned from the defined repository for the Query.<br/>
            <br/>
            Note: In case of multi repository query,
            the number of objects effectively returned in the QueryResult's dataPackage can be lower than this value,
            depending on the starting index and order of arrival.
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Query.RepositoryStatusInfo.HasMoreResults">
            <summary>
            Contains true if the Repository can be asked for more results.
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Query.RepositoryStatusInfo.IsFacetRetrieved">
            <summary>
            True if DSS has retrieved the facets, false otherwise.
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Query.RepositoryStatusInfo.IsFacetResultsTruncated">
            <summary>
            True if the facets have been computed on a limited results set, false otherwise.
            </summary>
        </member>
        <member name="T:Emc.Documentum.FS.DataModel.Core.Query.RepositoryType">
            <summary>
            Defines the type of a Repository.<br/>
            MANAGED repositories have additional capabilities<br/>
            EXTERNAL repositories can only be accessed through ECI Services option.
            </summary>
            <seealso cref="T:Emc.Documentum.FS.DataModel.Core.Query.Repository">Repository</seealso>
        </member>
        <member name="F:Emc.Documentum.FS.DataModel.Core.Query.RepositoryType.MANAGED">
            <summary>
            MANAGED repositories have additional capabilities.
            </summary>
        </member>
        <member name="F:Emc.Documentum.FS.DataModel.Core.Query.RepositoryType.EXTERNAL">
            <summary>
            EXTERNAL repositories can only be accessed through ECI Services option.
            </summary>
        </member>
        <member name="T:Emc.Documentum.FS.DataModel.Core.Query.RichQuery">
            <summary>
             <B>Purpose</B>: Defines a query definition with associated client properties.
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Query.RichQuery.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Query.RichQuery.#ctor(Emc.Documentum.FS.DataModel.Core.Query.Query)">
            <summary>
            Constructs a RichQuery from the specified Query with no client properties and no displayed attributes.
            </summary>
            <param name="query">the query definition</param>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Query.RichQuery.Query">
            <summary>
            The query definition. The query definition should not be a simple Query object but one of its subclasses.
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Query.RichQuery.DisplayedAttributes">
            <summary>
            The attributes that should be displayed for this query results.
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Query.RichQuery.PropertySet">
            <summary>
            The client custom properties that are associated with the query.
            </summary>
        </member>
        <member name="T:Emc.Documentum.FS.DataModel.Core.Query.SavedQuery">
            <summary>
            <B>Purpose</B>: This object handles a query saved in the repository.
            It provides accesses to the saved query metadata (name and description) as well as its contents (query definition and results).
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Query.SavedQuery.RichQuery">
            <summary>
            The query definition and its associated client properties stored as this saved query.
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Query.SavedQuery.QueryResult">
            <summary>
            The results and statuses that were saved with this query.
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Query.SavedQuery.Name">
            <summary>
            The name of this saved Query.
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Query.SavedQuery.Description">
            <summary>
            The description of the saved query.
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Query.SavedQuery.QueryType">
            <summary>
            QueryType of the saved query.
            To pass this object as a parameter to any services,
            use QueryType.STRUCTURED type when the underlying query definition is a StructuredQuery and
            use QueryType.PASSTHROUGH when it is a PassthroughQuery.
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Query.SavedQuery.queryTypeSpecified">
            <exclude/>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Query.SavedQuery.SavedWithResults">
            <summary>
            Defines weither results are to be saved with this Query.
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Query.SavedQuery.ResultCount">
            <summary>
            The number of results saved with this query.
            Set to -1 to prevent from saving any result.
            </summary>
        </member>
        <member name="T:Emc.Documentum.FS.DataModel.Core.Query.SavedQueryAccessibility">
            <summary>
            <B>Purpose</B>: Defines the Accessibility of the saved queries to filter.
            </summary>
        </member>
        <member name="F:Emc.Documentum.FS.DataModel.Core.Query.SavedQueryAccessibility.OWNED">
            <summary>
            OWNED to be used to list only the saved queries that are owned by the current user.
            </summary>
        </member>
        <member name="F:Emc.Documentum.FS.DataModel.Core.Query.SavedQueryAccessibility.ALL">
            <summary>
            ALL to be used to list all public saved queries including the current user ones.
            </summary>
        </member>
        <member name="T:Emc.Documentum.FS.DataModel.Core.Query.SavedQueryFilter">
            <summary>
            <B>Purpose</B>: Defines a filter to restrict the saved query to return.
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Query.SavedQueryFilter.#ctor">
            <summary>
            Constructs a SavedQueryFilter object using the default Accessibility parameter: SavedQueryAccessibility.ALL.
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Query.SavedQueryFilter.#ctor(Emc.Documentum.FS.DataModel.Core.Query.SavedQueryAccessibility)">
            <summary>
            Constructs a SavedQueryFilter object using the specified Accessibility parameter.
            </summary>
            <param name="queryAccessibility">a SavedQueryAccessibility object</param>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Query.SavedQueryFilter.Accessibility">
            <summary>
            The Accessibility filter to use in this filter to match either ALL public queries or only Owned queries by the current user.
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Query.SavedQueryFilter.accessibilitySpecified">
            <exclude/>
        </member>
        <member name="T:Emc.Documentum.FS.DataModel.Core.Query.Server">
            <summary>
            The Server objects describe the properties of a content server of one repository.
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Query.Server.Name">
            <summary>
            The name of this content server.
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Query.Server.Hostname">
            <summary>
            The host name of this content server.
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Query.Server.Version">
            <summary>
            The version of this content server.
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Query.Server.Docbroker">
            <summary>
            The host name of this content server's docbroker.
            </summary>
        </member>
        <member name="T:Emc.Documentum.FS.DataModel.Shared.Query.Server">
            <summary>
            The Server objects describe the properties of a content server of one repository.
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Shared.Query.Server.#ctor">
            <summary>
            Default Constructor.
            </summary>
        </member>
        <member name="T:Emc.Documentum.FS.DataModel.Core.Query.SimpleValue">
            <summary>
            Handles a simple String value that can be linked to a PropertyEpression.
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Query.SimpleValue.#ctor">
            <summary>
            Creates a Simple empty String Value.
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Query.SimpleValue.#ctor(System.String)">
            <summary>
            Creates a SimpleValue using the specified value.
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Query.SimpleValue.Value">
            <summary>
            String value.
            </summary>
        </member>
        <member name="T:Emc.Documentum.FS.DataModel.Core.Query.Status">
            <summary>
             Defines the main Status of the query execution against a single repository.
            </summary>
            <seealso cref="T:Emc.Documentum.FS.DataModel.Core.Query.RepositoryStatusInfo">RepositoryStatusInfo</seealso>
        </member>
        <member name="F:Emc.Documentum.FS.DataModel.Core.Query.Status.SUCCESS">
            <summary>
            Indicates that the query is done and was successful.
            </summary>
        </member>
        <member name="F:Emc.Documentum.FS.DataModel.Core.Query.Status.FAILURE">
            <summary>
            Indicates that the query has failed.
            </summary>
        </member>
        <member name="F:Emc.Documentum.FS.DataModel.Core.Query.Status.RUNNING">
            <summary>
            Indicates that the query is still running, waiting or receiving results.
            </summary>
        </member>
        <member name="F:Emc.Documentum.FS.DataModel.Core.Query.Status.STOPPED">
            <summary>
            Indicates that the query has been stopped.
            </summary>
        </member>
        <member name="T:Emc.Documentum.FS.DataModel.Core.Query.StructuredQuery">
            <summary>
            The StructuredQuery object defines a query on a single type.<br/>
            This Structured Query can be launched against both <code>MANAGED</code> and <code>EXTERNAL</code> repositories.
            </summary>
            <seealso cref="T:Emc.Documentum.FS.DataModel.Core.Query.RepositoryType">RepositoryType</seealso>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Query.StructuredQuery.#ctor">
            <summary>
            Default Constructor with empty repository list and scopes.
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Query.StructuredQuery.AddOrderByClause(Emc.Documentum.FS.DataModel.Core.Query.OrderByClause)">
            <summary>
            Add an order by clause to the query
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Query.StructuredQuery.AddFacetDefinition(Emc.Documentum.FS.DataModel.Core.Query.FacetDefinition)">
            <summary>
            Adds a facet definition to the list of facet definitions.
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Query.StructuredQuery.Scopes">
            <summary>
            List of Scopes associated to the query.
            If a Scope is linked to a repository that is not queried, it will simply be ignored.
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Query.StructuredQuery.PartitionScopes">
            <summary>
            List of partition Scopes associated to the query.
            If a Scope is linked to a repository that is not queried, it will simply be ignored.
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Query.StructuredQuery.ExpressionScopes">
            <summary>
            List of expression scopes to associate to the query.
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Query.StructuredQuery.RootExpressionSet">
            <summary>
            Representing ExpressionSet at the root of the tree.
            This ExpressionSet can be used to add new Expressions to the query.
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Query.StructuredQuery.OrderByClauses">
            <summary>
            The query order by clauses
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Query.StructuredQuery.FacetDefinitions">
            <summary>
            List of FacetDefinition for this query.
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Query.StructuredQuery.ObjectType">
            <summary>
            Sets the object_type to look for.
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Query.StructuredQuery.DateFormat">
            <summary>
            The dateFormat that will be used to represent dates as Strings.<br/>
            Example:
            Check for the DFC's javadoc for a complete list of supported formats.
            It is strongly recommended to use a format with the minutes details
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Query.StructuredQuery.IsDatabaseSearch">
            <summary>
            Sets/Gets the databaseSearch flag to that query
            to force it to be run directly against the Database
            (i.e. skipping the Full-Text indexer).<br/>
            Default is false.
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Query.StructuredQuery.IsIncludeAllVersions">
            <summary>
            The includeAllVersions flag to include to the results all matching versions for every object.<br/>
            Default is false.
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Query.StructuredQuery.IsIncludeHidden">
            <summary>
            Defines if hidden object should be filtered from the results set.
            Default is false.
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Query.StructuredQuery.MaxResultsForFacets">
            <summary>
            The maximum number of results used to compute facets.
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Query.StructuredQuery.IsHitcountRetrieved">
            <summary>
            Whether the hitcount should be computed even when no facets are requested.
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Query.StructuredQuery.MaxHitcount">
            <summary>
            The maximum number of results to be count and returned as the hitcount.
            </summary>
        </member>
        <member name="T:Emc.Documentum.FS.DataModel.Core.Query.TimeUnit">
            <summary>
            Allows to define the time Unit used by a RelativeDateValue.
            </summary>
            <seealso cref="T:Emc.Documentum.FS.DataModel.Core.Query.RelativeDateValue">RelativeDateValue</seealso>
        </member>
        <member name="F:Emc.Documentum.FS.DataModel.Core.Query.TimeUnit.MILLISECOND">
            <summary>
            Indicates the millisecond unit within the second.
            </summary>
        </member>
        <member name="F:Emc.Documentum.FS.DataModel.Core.Query.TimeUnit.SECOND">
            <summary>
            Indicates the second unit within the minute.
            </summary>
        </member>
        <member name="F:Emc.Documentum.FS.DataModel.Core.Query.TimeUnit.MINUTE">
            <summary>
            Indicates the minute unit within the hour.
            </summary>
        </member>
        <member name="F:Emc.Documentum.FS.DataModel.Core.Query.TimeUnit.HOUR">
            <summary>
            Indicates the hour unit within the day.
            </summary>
        </member>
        <member name="F:Emc.Documentum.FS.DataModel.Core.Query.TimeUnit.DAY">
            <summary>
            Indicates the day unit within the month.
            </summary>
        </member>
        <member name="F:Emc.Documentum.FS.DataModel.Core.Query.TimeUnit.WEEK">
            <summary>
            Indicates the week unit within the month.
            </summary>
        </member>
        <member name="F:Emc.Documentum.FS.DataModel.Core.Query.TimeUnit.MONTH">
            <summary>
            Indicates the month unit.
            </summary>
        </member>
        <member name="F:Emc.Documentum.FS.DataModel.Core.Query.TimeUnit.YEAR">
            <summary>
            Indicates the year unit.
            </summary>
        </member>
        <member name="F:Emc.Documentum.FS.DataModel.Core.Query.TimeUnit.ERA">
            <summary>
            Indicates the era unit.
            </summary>
        </member>
        <member name="T:Emc.Documentum.FS.DataModel.Core.Query.ValueList">
            <summary>
            Defines a list of values to use in a PropertyExpression.
            </summary>
            <seealso cref="T:Emc.Documentum.FS.DataModel.Core.Query.PropertyExpression">PropertyExpression</seealso>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Query.ValueList.AddValue(System.String)">
            <summary>
            Adds a value to the existing list.
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Query.ValueList.Values">
            <summary>
            The list of String values. Cant be null.
            </summary>
        </member>
        <member name="T:Emc.Documentum.FS.DataModel.Core.Schema.DataType">
            <summary>
            Possible data types of an attribute
            </summary>
        </member>
        <member name="F:Emc.Documentum.FS.DataModel.Core.Schema.DataType.STRING">
            <remarks/>
        </member>
        <member name="F:Emc.Documentum.FS.DataModel.Core.Schema.DataType.SHORT">
            <remarks/>
        </member>
        <member name="F:Emc.Documentum.FS.DataModel.Core.Schema.DataType.INTEGER">
            <remarks/>
        </member>
        <member name="F:Emc.Documentum.FS.DataModel.Core.Schema.DataType.LONG">
            <remarks/>
        </member>
        <member name="F:Emc.Documentum.FS.DataModel.Core.Schema.DataType.DOUBLE">
            <remarks/>
        </member>
        <member name="F:Emc.Documentum.FS.DataModel.Core.Schema.DataType.DATE">
            <remarks/>
        </member>
        <member name="F:Emc.Documentum.FS.DataModel.Core.Schema.DataType.BOOLEAN">
            <remarks/>
        </member>
        <member name="F:Emc.Documentum.FS.DataModel.Core.Schema.DataType.OBJECT_ID">
            <remarks/>
        </member>
        <member name="F:Emc.Documentum.FS.DataModel.Core.Schema.DataType.CUSTOM">
            <remarks/>
        </member>
        <member name="T:Emc.Documentum.FS.DataModel.Core.Schema.PropertyDisplayInfo">
            <remarks/>
            <summary>
            The PropertyDisplayInfo represents information that controls the display of attributes in
            the user interface. <p/>
            Can represents property (main or secondary) or a separator.
            </summary>
            <seealso cref="T:Emc.Documentum.FS.DataModel.Core.Schema.PropertyDisplaySection">PropertyDisplaySection</seealso>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Schema.PropertyDisplayInfo.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Schema.PropertyDisplayInfo.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="propertyName">attribute name</param>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Schema.PropertyDisplayInfo.#ctor(System.String,System.Boolean,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="propertyName">attribute name</param>
            <param name="separator">indicates if this PropertyDisplayInfo represents a separator</param>
            <param name="secondary">indicates if this PropertyDisplayInfo represents a secondary or main property (if separator = false)</param>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Schema.PropertyDisplayInfo.PropertyName">
            <summary>
            Name of the property(attribute) to display
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Schema.PropertyDisplayInfo.IsSeparator">
            <summary>
            Declares if this item corresponds to a separator as opposed to a property.  If true, all other attributes are ignored.
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Schema.PropertyDisplayInfo.IsSecondary">
            <summary>
            Declares that property corresponding to this object can be display in a (More...) sub-section.
            </summary>
        </member>
        <member name="T:Emc.Documentum.FS.DataModel.Core.Schema.PropertyDisplaySection">
            <summary>
            The PropertyDisplaySection represents information that controls the display of attributes in
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Schema.PropertyDisplaySection.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Schema.PropertyDisplaySection.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="name">name of this display section</param>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Schema.PropertyDisplaySection.PropertyDisplayInfos">
            <summary>
            Displays information about attributes.<p/>
            Note: Values are supplied by <i>display_config.attribute_display_hint</i>
            </summary>
            <seealso cref="T:Emc.Documentum.FS.DataModel.Core.Schema.PropertyDisplayInfo">PropertyDisplayInfo</seealso>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Schema.PropertyDisplaySection.Name">
            <summary>
            The name of this display section.<br/>
            Note: Actually it is the <i>display_config.object_name</i> value
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Schema.PropertyDisplaySection.Label">
            <summary>
            The localized name of this display section.<br/>
            Note: It actually is a corresponding value from <i>dmi_dd_type_info.map_display_string</i>
            </summary>
        </member>
        <member name="T:Emc.Documentum.FS.DataModel.Core.Schema.PropertyInfo">
            <remarks/>
            <summary>
            The PropertyInfo encapsulates information about type`s attribute.
            </summary>
            <seealso cref="T:Emc.Documentum.FS.DataModel.Core.Schema.TypeInfo">TypeInfo</seealso>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Schema.PropertyInfo.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Schema.PropertyInfo.#ctor(System.String,System.String,System.String,Emc.Documentum.FS.DataModel.Core.Schema.DataType,System.Boolean,System.Boolean,System.Boolean,System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="name">the attribute (property) name</param>
            <param name="label">the localized attribute name</param>
            <param name="description">the attribute description</param>
            <param name="dataType">the property data type</param>
            <param name="array">is it repeating attribute?</param>
            <param name="searchable">is it searchable?</param>
            <param name="dynamic">is it dynamic?</param>
            <param name="length">the length of this attribute in the database</param>
            <param name="notNull">is it nullable?</param>
            <param name="required">is it required?</param>
            <param name="readOnly">is it read only?</param>
            <param name="hidden">is it hidden?</param>
            <param name="helpText">attribute`s commentary</param>
            <seealso cref="P:Emc.Documentum.FS.DataModel.Core.Schema.PropertyInfo.Name">Name</seealso>
            <seealso cref="P:Emc.Documentum.FS.DataModel.Core.Schema.PropertyInfo.Label">Label</seealso>
            <seealso cref="P:Emc.Documentum.FS.DataModel.Core.Schema.PropertyInfo.Description">Description</seealso>
            <seealso cref="P:Emc.Documentum.FS.DataModel.Core.Schema.PropertyInfo.DataType">DataType</seealso>
            <seealso cref="P:Emc.Documentum.FS.DataModel.Core.Schema.PropertyInfo.IsArray">IsArray</seealso>
            <seealso cref="P:Emc.Documentum.FS.DataModel.Core.Schema.PropertyInfo.IsSearchable">IsSearchable</seealso>
            <seealso cref="P:Emc.Documentum.FS.DataModel.Core.Schema.PropertyInfo.IsDynamic">IsDynamic</seealso>
            <seealso cref="P:Emc.Documentum.FS.DataModel.Core.Schema.PropertyInfo.Length">Length</seealso>
            <seealso cref="P:Emc.Documentum.FS.DataModel.Core.Schema.PropertyInfo.IsNotNull">IsNotNull</seealso>
            <seealso cref="P:Emc.Documentum.FS.DataModel.Core.Schema.PropertyInfo.IsRequired">IsRequired</seealso>
            <seealso cref="P:Emc.Documentum.FS.DataModel.Core.Schema.PropertyInfo.IsReadOnly">IsReadOnly</seealso>
            <seealso cref="P:Emc.Documentum.FS.DataModel.Core.Schema.PropertyInfo.IsHidden">IsHidden</seealso>
            <seealso cref="P:Emc.Documentum.FS.DataModel.Core.Schema.PropertyInfo.HelpText">HelpText</seealso>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Schema.PropertyInfo.#ctor(System.String,System.String,System.String,Emc.Documentum.FS.DataModel.Core.Schema.DataType,System.Boolean,System.Boolean,System.Boolean,System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.String,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="name">the attribute (property) name</param>
            <param name="label">the localized attribute name</param>
            <param name="description">the attribute description</param>
            <param name="dataType">the property data type</param>
            <param name="array">is it repeating attribute?</param>
            <param name="searchable">is it searchable?</param>
            <param name="dynamic">is it dynamic?</param>
            <param name="length">the length of this attribute in the database</param>
            <param name="notNull">is it nullable?</param>
            <param name="required">is it required?</param>
            <param name="readOnly">is it read only?</param>
            <param name="hidden">is it hidden?</param>
            <param name="helpText">attribute`s commentary</param>
            <param name="formatPattern">attribute`s format pattern</param>
            <seealso cref="P:Emc.Documentum.FS.DataModel.Core.Schema.PropertyInfo.Name">Name</seealso>
            <seealso cref="P:Emc.Documentum.FS.DataModel.Core.Schema.PropertyInfo.Label">Label</seealso>
            <seealso cref="P:Emc.Documentum.FS.DataModel.Core.Schema.PropertyInfo.Description">Description</seealso>
            <seealso cref="P:Emc.Documentum.FS.DataModel.Core.Schema.PropertyInfo.DataType">DataType</seealso>
            <seealso cref="P:Emc.Documentum.FS.DataModel.Core.Schema.PropertyInfo.IsArray">IsArray</seealso>
            <seealso cref="P:Emc.Documentum.FS.DataModel.Core.Schema.PropertyInfo.IsSearchable">IsSearchable</seealso>
            <seealso cref="P:Emc.Documentum.FS.DataModel.Core.Schema.PropertyInfo.IsDynamic">IsDynamic</seealso>
            <seealso cref="P:Emc.Documentum.FS.DataModel.Core.Schema.PropertyInfo.Length">Length</seealso>
            <seealso cref="P:Emc.Documentum.FS.DataModel.Core.Schema.PropertyInfo.IsNotNull">IsNotNull</seealso>
            <seealso cref="P:Emc.Documentum.FS.DataModel.Core.Schema.PropertyInfo.IsRequired">IsRequired</seealso>
            <seealso cref="P:Emc.Documentum.FS.DataModel.Core.Schema.PropertyInfo.IsReadOnly">IsReadOnly</seealso>
            <seealso cref="P:Emc.Documentum.FS.DataModel.Core.Schema.PropertyInfo.IsHidden">IsHidden</seealso>
            <seealso cref="P:Emc.Documentum.FS.DataModel.Core.Schema.PropertyInfo.HelpText">HelpText</seealso>
            <seealso cref="P:Emc.Documentum.FS.DataModel.Core.Schema.PropertyInfo.FormatPattern">FormatPattern</seealso>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Schema.PropertyInfo.DefaultValues">
            <summary>
            List of defaults values for this attribute
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Schema.PropertyInfo.SearchOperations">
            <summary>
            Search conditions allowed to this attribute
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Schema.PropertyInfo.ValueAssist">
            <summary>
            This property contains all allowed assistValues defined for this property.  It corresponds to a Default Value Assist.
            Typically, this list will be used for value assistance for all properties. <p/>
            Note: If property is "Dynamic",
            it may have dependencies (names of properties it depends on).  One needs to call
            <code>SchemaService.getDynamicAssistValues</code>
            and populate the property set with dependencies-based assistValues.  That method will return a subset of ValueInfo
            objects meaningful for the dependent assistValues.
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Schema.PropertyInfo.ValueMap">
            <summary>
            This property contains a complete map of "raw" assistValues to the corresponding localized display assistValues.
            Regardless of all value assistance, value map items will always contain a complete list of value map items.<p/>
            Note: It is supplied by <i>dmi_dd_attr_info.map_data_string</i> and <i>dmi_dd_attr_info.map_display_string</i>
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Schema.PropertyInfo.Dependencies">
            <summary>
            List of property names that can impact this property value info list. If these properties change in the object,
            it will be necessary to refresh the valueMap.  Dependencies are ignored if property is not "dynamic".
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Schema.PropertyInfo.Name">
            <summary>
            The attribute name.<p/>
            Note: It is supplied by <i>dmi_dd_attr_info.attr_name</i>
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Schema.PropertyInfo.Label">
            <summary>
            The localized full name of this attribute.<p/>
            Note: It is supplied by <i>dmi_dd_attr_info.label_text</i>
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Schema.PropertyInfo.Description">
            <summary>
            The localized description of this attribute.<p/>
            Note: It is supplied by <i>dmi_dd_attr_info.comment_text</i>
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Schema.PropertyInfo.DataType">
            <summary>
            Data type of this attribute.
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Schema.PropertyInfo.dataTypeSpecified">
            <remarks/>
            <exclude/>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Schema.PropertyInfo.IsArray">
            <summary>
            Shows if this attribute is a repeating attribute.
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Schema.PropertyInfo.IsSearchable">
            <summary>
            Shows if this attribute is searchable.
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Schema.PropertyInfo.IsDynamic">
            <summary>
            Shows if this attribute is dynamic. <br/>
            It is dynamic if it depends on other assistValues in the object.<p/>
            Note: It actually true if <see cref="P:Emc.Documentum.FS.DataModel.Core.Schema.PropertyInfo.Dependencies"/> list is not empty.
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Schema.PropertyInfo.Length">
            <summary>
            The length of this attribute in the database.
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Schema.PropertyInfo.IsNotNull">
            <summary>
            Shows if attribute is nullable.
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Schema.PropertyInfo.IsRequired">
            <summary>
            Shows if attribute is required.
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Schema.PropertyInfo.IsReadOnly">
            <summary>
            Shows if the attribute is read only (can`t be set by user).
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Schema.PropertyInfo.IsHidden">
            <summary>
            Shows if this attribute is hidden.
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Schema.PropertyInfo.HelpText">
            <summary>
            Help about this attribute<p/>
            Note: It is supplied by <i>dmi_dd_attr_info.help_text</i>
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Schema.PropertyInfo.FormatPattern">
            <summary>
            Format pattern about this attribute<p/>
            Note: It is supplied by <i>dmi_dd_attr_info.format_pattern</i>
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Schema.PropertyInfo.DefaultCondition">
            <summary>
            Default search condition.
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Schema.PropertyInfo.mDefaultConditionSpecified">
            <remarks/>
            <exclude/>
        </member>
        <member name="T:Emc.Documentum.FS.DataModel.Core.Schema.PropertyInfoFilter">
            <summary>
            PropertyInfoFilter enum provides control over what Properties in a TypeInfo will be returned.
            </summary>
        </member>
        <member name="F:Emc.Documentum.FS.DataModel.Core.Schema.PropertyInfoFilter.NONE">
            <summary>
            No properties will be included.
            </summary>
        </member>
        <member name="F:Emc.Documentum.FS.DataModel.Core.Schema.PropertyInfoFilter.NON_INHERITED">
            <summary>
            PropertyInfoFilter enum provides control over what Properties in a TypeInfo will be returned.
            </summary>
        </member>
        <member name="F:Emc.Documentum.FS.DataModel.Core.Schema.PropertyInfoFilter.DISPLAY_CONFIG">
            <summary>
            Only display properties will be included.
            </summary>
        </member>
        <member name="F:Emc.Documentum.FS.DataModel.Core.Schema.PropertyInfoFilter.ALL">
            <summary>
            All properties will be included.
            </summary>
        </member>
        <member name="T:Emc.Documentum.FS.DataModel.Core.Schema.RelationshipDegree">
            <summary>
            The RelationshipDegree enumerates the possible relationship degrees.
            </summary>
        </member>
        <member name="F:Emc.Documentum.FS.DataModel.Core.Schema.RelationshipDegree.MANY_TO_MANY">
            <remarks/>
        </member>
        <member name="F:Emc.Documentum.FS.DataModel.Core.Schema.RelationshipDegree.ONE_TO_MANY">
            <remarks/>
        </member>
        <member name="F:Emc.Documentum.FS.DataModel.Core.Schema.RelationshipDegree.ONE_TO_ONE">
            <remarks/>
        </member>
        <member name="T:Emc.Documentum.FS.DataModel.Core.Schema.RelationshipInfo">
            <summary>
            The RelationshipInfo provides information about relationships supported by a given "current" type or a corresponding
            object instance. Type can have more "supported" relationships and instance can have extra constraints.
            In any case, relationships are resolved based on the "current" type (explicitly specified or derived from instance).
            </summary>
            <seealso cref="T:Emc.Documentum.FS.DataModel.Core.Schema.TypeInfo">TypeInfo</seealso>
            <seealso cref="T:Emc.Documentum.FS.DataModel.Core.Schema.SchemaInfo">SchemaInfo</seealso>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Schema.RelationshipInfo.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Schema.RelationshipInfo.#ctor(System.String,System.String,System.String,System.String,System.String,System.String,System.String,Emc.Documentum.FS.DataModel.Core.Schema.RelationshipDegree,System.Collections.Generic.List{Emc.Documentum.FS.DataModel.Core.Schema.PropertyInfo})">
            <summary>
            Constructor
            </summary>
            <param name="name">the name of relationship</param>
            <param name="label">the localized name of the relationship</param>
            <param name="description">the localized description of relationship</param>
            <param name="currentType">given type</param>
            <param name="currentTypeRole">given type role</param>
            <param name="targetType">target type</param>
            <param name="targetTypeRole">target type role</param>
            <param name="degree">relationship degree</param>
            <param name="propertyInfos">properties information</param>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Schema.RelationshipInfo.PropertyInfos">
            <summary>
            List of properties information<p/>
            Note: It actually is not supported.
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Schema.RelationshipInfo.Name">
            <summary>
            The name of this relationship
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Schema.RelationshipInfo.Label">
            <summary>
            Localized name of this relationship.<p/>
            Note: It actually is not supported in this version of DFS.
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Schema.RelationshipInfo.Description">
            <summary>
            Relationship description
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Schema.RelationshipInfo.CurrentType">
            <summary>
            Given type
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Schema.RelationshipInfo.CurrentTypeRole">
            <summary>
            Given type relationship role.<p/>
            Actually can be:
            <li> "child" </li>
            <li> "parent" </li>
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Schema.RelationshipInfo.TargetType">
            <summary>
            Target type (the type that is referenced by given-current type).
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Schema.RelationshipInfo.TargetTypeRole">
            <summary>
            Target type relationship role.
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Schema.RelationshipInfo.Degree">
            <summary>
            Relationship degree
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Schema.RelationshipInfo.degreeSpecified">
            <exclude/>
        </member>
        <member name="T:Emc.Documentum.FS.DataModel.Core.Schema.RepositoryInfo">
            <summary>
            The RepositoryInfo encapsulates data about repositories.
            </summary>
            <seealso cref="T:Emc.Documentum.FS.DataModel.Core.Schema.SchemaInfo">SchemaInfo</seealso>
            <seealso cref="T:Emc.Documentum.FS.DataModel.Core.Schema.TypeInfo">TypeInfo</seealso>
            <seealso cref="T:Emc.Documentum.FS.DataModel.Core.Schema.PropertyInfo">PropertyInfo</seealso>
        </member>
        <member name="F:Emc.Documentum.FS.DataModel.Core.Schema.RepositoryInfo.SCHEMA_NAME_DEFAULT">
            <summary>
            Default schema name
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Schema.RepositoryInfo.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Schema.RepositoryInfo.#ctor(System.String,System.String,System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            Constructor
            </summary>
            <param name="name">the name of repository</param>
            <param name="label">the localized name of repository</param>
            <param name="description">the localized description of the repository</param>
            <param name="defaultSchemaName">the name of default schema</param>
            <param name="schemaNames">the schema names that are accessible within the repository</param>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Schema.RepositoryInfo.SchemaNames">
            <summary>
            Schema names that are accessible within the repository. <p/>
            Note: It actually is not supported yet. Always returns only one value -><i>"DEFAULT"</i>
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Schema.RepositoryInfo.Name">
            <summary>
            Repository name
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Schema.RepositoryInfo.Label">
            <summary>
            Localized full name of the repository<p/>
            Note: It actually is not supported in this version of DFS. Returns value is identical to <see cref="P:Emc.Documentum.FS.DataModel.Core.Schema.RepositoryInfo.Description"/>
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Schema.RepositoryInfo.Description">
            <summary>
            Localized description of the repository
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Schema.RepositoryInfo.DefaultSchemaName">
            <summary>
            Default schema of repository.<p/>
            Note: It actually is not supported yet. Always returns <see cref="F:Emc.Documentum.FS.DataModel.Core.Schema.RepositoryInfo.SCHEMA_NAME_DEFAULT"/>
            </summary>
        </member>
        <member name="T:Emc.Documentum.FS.DataModel.Core.Schema.SchemaInfo">
            <summary>
            The SchemaInfo encapsulates information about groups of types - schemes. <p/>
            Note: The schemes actually are not supported yet. There is only one schema ("DEFAULT") that contains all the types defined in the repository.
            </summary>
            <seealso cref="T:Emc.Documentum.FS.DataModel.Core.Schema.TypeInfo">TypeInfo</seealso>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Schema.SchemaInfo.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Schema.SchemaInfo.#ctor(System.String,System.String,System.String,System.Collections.Generic.List{Emc.Documentum.FS.DataModel.Core.Schema.TypeInfo})">
            <summary>
            Constructor
            </summary>
            <param name="name">the schema name</param>
            <param name="label">the localized schema name</param>
            <param name="description">the localized description</param>
            <param name="typeInfos">the types included into this schema</param>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Schema.SchemaInfo.TypeInfos">
            <summary>
            List of types included into the schema.
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Schema.SchemaInfo.Name">
            <summary>
            Schema name.
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Schema.SchemaInfo.Label">
            <summary>
            Localized full name of the schema. <p/>
            Note: It is not supported yet. The result is undefined.
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Schema.SchemaInfo.Description">
            <summary>
            Schema localized description. <p/>
            Note: It is not supported yet. The result is undefined.
            </summary>
        </member>
        <member name="T:Emc.Documentum.FS.DataModel.Core.Schema.TypeFilter">
            <remarks/>
            <summary>
            The TypeFilter is used to identify types to be returned.
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Schema.TypeFilter.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Schema.TypeFilter.#ctor(System.Collections.Generic.List{System.String},System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="typeNames">list of strings which indentifies which types will be retrieved</param>
            <param name="includeSubtypes">flag that controls either to include subtypes of the specified types in result or not</param> 
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Schema.TypeFilter.TypeNames">
            <remarks/>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Schema.TypeFilter.IncludeSubtypes">
            <remarks/>
        </member>
        <member name="T:Emc.Documentum.FS.DataModel.Core.Schema.TypeInfo">
            <summary>
            The TypeInfo encapsulates data about content server types.
            </summary>
            <seealso cref="T:Emc.Documentum.FS.DataModel.Core.Schema.PropertyInfo">PropertyInfo</seealso>
            <seealso cref="T:Emc.Documentum.FS.DataModel.Core.Schema.SchemaInfo">SchemaInfo</seealso>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Schema.TypeInfo.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Schema.TypeInfo.#ctor(System.String,System.String,System.String,System.String,System.Collections.Generic.List{Emc.Documentum.FS.DataModel.Core.Schema.PropertyInfo})">
            <summary>
            Constructor
            </summary>
            <param name="name">the type name</param>
            <param name="label">the localized type full name</param>
            <param name="description">localized description</param>
            <param name="parentName">the name of the parent type</param>
            <param name="propertyInfos">data about attributes</param>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Schema.TypeInfo.#ctor(System.String,System.String,System.String,System.String,System.Collections.Generic.List{Emc.Documentum.FS.DataModel.Core.Schema.PropertyInfo},System.Collections.Generic.List{Emc.Documentum.FS.DataModel.Core.Schema.TypeInfo})">
            <summary>
            Constructor
            </summary>
            <param name="name">the type name</param>
            <param name="label">the localized type full name</param>
            <param name="description">localized description</param>
            <param name="parentName">the name of the parent type</param>
            <param name="propertyInfos">data about attributes</param>
            <param name="subtypeInfos">sub type infos</param>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Schema.TypeInfo.SubtypeInfos">
            <summary>
            Sub types of current type.
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Schema.TypeInfo.PropertyInfos">
            <summary>
            Attributes data.<p/>
            Note: never returns null value.
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Schema.TypeInfo.PropertyDisplaySections">
            <summary>
            Data about display rules.<p/>
            Note: never returns null value.
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Schema.TypeInfo.RelationshipInfos">
            <summary>
            Data about type`s relationships. <p/>
            
            Note:
            <li>In order to include relationships you should set SchemaProfile's IncludeProperties to true.</li>
            <li>In order to filter relationships you should use RelationshipProfile.</li><br/>
            For example: <br/>
            <i>
            1) getSchemaService().getServiceContext().setProfile(
            new RelationshipProfile(null,
            RelationshipNameFilter.SPECIFIED,
            "relation name to return",
            TargetRoleFilter.SPECIFIED,
            "child", null, -1));<br/>
            TypeInfo typeInfo = getSchemaService().getTypeInfo(getEnv().getDefaultDocbaseName(), "default", "dm_document", null);</i><br/>
            <br/>That means that only relationships with name <i>"relation name to return"</i> and which have the given type
            (dm_document in this example) as a `child`
            will be returned by the SchemaService.<p/>
            2)<i>getSchemaService().getServiceContext().setProfile(
            new RelationshipProfile(null,
            null,
            null,
            TargetRoleFilter.SPECIFIED,
            "parent", null, -1));<br/>
            TypeInfo typeInfo = getSchemaService().getTypeInfo(getEnv().getDefaultDocbaseName(), "default", "dm_document", null);</i><p/>
            That means that only relationships which have the given type as a `parent` will be returned by the SchemaService.
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Schema.TypeInfo.Name">
            <summary>
            Type name
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Schema.TypeInfo.Label">
            <summary>
            Localized type full name
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Schema.TypeInfo.Description">
            <summary>
            Localized type description
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Schema.TypeInfo.ParentName">
            <summary>
            Name of the parent type
            </summary>
        </member>
        <member name="T:Emc.Documentum.FS.DataModel.Core.Schema.ValueAssist">
            <summary>
            The ValueAssist encapsulates data about attribute values that are supplied by value assistance. <br/>It is used within
            <see cref="T:Emc.Documentum.FS.DataModel.Core.Schema.PropertyInfo"/> and by SchemaService.GetDynamicAssistValues();
            </summary>
            <seealso cref="T:Emc.Documentum.FS.DataModel.Core.Schema.ValueInfo">ValueInfo</seealso>
            <seealso cref="T:Emc.Documentum.FS.DataModel.Core.Schema.PropertyInfo">PropertyInfo</seealso>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Schema.ValueAssist.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Schema.ValueAssist.#ctor(System.Boolean,System.Collections.Generic.List{System.String})">
            <summary>
            Constructor
            </summary>
            <param name="allowUserValues">indicates if user may add his custom values.</param>
            <param name="values">values that are allowed by the attribute</param>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Schema.ValueAssist.Values">
            <summary>
            Values that were returned by the value assistance.<p/>
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Schema.ValueAssist.IsAllowUserValues">
            <summary>
            True if user may add his custom values
            </summary>
        </member>
        <member name="T:Emc.Documentum.FS.DataModel.Core.Schema.ValueAssistRequest">
            <remarks/>
            <summary>
            The ValueAssistRequest is used in SchemaService to provide means of identifying the object for which the info is requested.
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Schema.ValueAssistRequest.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Schema.ValueAssistRequest.#ctor(System.Object)">
            <summary>
            Constructor.
            </summary>
            <param name="requestObject">requestObject - could be instance of two classes ObjectIdentity and ValueAssistTypeRequest, the instance
            will be used to retrieve the object for which Value Assist is requested, the 
            ValueAssistRequestType will be computed based on request object.</param>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Schema.ValueAssistRequest.RequestObject">
            <summary>
            The request object for value assist.
            when set the request object, it will automatically computes the type.
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Schema.ValueAssistRequest.Type">
            <summary>
            The request type. It may be modified if a new request object is set.
            Since setting a request object computes the request type there is no need for client to set the type.
            </summary>
        </member>
        <member name="T:Emc.Documentum.FS.DataModel.Core.Schema.ValueAssistRequestType">
            <summary>
            The ValueAssistRequestType enumerates the possible value assist request types.
            </summary>
        </member>
        <member name="F:Emc.Documentum.FS.DataModel.Core.Schema.ValueAssistRequestType.OBJECT_IDENTITY">
            <summary>
            Implies an object identity instance as request type, which will use an Sys Object for the property values 
            constrains. By default the repository properties of the object are used for computations.
            </summary>
        </member>
        <member name="F:Emc.Documentum.FS.DataModel.Core.Schema.ValueAssistRequestType.TYPE_IDENTIFIER">
            <summary>
            Implies an type identifier instance as request type, which will use Type definition for the property values 
            constrains. By default the defined initial values for the properties of the object are used for computations
            </summary>
        </member>
        <member name="F:Emc.Documentum.FS.DataModel.Core.Schema.ValueAssistRequestType.UNIDENTIFIED">
            <summary>
            Undefined type.
            </summary>
        </member>
        <member name="T:Emc.Documentum.FS.DataModel.Core.Schema.ValueAssistSnapshot">
            <remarks/>
            <summary>
            The ValueAssistSnapshot is used in SchemaService to hold the results of the property values constrain computations.
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Schema.ValueAssistSnapshot.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Schema.ValueAssistSnapshot.#ctor(System.String,System.String,System.Collections.Generic.List{Emc.Documentum.FS.DataModel.Core.Schema.PropertyInfo})">
            <summary>
            Constructor that initiates some of the fields in the class.
            </summary>
            <param name="repositoryName">repository name of the object for which the snapshot was done</param>
            <param name="typeName">type name of the object for which the snapshot was done</param>
            <param name="propertyInfos">property infos with value assist</param>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Schema.ValueAssistSnapshot.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Constructor that initiates some of the fields in the class.
            </summary>
            <param name="repositoryName">repository name of the object for which the snapshot was done</param>
            <param name="typeName">type name of the object for which the snapshot was done</param>
            <param name="policyId">lifecycle policy id of the object for which the snapshot was done</param>
            <param name="policyState">lifecycle policy state name of the object for which the snapshot was done</param>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Schema.ValueAssistSnapshot.PropertyInfos">
            <summary>
            Property infos with results of the property values constrain computations
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Schema.ValueAssistSnapshot.TypeName">
            <summary>
            TypeName of the object for which the snapshot was done.
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Schema.ValueAssistSnapshot.RepositoryName">
            <summary>
            RepositoryName where the type and lifecycle policy resides
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Schema.ValueAssistSnapshot.PolicyId">
            <summary>
            Lifecycle policyId that was used for the computations.
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Schema.ValueAssistSnapshot.PolicyState">
            <summary>
            Lifecycle policy state name that was used for the computations.
            </summary>
        </member>
        <member name="T:Emc.Documentum.FS.DataModel.Core.Schema.ValueAssistTypeIdentifier">
            <remarks/>
            <summary>
            The ValueAssistTypeIdentifier is used to identify a type in ValueAssistRequest.
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Schema.ValueAssistTypeIdentifier.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Schema.ValueAssistTypeIdentifier.#ctor(System.String,System.String)">
            <summary>
            Constructor that initializes all fields in the class.
            </summary>
            <param name="repositoryName">repository name where type is identified</param>
            <param name="typeName">type name to identify the type for value assist</param>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Schema.ValueAssistTypeIdentifier.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Constructor that initializes all fields in the class.
            </summary>
            <param name="repositoryName">repository name where type is identified</param>
            <param name="typeName">type name to identify the type for value assist</param>
            <param name="policyId">lifecycle policy id in the same repository, if 'null' default policy will be used</param>
            <param name="policyState">lifecycle policy state name, if 'null' initial state name is assumed.</param>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Schema.ValueAssistTypeIdentifier.RepositoryName">
            <summary>
            RepositoryName where the type and lifecycle policy resides.
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Schema.ValueAssistTypeIdentifier.TypeName">
            <summary>
            TypeName to identify the type for value assist.
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Schema.ValueAssistTypeIdentifier.PolicyId">
            <summary>
            Lifecycle policyId for value assist.
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Schema.ValueAssistTypeIdentifier.PolicyState">
            <summary>
            Lifecycle policy state name for value assist.
            </summary>
        </member>
        <member name="T:Emc.Documentum.FS.DataModel.Core.Schema.ValueInfo">
            <summary>
            The ValueInfo is used to map string data.
            </summary>
            <seealso cref="P:Emc.Documentum.FS.DataModel.Core.Schema.PropertyInfo.ValueMap">PropertyInfo.ValueMap</seealso>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Schema.ValueInfo.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Schema.ValueInfo.#ctor(System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="value">the value</param>
            <param name="label">the mapped version of value</param>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Schema.ValueInfo.Value">
            <summary>
            Value.
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Schema.ValueInfo.Label">
            <summary>
            Mapped value.
            </summary>
        </member>
        <member name="T:Emc.Documentum.FS.DataModel.Core.Utils.ContentFactory">
            <summary>
            A factory to convert DFS content
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Utils.ContentFactory.ToContent(System.Type,Emc.Documentum.FS.DataModel.Core.Content.Content)">
            <summary>
            Convert content based on the content class type
            </summary>
            <param name="targetClass">target content class</param>
            <param name="content">source content object</param>
            <returns>target content object</returns>
            <seealso cref="N:Emc.Documentum.FS.DataModel.Core.Content">Content</seealso>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Utils.ContentFactory.ToFileContent(Emc.Documentum.FS.DataModel.Core.Content.Content)">
            <summary>
            Convert to file content
            </summary>
            <param name="content">source content object</param>
            <returns>target file content object</returns>
            <seealso cref="N:Emc.Documentum.FS.DataModel.Core.Content">Content</seealso>
            <seealso cref="T:Emc.Documentum.FS.DataModel.Core.Content.FileContent">FileContent</seealso>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Utils.ContentFactory.ToContentFile(Emc.Documentum.FS.DataModel.Core.Content.Content,System.String,System.String,System.Boolean)">
            <summary>
            Transform a content to file.
            </summary>
            <param name="content"></param>
            <param name="destDir"></param>
            <param name="filename"></param>
            <param name="deleteLocalHint"></param>
            <returns></returns>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Utils.ContentFactory.ToBinaryContent(Emc.Documentum.FS.DataModel.Core.Content.Content)">
            <summary>
            convert to binary content
            </summary>
            <param name="content">source content</param>
            <returns>target binary content object</returns>
            <seealso cref="N:Emc.Documentum.FS.DataModel.Core.Content">Content</seealso>
            <seealso cref="T:Emc.Documentum.FS.DataModel.Core.Content.BinaryContent">BinaryContent</seealso>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Utils.ContentFactory.toDataHandlerContent(Emc.Documentum.FS.DataModel.Core.Content.Content)">
            <summary>
            content to datahandler content
            </summary>
            <param name="content">source content</param>
            <returns>target datahandler content object</returns>
            <seealso cref="N:Emc.Documentum.FS.DataModel.Core.Content">Content</seealso>
            <seealso cref="T:Emc.Documentum.FS.DataModel.Core.Content.DataHandlerContent">DataHandlerContent</seealso>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Utils.ContentFactory.Instance">
            <summary>
            Instance of ContentFactory
            </summary>
        </member>
        <member name="T:Emc.Documentum.FS.DataModel.Core.Utils.ContentTransformationException">
            <summary>
            content transformation exception
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Utils.ContentTransformationException.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="errorMessage"></param>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Utils.ContentTransformationException.#ctor(System.String,System.Object[])">
            <summary>
            Constructor
            </summary>
            <param name="errorMessage"></param>
            <param name="messageArgs"></param>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Utils.ContentTransformationException.#ctor(System.String,System.Exception,System.Object[])">
            <summary>
            Constructor
            </summary>
            <param name="errorMessage"></param>
            <param name="cause"></param>
            <param name="messageArgs"></param>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Utils.ContentTransformationException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor
            </summary>
            <param name="errorMessage"></param>
            <param name="cause"></param>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Utils.ContentTransformationException.#ctor(System.Exception)">
            <summary>
            Constructor
            </summary>
            <param name="cause"></param>
        </member>
        <member name="T:Emc.Documentum.FS.DataModel.Core.Aspect">
            <summary>
            This class models Aspects for all persistent objects.
            <p/>
            Aspects have names.
            <p/>
            Aspects can be attached to an existing object by setting the aspect name and intent modifier to
            AspectIntentModifier.ATTACH.
            <p/>
            Aspects can be dettached from an existing object by setting the aspect name and intent modifier to
            AspectIntentModifier.DETACH.
            <p/>
            For the creation of new objects the intent modifier of AspectIntentModifier.ATTACH is assumed.
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Aspect.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Aspect.#ctor(System.String)">
            <summary>
            Constructs a new instance and sets it's name.
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Aspect.#ctor(System.String,Emc.Documentum.FS.DataModel.Core.AspectIntentModifier)">
            <summary>
            Constructs a new Relationship and sets it's name, target role intent modifier and property set.
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Aspect.Name">
            <summary>
            Aspect name
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Aspect.IntentModifier">
            <summary>
            Intent modifier.
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Aspect.intentModifierSpecified">
            <exclude/>
        </member>
        <member name="T:Emc.Documentum.FS.DataModel.Core.AspectIntentModifier">
            <summary>
            AspectIntentModifier enum specifies the attach or detach intention of the
            <see cref="T:Emc.Documentum.FS.DataModel.Core.Aspect">Aspect</see>
            </summary>
        </member>
        <member name="F:Emc.Documentum.FS.DataModel.Core.AspectIntentModifier.ATTACH">
            <summary>
            Attach aspect.
            </summary>
        </member>
        <member name="F:Emc.Documentum.FS.DataModel.Core.AspectIntentModifier.DETACH">
            <summary>
            Detach aspect.
            </summary>
        </member>
        <member name="T:Emc.Documentum.FS.DataModel.Core.CacheStrategyType">
            <summary>
            CacheStrategyType values
            </summary>
        </member>
        <member name="F:Emc.Documentum.FS.DataModel.Core.CacheStrategyType.DEFAULT_CACHE_STRATEGY">
            <summary>
            Default is "NO CACHE"
            </summary>
        </member>
        <member name="F:Emc.Documentum.FS.DataModel.Core.CacheStrategyType.BASIC_FILE_CACHE_STRATEGY">
            <summary>
            Simple file based caching strategy.  Complete result set is stored in a file on a server.
            Query will be re-run if cached result does not exist.
            </summary>
        </member>
        <member name="F:Emc.Documentum.FS.DataModel.Core.CacheStrategyType.BASIC_MEMORY_CACHE_STRATEGY">
            <summary>
            Simple in-memory caching strategy.  Complete result set is stored in memory on a server.
            Query will be re-run if cached result does not exist.
            </summary>
        </member>
        <member name="F:Emc.Documentum.FS.DataModel.Core.CacheStrategyType.NO_CACHE_STRATEGY">
            <summary>
            No result caching.  Query is always re-ran.
            </summary>
        </member>
        <member name="T:Emc.Documentum.FS.DataModel.Core.CompositeObjectId">
            <summary>
            An CompositeObjectId is a container of properties that together (logical AND) compose the external object identity.
            </summary>
            <seealso cref="T:Emc.Documentum.FS.DataModel.Core.ObjectIdentity">ObjectIdentity</seealso>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.CompositeObjectId.#ctor">
            <summary>
            Constructs a new CompositeObjectId.
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.CompositeObjectId.#ctor(Emc.Documentum.FS.DataModel.Core.Properties.Property[])">
             Constructs a new CompositeObjectId and set the 'propertySet' value.
            
             @param properties
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.CompositeObjectId.Set(Emc.Documentum.FS.DataModel.Core.Properties.Property[])">
            <summary>
            Sets a collection of properties that together compose the object identity. Should not
            be null.
            </summary>
            <param name="properties">collection of properties that together compose the object identity</param>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.CompositeObjectId.GetValueAsString">
            <summary>
            Returns the string representation of the <see cref="P:Emc.Documentum.FS.DataModel.Core.CompositeObjectId.PropertySet"/>.
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.CompositeObjectId.PropertySet">
            <summary>
            Property set that together compose the object identity.
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.CompositeObjectId.ObjectType">
            <summary>
            Object type of the associated object.
            </summary>
        </member>
        <member name="T:Emc.Documentum.FS.DataModel.Core.DataObject">
            <summary>
            The DataObject class generally functions as a representation of a repository object.
            <p/>
            A DataObject can potentially contain comprehensive information about the repository object that it represents,
            including its identity, properties, content, and its relationships  to other repository objects.
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.DataObject.#ctor">
            <summary>
            Constructs a new DataObject.
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.DataObject.#ctor(Emc.Documentum.FS.DataModel.Core.ObjectIdentity)">
            <summary>
            Constructs a new DataObject and sets object identity for the represented object.
            </summary>
            <seealso cref="T:Emc.Documentum.FS.DataModel.Core.ObjectIdentity">ObjectIdentity</seealso>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.DataObject.#ctor(Emc.Documentum.FS.DataModel.Core.ObjectIdentity,System.String)">
            <summary>
            Constructs a new DataObject and sets object identity and the type for the represented object
            <seealso cref="T:Emc.Documentum.FS.DataModel.Core.ObjectIdentity">ObjectIdentity</seealso>
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.DataObject.#ctor(Emc.Documentum.FS.DataModel.Core.ObjectIdentity,System.String,System.Collections.Generic.List{Emc.Documentum.FS.DataModel.Core.Aspect})">
            <summary>
            Constructs a new DataObject and sets object identity and the type for the represented object as well as a list
            of aspects attached.
            </summary>
            <param name="identity">an <see cref="T:Emc.Documentum.FS.DataModel.Core.ObjectIdentity">identity</see> object</param>
            <param name="type">dm_document, dm_folder, etc</param>
            <param name="aspects">list of aspects</param>
        </member>
        <member name="F:Emc.Documentum.FS.DataModel.Core.DataObject.TYPE_UNDEFINED">
            <summary>
            Returns a string representation of the object. In general, the toString method returns a string that "textually
            represents" this object. The result should be a concise but informative representation that is easy for a person
            to read. It is recommended that all subclasses override this method.public String toString()
            </summary>
            <returns>A string representation of the object</returns>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.DataObject.Aspects">
            <summary>
            The aspects associated with the represented object. Will never return null, even
            if aspects are explicitly set to null.
            </summary>
            <seealso cref="T:Emc.Documentum.FS.DataModel.Core.Aspect">Aspect</seealso>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.DataObject.Identity">
            <summary>The identity of the represented object.</summary>
            <seealso cref="T:Emc.Documentum.FS.DataModel.Core.ObjectIdentity">ObjectIdentity</seealso>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.DataObject.Properties">
            <summary>Properties associated with the object.</summary>
            <seealso cref="T:Emc.Documentum.FS.DataModel.Core.Properties.PropertySet">PropertySet</seealso>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.DataObject.Relationships">
            <summary>Relations associated with the represented object</summary>
            <seealso cref="T:Emc.Documentum.FS.DataModel.Core.Relationship">Relationship</seealso>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.DataObject.Contents">
            <summary>Content list of the associated object</summary>
            <seealso cref="N:Emc.Documentum.FS.DataModel.Core.Content">Content</seealso>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.DataObject.Permissions">
            <summary>Permission list of the associated object.</summary>
            <seealso cref="T:Emc.Documentum.FS.DataModel.Core.Permission">Permission</seealso>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.DataObject.Type">
            <summary>Object type of the associated object</summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.DataObject.TransientId">
            <summary>DFS internal use only</summary>
        </member>
        <member name="T:Emc.Documentum.FS.DataModel.Core.DataPackage">
            <summary>
            A DataPackage is a simple container for DataObject instances.<para/>
            It is typically passed to, and returned by, object service operations such as create, get, and update.
            Core service operations process all the DataObject instances in the DataPackage sequentially if DataObjects are not
            transient.
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.DataPackage.#ctor">
            <summary>
            Constructs a new DataPackage.
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.DataPackage.#ctor(Emc.Documentum.FS.DataModel.Core.DataObject)">
            <summary>
             Constructs a new DataPackage and add a <see cref="T:Emc.Documentum.FS.DataModel.Core.DataObject"/> to it.
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.DataPackage.AddDataObject(Emc.Documentum.FS.DataModel.Core.DataObject)">
            <summary>
            Adds an <see cref="T:Emc.Documentum.FS.DataModel.Core.DataObject"/> to the collection
            <param name="dataObject">data object to be added to the collection</param>
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.DataPackage.DataObjects">
            <summary><see cref="T:Emc.Documentum.FS.DataModel.Core.DataObject"/> from the collection.</summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.DataPackage.RepositoryName">
            <summary>
            Repository name associated to the collection.
            </summary>
            <remarks>This parameter does not influence core services which uses the repository name provided in DataObject identity.</remarks>
        </member>
        <member name="T:Emc.Documentum.FS.DataModel.Core.ObjectId">
            <summary>
            An ObjectId is a container for the value of a repository r_object_id attribute.
            <para/>which is a value generated by Content Server to uniquely identify a specific version of a repository object.
            An ObjectId can therefore represent either a CURRENT or a non-CURRENT version of a repository object. Platform
            services exhibit have service and operation-specific behaviors for handling non-CURRENT versions, which are documented
            under the individual operations.
            </summary>
            <seealso cref="T:Emc.Documentum.FS.DataModel.Core.ObjectIdentity">ObjectIdentity</seealso>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.ObjectId.#ctor">
            <summary>
            Constructs a new ObjectId.
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.ObjectId.#ctor(System.String)">
            <summary>
            Constructs a new ObjectId and set's it id.
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.ObjectId.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.ObjectId.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            
            <returns>
            A new object that is a copy of this instance.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.ObjectId.Id">
            <summary>
            String representation of the object id from repository
            </summary>
        </member>
        <member name="T:Emc.Documentum.FS.DataModel.Core.ObjectIdentity">
            <summary>
            The function of the ObjectIdentity class is to uniquely identify a repository object.<para/>
            
            An ObjectIdentity instance contains a repository name and a unique identifier that can take various forms, specified
            by <see cref="T:Emc.Documentum.FS.DataModel.Core.ObjectIdentityType"/> enum constants.
            When constructing a DataObject to pass to the create operation, or in any case when the DataObject represents a
            repository object that does not yet exist, the ObjectIdentity need only be populated with a repository name. If the
            ObjectIdentity does contain a unique identifier, it must represent an existing repository object.
            </summary>
            <seealso cref="T:Emc.Documentum.FS.DataModel.Core.ObjectId">ObjectId</seealso>
            <seealso cref="T:Emc.Documentum.FS.DataModel.Core.ObjectKey">ObjectKey</seealso>
            <seealso cref="T:Emc.Documentum.FS.DataModel.Core.ObjectPath">ObjectPath</seealso>
            <seealso cref="T:Emc.Documentum.FS.DataModel.Core.Qualification">Qualification</seealso>
            <seealso cref="T:Emc.Documentum.FS.DataModel.Core.CompositeObjectId">CompositeObjectId</seealso>
            <seealso cref="T:Emc.Documentum.FS.DataModel.Core.ObjectIdentityType">ObjectIdentityType</seealso>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.ObjectIdentity.#ctor">
            <summary>
            Constructs a new ObjectIdentity.
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.ObjectIdentity.#ctor(System.String)">
            <summary>
            Constructor that sets repositoryName.
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.ObjectIdentity.#ctor(System.Object,System.String)">
            <summary>
            Constructor that sets unique identity of the object and the repositoryName
            </summary>
            <param name="repositoryName">repository name where object resides</param>
            <param name="value">unique identity of the existing object</param>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.ObjectIdentity.GetValueAsString">
            <summary>
            Returns the string representation of the value. Should not be confused with ObjectIdentity.ToString() and
            ObjectIdentity.Value.ToString();
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.ObjectIdentity.Value">
            <summary>
            Unique identity of the object
            </summary>
            <seealso cref="T:Emc.Documentum.FS.DataModel.Core.ObjectId">ObjectId</seealso>
            <seealso cref="T:Emc.Documentum.FS.DataModel.Core.ObjectKey">ObjectKey</seealso>
            <seealso cref="T:Emc.Documentum.FS.DataModel.Core.ObjectPath">ObjectPath</seealso>
            <seealso cref="T:Emc.Documentum.FS.DataModel.Core.Qualification">Qualification</seealso>
            <seealso cref="T:Emc.Documentum.FS.DataModel.Core.CompositeObjectId">CompositeObjectId</seealso>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.ObjectIdentity.ValueType">
            <summary>
            Unique identity type (representation)
            </summary>
            <seealso cref="T:Emc.Documentum.FS.DataModel.Core.ObjectId">ObjectId</seealso>
            <seealso cref="T:Emc.Documentum.FS.DataModel.Core.ObjectKey">ObjectKey</seealso>
            <seealso cref="T:Emc.Documentum.FS.DataModel.Core.ObjectPath">ObjectPath</seealso>
            <seealso cref="T:Emc.Documentum.FS.DataModel.Core.Qualification">Qualification</seealso>
            <seealso cref="T:Emc.Documentum.FS.DataModel.Core.CompositeObjectId">CompositeObjectId</seealso>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.ObjectIdentity.valueTypeSpecified">
            <exclude/>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.ObjectIdentity.RepositoryName">
            <summary>
            RepositoryName where the object resides or where it should be created.
            </summary>
        </member>
        <member name="T:Emc.Documentum.FS.DataModel.Core.ObjectIdentitySet">
            <summary>
            An ObjectIdentitySet is a simple container for ObjectIdentity instances. <para/>
            It can be passed to an object service operation so that it can process multiple repository object in a single
            service interaction. An ObjectIdentitySet is analogous to a DataPackage, but is passed to service operations such as
            move, copy, and delete that operate only against existing repository data, and which therefore do not require any
            data from the consumer about the repository objects other than their identity.
            </summary>
            <seealso cref="T:Emc.Documentum.FS.DataModel.Core.ObjectIdentity">ObjectIdentity</seealso>
            <seealso cref="T:Emc.Documentum.FS.DataModel.Core.Qualification">Qualification</seealso>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.ObjectIdentitySet.#ctor">
            <summary>
            Constructs a new ObjectIdentitySet.
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.ObjectIdentitySet.#ctor(Emc.Documentum.FS.DataModel.Core.ObjectIdentity)">
            <summary>
            Constructs a new ObjectIdentitySet and add an identity to it.
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.ObjectIdentitySet.AddIdentity(Emc.Documentum.FS.DataModel.Core.ObjectIdentity)">
            <summary>
            Adds identity to the set.
            </summary>
            <param name="identity">identity to be added to set</param>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.ObjectIdentitySet.Identities">
            <summary>
            Identities of the set.
            </summary>
            <seealso cref="T:Emc.Documentum.FS.DataModel.Core.ObjectIdentity">ObjectIdentity</seealso>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.ObjectIdentitySet.IsInternal">
            <summary>
            Not for public use.
            </summary>
        </member>
        <member name="T:Emc.Documentum.FS.DataModel.Core.ObjectIdentityType">
            <summary>
            The function of the ObjectIdentityType enum is to specify the kind of identity used in <see cref="T:Emc.Documentum.FS.DataModel.Core.ObjectIdentity"/>.
            </summary>
            <seealso cref="T:Emc.Documentum.FS.DataModel.Core.ObjectId">ObjectId</seealso>
            <seealso cref="T:Emc.Documentum.FS.DataModel.Core.ObjectKey">ObjectKey</seealso> 
            <seealso cref="T:Emc.Documentum.FS.DataModel.Core.ObjectPath">ObjectPath</seealso> 
            <seealso cref="T:Emc.Documentum.FS.DataModel.Core.Qualification">Qualification</seealso> 
            <seealso cref="T:Emc.Documentum.FS.DataModel.Core.ObjectIdentity">ObjectIdentity</seealso> 
            <seealso cref="T:Emc.Documentum.FS.DataModel.Core.CompositeObjectId">CompositeObjectId</seealso> 
        </member>
        <member name="F:Emc.Documentum.FS.DataModel.Core.ObjectIdentityType.UNDEFINED">
            <summary>
            Undefined type.
            </summary>
        </member>
        <member name="F:Emc.Documentum.FS.DataModel.Core.ObjectIdentityType.OBJECT_ID">
            <summary>
            Object ID represents some proprietary mechanism (public URI structure is not required) for combining object
            and repository identification. For example in Documentum, ObjectId would be a string based identifier with
            position encoded repository ID. This repository ID can be uniquely mapped to a repositoryName. Object ID
            would normally require persistent object schema helpers to identify repository name.
            </summary>
        </member>
        <member name="F:Emc.Documentum.FS.DataModel.Core.ObjectIdentityType.OBJECT_KEY">
            <summary>
            A set of properties that together (logical AND) compose the object identity. Note that PropertyBasedIdentity
            also contains repositoryName necessary to globally identify the object.
            </summary>
        </member>
        <member name="F:Emc.Documentum.FS.DataModel.Core.ObjectIdentityType.OBJECT_PATH">
            <summary>
            Object Path is used to identify the object.  Path object contains a string based path expression, repository
            name as well as optional path type.
            </summary>
        </member>
        <member name="F:Emc.Documentum.FS.DataModel.Core.ObjectIdentityType.QUALIFICATION">
            <summary>
            Qualification object is used, containing qualification expression as well as repository name.
            For example, Qualification object can contain a portion of a DQL query without "select attr_list" clause.
            Constraint: If Qualification is used as object identity it must be resolvable to a unique object.
            </summary>
        </member>
        <member name="F:Emc.Documentum.FS.DataModel.Core.ObjectIdentityType.COMPOSITE_OBJECT_ID">
            <summary>
            An object id made up of more than one attribute. Works like a composite key.
            </summary>
        </member>
        <member name="F:Emc.Documentum.FS.DataModel.Core.ObjectIdentityType.STRING_URI">
            <summary>
            Any URI structure compliant identity of the object.  It must include/encode repository identification and
            thus represent a complete global object reference with PUBLIC structure.  Example: "documentum:/dm_notes/12345"
            </summary>
        </member>
        <member name="T:Emc.Documentum.FS.DataModel.Core.ObjectKey">
            <summary>
            An ObjectKey is a container of properties that together (logical AND) compose the object identity.<para/>
            </summary>
            <seealso cref="T:Emc.Documentum.FS.DataModel.Core.ObjectIdentity">ObjectIdentity</seealso>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.ObjectKey.#ctor">
            <summary>
            Constructs a new ObjectKey.
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.ObjectKey.#ctor(Emc.Documentum.FS.DataModel.Core.Properties.Property[])">
            <summary>
            Constructs a new ObjectKey and set the 'PropertySet' value.
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.ObjectKey.Set(Emc.Documentum.FS.DataModel.Core.Properties.Property[])">
            <summary>
            Sets a collection of properties that together compose the object identity
            </summary>
            <param name="properties">collection of properties that together compose the object identity</param>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.ObjectKey.GetValueAsString">
            <summary>
            Returns the string representation of the <see cref="P:Emc.Documentum.FS.DataModel.Core.ObjectKey.PropertySet"/> 
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.ObjectKey.PropertySet">
            <summary>
            Property set that together compose the object identity.
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.ObjectKey.ObjectType">
            <summary>
            Object type of the associated object.
            </summary>
        </member>
        <member name="T:Emc.Documentum.FS.DataModel.Core.ObjectPath">
            <summary>
            An ObjectPath contains a String expression specifying the path to a repository object.
            For example "/MyCabinet/MyFolder/MyDocument".<para/>
            
            ObjectPath contains a String expression specifying the path to a repository object excluding the repository name. An
            ObjectPath can only represent the CURRENT version of a repository object. Using an ObjectPath does not guarantee the
            uniqueness of the repository object, because Content Server does permit objects with identical names to reside within
            the same folder.
            </summary>
            <seealso cref="T:Emc.Documentum.FS.DataModel.Core.ObjectIdentity">ObjectIdentity</seealso>
        </member>
        <member name="F:Emc.Documentum.FS.DataModel.Core.ObjectPath.PATH_TYPE_IMPLIED">
            <remarks/>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.ObjectPath.#ctor">
            <summary>
            Constructs a new ObjectPath.
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.ObjectPath.#ctor(System.String)">
            <summary>
            Constructs a new ObjectPath and sets the 'path' property.
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.ObjectPath.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.ObjectPath.Path">
            <summary>
            Path to the object.
            </summary>
        </member>
        <member name="T:Emc.Documentum.FS.DataModel.Core.ObjectRelationship">
            <summary>
            An ObjectRelationship represents a relationship to a new or existing repository object. <para/>
            
            An ObjectRelationship is used by the update operation to either update or create target objects. If an
            ObjectRelationship received by an update operation represents a new repository object, the object is created.
            If the ObjectRelationship represents an existing repository object, the object is updated. A possible use case would
            be the creation of a new folder and a set of new documents linked to the folder.
            </summary>
            <seealso cref="T:Emc.Documentum.FS.DataModel.Core.Relationship">Relationship</seealso>
            <seealso cref="T:Emc.Documentum.FS.DataModel.Core.ReferenceRelationship">ReferenceRelationship</seealso>
            <seealso cref="T:Emc.Documentum.FS.DataModel.Core.DataObject">DataObject</seealso>
        </member>
        <member name="T:Emc.Documentum.FS.DataModel.Core.Relationship">
            <summary>
            This class models relationships for all persistent objects.<para/>
            
            Relationships have names and roles on both ends.
            Relation name can be set to the name of the relationType attribute of dm_relation_type. As a result, an instance of
            dm_relation object will be addressable and can be created or located.  Sub-types of dm_relation are not supported
            unless DFC "relationship extensions" are configured for it.
            <para/>
            An existing relation may be removed from data base by setting the right target, relation name, target role and
            RelationshipIntentModifier.REMOVE.
            </summary>
            <seealso cref="T:Emc.Documentum.FS.DataModel.Core.ReferenceRelationship">ReferenceRelationship</seealso>
            <seealso cref="T:Emc.Documentum.FS.DataModel.Core.ObjectRelationship">ObjectRelationship</seealso>
        </member>
        <member name="F:Emc.Documentum.FS.DataModel.Core.Relationship.RELATIONSHIP_FOLDER">
            Predefined relation name equals to String "folder"
            <summary>
            Predefined relation name equals to String "folder"
            </summary>
        </member>
        <member name="F:Emc.Documentum.FS.DataModel.Core.Relationship.VIRTUAL_DOCUMENT_RELATIONSHIP">
            <summary>
            Predefined relation name equals to String "virtual_document"
            </summary>
        </member>
        <member name="F:Emc.Documentum.FS.DataModel.Core.Relationship.DEFAULT_RELATIONSHIP">
            <summary>
            Default relation set as RELATIONSHIP_FOLDER
            </summary>
        </member>
        <member name="F:Emc.Documentum.FS.DataModel.Core.Relationship.ROLE_CHILD">
            <summary>
            Predefined role of the relation equals to String "child".
            </summary>
        </member>
        <member name="F:Emc.Documentum.FS.DataModel.Core.Relationship.ROLE_PARENT">
            <summary>
            Predefined role of the relation equals to String "parent".
            </summary>
        </member>
        <member name="F:Emc.Documentum.FS.DataModel.Core.Relationship.ADD">
            <summary>
            Predefined relation modifier equals to RelationshipIntentModifier.ADD
            </summary>
        </member>
        <member name="F:Emc.Documentum.FS.DataModel.Core.Relationship.REMOVE">
            <summary>
            Predefined relation modifier equals to RelationshipIntentModifier.REMOVE
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Relationship.#ctor">
            <summary>
             Constructs a new Relationship.
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Relationship.#ctor(System.String,System.String)">
            <summary>
            Constructs a new Relationship and sets it's name and target role.
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Relationship.#ctor(System.String,System.String,Emc.Documentum.FS.DataModel.Core.RelationshipIntentModifier,Emc.Documentum.FS.DataModel.Core.Properties.PropertySet)">
            <summary>
            Constructs a new Relationship and sets it's name, target role intent modifier and property set.
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Relationship.RelationshipProperties">
            <summary>
            Additional properties of the relationship if supported by relation otherwise they are ignored.
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Relationship.Name">
            <summary>
            Relation name.
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Relationship.TargetRole">
            <summary>
            Object role in relation.
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Relationship.IntentModifier">
            <summary>
            Intent modifier (ADD/REMOVE).
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Relationship.intentModifierSpecified">
            <remarks/>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.ObjectRelationship.#ctor">
            <summary>
            Constructs a new ObjectRelationship.
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.ObjectRelationship.#ctor(Emc.Documentum.FS.DataModel.Core.ObjectRelationship)">
            <summary>
            Constructs a new ObjectRelationship based on an existing one.
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.ObjectRelationship.#ctor(Emc.Documentum.FS.DataModel.Core.DataObject,System.String,System.String)">
            <summary>
            Constructs a new ObjectRelationship with target DataObject, name of the relationship and trarget Role set.
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.ObjectRelationship.#ctor(Emc.Documentum.FS.DataModel.Core.DataObject,System.String,System.String,Emc.Documentum.FS.DataModel.Core.RelationshipIntentModifier,Emc.Documentum.FS.DataModel.Core.Properties.PropertySet)">
            <summary>
            Constructs a new ObjectRelationship with target DataObject, name of the relationship, trarget Role, intent
            modifier and properties for relation.
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.ObjectRelationship.Target">
            <summary>
            Target object of relation.
            </summary>
        </member>
        <member name="T:Emc.Documentum.FS.DataModel.Core.OperationOptions">
            <summary>
            OperationOptions is a container that stores Profiles and Properties that change the behaviour of core services. <para/>
            
            This class is passed to almost all core services methods and intend to influence the behaviour and the execution of
            them. It is divided into two parts: a List of <see cref="T:Emc.Documentum.FS.DataModel.Core.Profiles.Profile"/>s and a <see cref="T:Emc.Documentum.FS.DataModel.Core.Properties.PropertySet"/>.<para/>
            It has also a specific behaviour, when it does not contain properties or a specific profile it will try to retrieve
            them from ServiceContext.<para/>
            
            Profiles - Do not contain multiple instances of the same profile class.<para/>
            PropertySet - in D6 are not influencing the core services.
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.OperationOptions.#ctor">
            <summary>
            Constructs a new OperationOptions.
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.OperationOptions.#ctor(Emc.Documentum.FS.DataModel.Core.Properties.PropertySet,Emc.Documentum.FS.DataModel.Core.Profiles.Profile[])">
            <summary>
            Constructs a new OperationOptions with properties and provided profiles.
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.OperationOptions.#ctor(Emc.Documentum.FS.DataModel.Core.Properties.PropertySet,Emc.Documentum.FS.DataModel.Core.Context.OverridePermission,Emc.Documentum.FS.DataModel.Core.Profiles.Profile[])">
            <summary>
            Constructs a new OperationOptions with properties, overridePermission and provided profiles.
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.OperationOptions.SetOperationProperty``1(System.String,``0)">
            <summary>
            Adds a property to OperationOption's PropertySet.
            <param name="name">name of the property</param>
            <param name="value">value of the property</param>
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.OperationOptions.SetProfile(Emc.Documentum.FS.DataModel.Core.Profiles.Profile)">
            <summary>
            Sets a Profile for the OperationOptions does not set it to ServiceContext, will replace a Profile of the same
            class.
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.OperationOptions.GetProfile(System.Type)">
            <summary>
            Returns <see cref="T:Emc.Documentum.FS.DataModel.Core.Profiles.Profile"/> of the OperationOptions.
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.OperationOptions.Properties">
            <summary>
            PropertySet of the OperationOptions. Does not return null.
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.OperationOptions.Profiles">
            <summary>
            Profiles of the OperationOptions. Does not return null.
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.OperationOptions.OverridePermission">
            <summary>
            Set extra permissions that are not granted to users by default.
            These permissions would be only valid for current operations.
            
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.OperationOptions.CreateProfile">
            <summary>
            Contains <see cref="P:Emc.Documentum.FS.DataModel.Core.OperationOptions.CreateProfile">CreateProfile</see>
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.OperationOptions.VdmUpdateProfile">
            <summary>
            Contains <see cref="P:Emc.Documentum.FS.DataModel.Core.OperationOptions.VdmUpdateProfile">VdmUpdateProfile</see>
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.OperationOptions.VdmRetrieveProfile">
            <summary>
            Contains <see cref="P:Emc.Documentum.FS.DataModel.Core.OperationOptions.VdmRetrieveProfile">VdmRetrieveProfile</see>
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.OperationOptions.LifecycleExecutionProfile">
            <summary>
            Contains <see cref="P:Emc.Documentum.FS.DataModel.Core.OperationOptions.LifecycleExecutionProfile">LifecycleExecutionProfile</see>
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.OperationOptions.RichTextProfile">
            <summary>
            Contains <see cref="P:Emc.Documentum.FS.DataModel.Core.OperationOptions.RichTextProfile">RichTextProfile</see>
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.OperationOptions.SearchProfile">
            <summary>
            Contains <see cref="P:Emc.Documentum.FS.DataModel.Core.OperationOptions.SearchProfile">SearchProfile</see>
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.OperationOptions.ClusteringProfile">
            <summary>
            Contains <see cref="P:Emc.Documentum.FS.DataModel.Core.OperationOptions.ClusteringProfile">ClusteringProfile</see>
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.OperationOptions.PropertyProfile">
            <summary>
            Contains <see cref="P:Emc.Documentum.FS.DataModel.Core.OperationOptions.PropertyProfile">PropertyProfile</see>
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.OperationOptions.CheckinProfile">
            <summary>
            Contains <see cref="P:Emc.Documentum.FS.DataModel.Core.OperationOptions.CheckinProfile">CheckinProfile</see>
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.OperationOptions.CheckoutProfile">
            <summary>
            Contains <see cref="P:Emc.Documentum.FS.DataModel.Core.OperationOptions.CheckoutProfile">CheckoutProfile</see>
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.OperationOptions.ContentProfile">
            <summary>
            Contains <see cref="P:Emc.Documentum.FS.DataModel.Core.OperationOptions.ContentProfile">ContentProfile</see>
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.OperationOptions.ContentTransferProfile">
            <summary>
            Contains <see cref="P:Emc.Documentum.FS.DataModel.Core.OperationOptions.ContentTransferProfile">ContentTransferProfile</see>
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.OperationOptions.RelationshipProfile">
            <summary>
            Contains <see cref="P:Emc.Documentum.FS.DataModel.Core.OperationOptions.RelationshipProfile">RelationshipProfile</see>
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.OperationOptions.PermissionProfile">
            <summary>
            Contains <see cref="P:Emc.Documentum.FS.DataModel.Core.OperationOptions.PermissionProfile">PermissionProfile</see>
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.OperationOptions.SchemaProfile">
            <summary>
            Contains <see cref="P:Emc.Documentum.FS.DataModel.Core.OperationOptions.SchemaProfile">SchemaProfile</see>
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.OperationOptions.DeleteProfile">
            <summary>
            Contains <see cref="P:Emc.Documentum.FS.DataModel.Core.OperationOptions.DeleteProfile">DeleteProfile</see>
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.OperationOptions.CopyProfile">
            <summary>
            Contains <see cref="P:Emc.Documentum.FS.DataModel.Core.OperationOptions.CopyProfile">CopyProfile</see>
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.OperationOptions.MoveProfile">
            <summary>
            Contains <see cref="P:Emc.Documentum.FS.DataModel.Core.OperationOptions.MoveProfile">MoveProfile</see>
            </summary>
        </member>
        <member name="T:Emc.Documentum.FS.DataModel.Core.Permission">
            <summary>
            Permission class represent the permissions of the user defined in the service context on the repository object
            represented by the DataObject.<para/>
            
            The intent of the Permission list is to provide the client with read access to the current user’s permissions on a
            repository object. The client cannot set or update permissions on a repository object by modifying the Permission
            list and updating the DataObject. To actually change the permissions, the client would need to modify or replace the
            repository object’s permission set (ACL).
            </summary>
            <seealso cref="T:Emc.Documentum.FS.DataModel.Core.PermissionType">PermissionType</seealso>
        </member>
        <member name="F:Emc.Documentum.FS.DataModel.Core.Permission.TYPE_BASIC">
            <remarks/>
        </member>
        <member name="F:Emc.Documentum.FS.DataModel.Core.Permission.TYPE_EXTENDED">
            <remarks/>
        </member>
        <member name="F:Emc.Documentum.FS.DataModel.Core.Permission.NONE">
            <remarks/>
        </member>
        <member name="F:Emc.Documentum.FS.DataModel.Core.Permission.BROWSE">
            <remarks/>
        </member>
        <member name="F:Emc.Documentum.FS.DataModel.Core.Permission.READ">
            <remarks/>
        </member>
        <member name="F:Emc.Documentum.FS.DataModel.Core.Permission.RELATE">
            <remarks/>
        </member>
        <member name="F:Emc.Documentum.FS.DataModel.Core.Permission.VERSION">
            <remarks/>
        </member>
        <member name="F:Emc.Documentum.FS.DataModel.Core.Permission.WRITE">
            <remarks/>
        </member>
        <member name="F:Emc.Documentum.FS.DataModel.Core.Permission.DELETE">
            <remarks/>
        </member>
        <member name="F:Emc.Documentum.FS.DataModel.Core.Permission.X_CHANGE_LOCATION">
            <remarks/>
        </member>
        <member name="F:Emc.Documentum.FS.DataModel.Core.Permission.X_CHANGE_OWNER">
            <remarks/>
        </member>
        <member name="F:Emc.Documentum.FS.DataModel.Core.Permission.X_CHANGE_PERMIT">
            <remarks/>
        </member>
        <member name="F:Emc.Documentum.FS.DataModel.Core.Permission.X_CHANGE_STATE">
            <remarks/>
        </member>
        <member name="F:Emc.Documentum.FS.DataModel.Core.Permission.X_DELETE_OBJECT">
            <remarks/>
        </member>
        <member name="F:Emc.Documentum.FS.DataModel.Core.Permission.X_EXECUTE_PROC">
            <remarks/>
        </member>
        <member name="F:Emc.Documentum.FS.DataModel.Core.Permission.X_CHANGE_FOLDER_LINKS">
            <remarks/>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Permission.#ctor">
            <summary>
            Constructs a new Permission.
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Permission.#ctor(Emc.Documentum.FS.DataModel.Core.PermissionType,System.String)">
            <summary>
            Constructs a new Permission with permission type and name set.
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Permission.Type">
            <summary>
            Permission type.
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Permission.Name">
            <summary>
            Permission name.
            </summary>
        </member>
        <member name="T:Emc.Documentum.FS.DataModel.Core.PermissionType">
            <summary>
            PermissionType enum specifies the permission class.<para/>
            </summary>
            <seealso cref="T:Emc.Documentum.FS.DataModel.Core.Permission">Permission</seealso>
        </member>
        <member name="F:Emc.Documentum.FS.DataModel.Core.PermissionType.BASIC">
            <summary>
            Basic permissions.
            </summary>
        </member>
        <member name="F:Emc.Documentum.FS.DataModel.Core.PermissionType.EXTENDED">
            <summary>
            Extended permissions.
            </summary>
        </member>
        <member name="F:Emc.Documentum.FS.DataModel.Core.PermissionType.CUSTOM">
            <summary>
            Custom (or application) permissions
            </summary>
        </member>
        <member name="T:Emc.Documentum.FS.DataModel.Core.Qualification">
            <summary>
            Qualification can take the form of a DQL expression fragment.<para/>
            
            The Qualification is intended to select a unique Content Server object in ObjectIdentity
            and multiple objects for the ObjectIdentitySet.
            </summary>
            <seealso cref="T:Emc.Documentum.FS.DataModel.Core.ObjectIdentity">ObjectIdentity</seealso>
            <seealso cref="T:Emc.Documentum.FS.DataModel.Core.ObjectIdentitySet">ObjectIdentitySet</seealso>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Qualification.#ctor">
            <summary>
            Constructs a new Qualification.
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Qualification.#ctor(System.Object)">
            <summary>
            Constructs a new Qualification.
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.Qualification.GetValueAsString">
            <summary>
            Returns the value as string
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Qualification.QualificationValueType">
            <summary>
            Value type.
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Qualification.qualificationValueTypeSpecified">
            <exclude/>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Qualification.ObjectType">
            <summary>
            Type of the objects identified by the qualification.
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.Qualification.Value">
            <summary>
            Qualification value
            </summary>
        </member>
        <member name="T:Emc.Documentum.FS.DataModel.Core.QualificationValueType">
            <summary>
            QualificationValueType enum specifies the type of <see cref="T:Emc.Documentum.FS.DataModel.Core.Qualification"/>.<para/>
            The Qualification is intended to select a unique Content Server object in ObjectIdentity
            </summary>
            <seealso cref="T:Emc.Documentum.FS.DataModel.Core.Qualification">Qualification</seealso>
        </member>
        <member name="F:Emc.Documentum.FS.DataModel.Core.QualificationValueType.UNDEFINED">
            <remarks/>
        </member>
        <member name="F:Emc.Documentum.FS.DataModel.Core.QualificationValueType.STRING">
            <remarks/>
        </member>
        <member name="T:Emc.Documentum.FS.DataModel.Core.ReferenceRelationship">
            <summary>
            A ReferenceRelationship represents a relationship to an existing repository object.<para/>
            
            It is specified using an <see cref="T:Emc.Documentum.FS.DataModel.Core.ObjectIdentity"/>. A ReferenceRelationship can be used to create a relationship between
            two objects, but it cannot be used to update or create target objects. A common use case would be linking a
            repository object (as it is created or * updated) into an existing folder.
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.ReferenceRelationship.#ctor">
            <summary>
            Constructs a new ReferenceRelationship.
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.ReferenceRelationship.#ctor(Emc.Documentum.FS.DataModel.Core.ReferenceRelationship)">
            <summary>
            Constructs a new ReferenceRelationship based on an existing one.
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.ReferenceRelationship.#ctor(Emc.Documentum.FS.DataModel.Core.ObjectIdentity,System.String,System.String)">
            <summary>
            Constructs a new ReferenceRelationship with target identity, name of the relationship and trarget Role set.
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.ReferenceRelationship.#ctor(Emc.Documentum.FS.DataModel.Core.ObjectIdentity,System.String,System.String,Emc.Documentum.FS.DataModel.Core.RelationshipIntentModifier,Emc.Documentum.FS.DataModel.Core.Properties.PropertySet)">
            <summary>
            Constructs a new ReferenceRelationship with target identity, name of the relationship, trarget Role, intent
            modifier and properties for relation.
            </summary>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.ReferenceRelationship.Target">
            <summary>
            Target object of relation represented by an <see cref="T:Emc.Documentum.FS.DataModel.Core.ObjectIdentity"/>.
            </summary>
        </member>
        <member name="T:Emc.Documentum.FS.DataModel.Core.RelationshipIntentModifier">
            <summary>
            RelationshipIntentModifier enum specifies the add or remove intention of the <see cref="T:Emc.Documentum.FS.DataModel.Core.Relationship"/>.
            </summary>
        </member>
        <member name="F:Emc.Documentum.FS.DataModel.Core.RelationshipIntentModifier.ADD">
            <remarks/>
        </member>
        <member name="F:Emc.Documentum.FS.DataModel.Core.RelationshipIntentModifier.REMOVE">
            <remarks/>
        </member>
        <member name="T:Emc.Documentum.FS.DataModel.Core.RichText">
            <summary>
            A RichText is a container for the repository richtext object.
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.RichText.#ctor">
            <summary>
            Constructs a new RichText with no body and content. The format is set to "richtext"
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.RichText.#ctor(System.String,System.Collections.Generic.List{Emc.Documentum.FS.DataModel.Core.Content.Content})">
            <summary>
            Constructs a new RichText with body and content. The format is set to "richtext"
            </summary>
            <param name="body">string representing the body of the richtext</param>
            <param name="contents">contains a list of content files such as images embedded into the body of richext.</param>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.RichText.#ctor(System.String,System.Collections.Generic.List{Emc.Documentum.FS.DataModel.Core.Content.Content},System.String)">
            <summary>
            Constructs a new RichText with no body, content and format
            </summary>
            <param name="body">string representing the body of the richtext</param>
            <param name="contents">contains a list of content files such as images embedded into the body of richext.</param>
            <param name="format">string representing the format of body.</param>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.RichText.GetBodyAsString">
            <summary>
            Gets the body of the richtext as a string value.
            </summary>
        </member>
        <member name="M:Emc.Documentum.FS.DataModel.Core.RichText.SetBodyAsString(System.String)">
            <summary>
            Sets the body of the richtext as a string value.
            </summary>
            <param name="body">string representation of the richtext body</param>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.RichText.Body">
            <remarks/>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.RichText.Contents">
            <remarks/>
        </member>
        <member name="P:Emc.Documentum.FS.DataModel.Core.RichText.Format">
            <remarks/>
        </member>
        <member name="T:Emc.Documentum.FS.DataModel.Core.VersionStrategy">
            <summary>
            VersionStrategy enum defines VersionStrategy for the checkin document.
            </summary>
        </member>
        <member name="F:Emc.Documentum.FS.DataModel.Core.VersionStrategy.IMPLIED">
            <summary>
            Object will receive the next minor version number equals to NEXT_MINOR.
            </summary>
        </member>
        <member name="F:Emc.Documentum.FS.DataModel.Core.VersionStrategy.NEXT_MAJOR">
            <summary>
            Object will receive the next major version number.
            </summary>
        </member>
        <member name="F:Emc.Documentum.FS.DataModel.Core.VersionStrategy.NEXT_MINOR">
            <summary>
            Object will receive the next minor version number.
            </summary>
        </member>
        <member name="F:Emc.Documentum.FS.DataModel.Core.VersionStrategy.SAME_VERSION">
            <summary>
            The version number for the object will remain unchanged.
            </summary>
        </member>
        <member name="F:Emc.Documentum.FS.DataModel.Core.VersionStrategy.BRANCH_VERSION">
            <summary>
            Object will receive a branch version number.
            </summary>
        </member>
    </members>
</doc>
