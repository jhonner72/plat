// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.18408
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Lombard.Adapters.DipsAdapter.IntegrationTests.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class GetVouchersInformationResponseFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "GetVouchersInformationResponse.feature"
#line hidden
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "GetVouchersInformationResponse", "Given a valid response from documentum\r\nA response should be returned to DIPS wit" +
                    "h all relevant voucher information", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((TechTalk.SpecFlow.FeatureContext.Current != null) 
                        && (TechTalk.SpecFlow.FeatureContext.Current.FeatureInfo.Title != "GetVouchersInformationResponse")))
            {
                Lombard.Adapters.DipsAdapter.IntegrationTests.Features.GetVouchersInformationResponseFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Get Vouchers Information Response")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "GetVouchersInformationResponse")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("GetVouchersInformationResponse")]
        public virtual void GetVouchersInformationResponse()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get Vouchers Information Response", new string[] {
                        "GetVouchersInformationResponse"});
#line 6
this.ScenarioSetup(scenarioInfo);
#line 7
    testRunner.Given("there are no GetVouchersInformationResponse rows for guid SurplusItem_0093999d-4a" +
                    "95-4294-bbae-5e272c95e654", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "accountNumber",
                        "amount",
                        "auxDom",
                        "bsbNumber",
                        "documentReferenceNumber",
                        "documentType",
                        "extraAuxDom",
                        "processingDate",
                        "transactionCode"});
            table1.AddRow(new string[] {
                        "256902729",
                        "45.67",
                        "013812",
                        "256902729",
                        "900111222",
                        "CRT",
                        "",
                        "15092015",
                        "62"});
#line 8
 testRunner.And("a GetVouchersInformationResponse contains the following vouchers:", ((string)(null)), table1, "And ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "batchAccountNumber",
                        "batchType",
                        "captureBsb",
                        "client",
                        "collectingBank",
                        "processingState",
                        "scannedBatchNumber",
                        "source",
                        "subBatchType",
                        "unitID",
                        "workType"});
            table2.AddRow(new string[] {
                        "58300013",
                        "OTC_Vouchers",
                        "013812",
                        "NAB",
                        "900111222",
                        "VIC",
                        "58300013",
                        "DIPS",
                        "OTC_Vouchers",
                        "065",
                        "NABCHQ_SURPLUS"});
#line 11
 testRunner.And("a GetVouchersInformationResponse contains the following voucher batch:", ((string)(null)), table2, "And ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table3.AddRow(new string[] {
                        "adjustedBy",
                        "a"});
            table3.AddRow(new string[] {
                        "adjustedFlag",
                        "0"});
            table3.AddRow(new string[] {
                        "adjustmentDescription",
                        "Adjustment < $10"});
            table3.AddRow(new string[] {
                        "adjustmentLetterRequired",
                        "0"});
            table3.AddRow(new string[] {
                        "adjustmentReasonCode",
                        "0"});
            table3.AddRow(new string[] {
                        "apPresentmentType",
                        "0"});
            table3.AddRow(new string[] {
                        "customerLinkNumber",
                        "12345"});
            table3.AddRow(new string[] {
                        "documentRetrievalFlag",
                        "0"});
            table3.AddRow(new string[] {
                        "forValueType",
                        "Inward_Non_For_Value"});
            table3.AddRow(new string[] {
                        "highValueFlag",
                        "0"});
            table3.AddRow(new string[] {
                        "inactiveFlag",
                        "0"});
            table3.AddRow(new string[] {
                        "isGeneratedBulkCredit",
                        "0"});
            table3.AddRow(new string[] {
                        "insertedCreditType",
                        "POSTED_SUSPENSE_CREDIT"});
            table3.AddRow(new string[] {
                        "isGeneratedVoucher",
                        "0"});
            table3.AddRow(new string[] {
                        "isReservedForBalancing",
                        "0"});
            table3.AddRow(new string[] {
                        "isRetrievedVoucher",
                        "0"});
            table3.AddRow(new string[] {
                        "listingPageNumber",
                        "0"});
            table3.AddRow(new string[] {
                        "manualRepair",
                        "0"});
            table3.AddRow(new string[] {
                        "micrFlag",
                        "0"});
            table3.AddRow(new string[] {
                        "operatorId",
                        "a"});
            table3.AddRow(new string[] {
                        "postTransmissionQaAmountFlag",
                        "0"});
            table3.AddRow(new string[] {
                        "postTransmissionQaCodelineFlag",
                        "0"});
            table3.AddRow(new string[] {
                        "preAdjustmentAmount",
                        "0"});
            table3.AddRow(new string[] {
                        "presentationMode",
                        "0"});
            table3.AddRow(new string[] {
                        "rawMICR",
                        "12345"});
            table3.AddRow(new string[] {
                        "rawOCR",
                        "12345"});
            table3.AddRow(new string[] {
                        "releaseFlag",
                        "0"});
            table3.AddRow(new string[] {
                        "repostFromDRN",
                        "12345"});
            table3.AddRow(new string[] {
                        "repostFromProcessingDate",
                        "20092015"});
            table3.AddRow(new string[] {
                        "surplusItemFlag",
                        "0"});
            table3.AddRow(new string[] {
                        "suspectFraud",
                        "0"});
            table3.AddRow(new string[] {
                        "thirdPartyCheckFailed",
                        "0"});
            table3.AddRow(new string[] {
                        "thirdPartyMixedDepositReturnFlag",
                        "0"});
            table3.AddRow(new string[] {
                        "thirdPartyPoolFlag",
                        "0"});
            table3.AddRow(new string[] {
                        "transactionLinkNumber",
                        "1"});
            table3.AddRow(new string[] {
                        "unencodedECDReturnFlag",
                        "0"});
            table3.AddRow(new string[] {
                        "unprocessable",
                        "0"});
            table3.AddRow(new string[] {
                        "voucherDelayedIndicator",
                        "0"});
#line 14
 testRunner.And("a GetVouchersInformationResponse contains the following voucher process:", ((string)(null)), table3, "And ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table4.AddRow(new string[] {
                        "CorrelationId",
                        "SurplusItem_0093999d-4a95-4294-bbae-5e272c95e654"});
            table4.AddRow(new string[] {
                        "RoutingKey",
                        "NSBD"});
            table4.AddRow(new string[] {
                        "PublishTimeOutSeconds",
                        "3"});
#line 54
 testRunner.When("the message is published to the queue and GetVouchersInformationResponse process " +
                    "the message with this information:", ((string)(null)), table4, "When ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table5.AddRow(new string[] {
                        "guid_name",
                        "SurplusItem_0093999d-4a95-4294-bbae-5e272c95e654"});
            table5.AddRow(new string[] {
                        "doc_ref_number",
                        "900111222"});
            table5.AddRow(new string[] {
                        "payload",
                        "[{\"name\":\"accountNumber\",\"value\":\"256902729\"},{\"name\":\"amount\",\"value\":\"45.67\"},{" +
                            "\"name\":\"auxDom\",\"value\":\"013812\"},{\"name\":\"bsbNumber\",\"value\":\"256902729\"},{\"nam" +
                            "e\":\"documentReferenceNumber\",\"value\":\"900111222\"},{\"name\":\"documentType\",\"value\"" +
                            ":\"CRT\"},{\"name\":\"extraAuxDom\",\"value\":\"\"},{\"name\":\"processingDate\",\"value\":\"01/0" +
                            "1/0001 00:00:00\"},{\"name\":\"transactionCode\",\"value\":\"62\"},{\"name\":\"batchAccountN" +
                            "umber\",\"value\":\"58300013\"},{\"name\":\"batchType\",\"value\":\"OTC_Vouchers\"},{\"name\":\"" +
                            "captureBsb\",\"value\":\"013812\"},{\"name\":\"client\",\"value\":\"NAB\"},{\"name\":\"collectin" +
                            "gBank\",\"value\":\"900111222\"},{\"name\":\"processingState\",\"value\":\"VIC\"},{\"name\":\"sc" +
                            "annedBatchNumber\",\"value\":\"58300013\"},{\"name\":\"source\",\"value\":\"DIPS\"},{\"name\":\"" +
                            "subBatchType\",\"value\":\"OTC_Vouchers\"},{\"name\":\"unitID\",\"value\":\"065\"},{\"name\":\"w" +
                            "orkType\",\"value\":\"NABCHQ_SURPLUS\"},{\"name\":\"adjustedBy\",\"value\":null},{\"name\":\"a" +
                            "djustedFlag\",\"value\":\"False\"},{\"name\":\"adjustmentDescription\",\"value\":null},{\"na" +
                            "me\":\"adjustmentLetterRequired\",\"value\":\"False\"},{\"name\":\"adjustmentReasonCode\",\"" +
                            "value\":\"0\"},{\"name\":\"apPresentmentType\",\"value\":\"\"},{\"name\":\"customerLinkNumber\"" +
                            ",\"value\":null},{\"name\":\"documentRetrievalFlag\",\"value\":\"False\"},{\"name\":\"forValu" +
                            "eType\",\"value\":\"\"},{\"name\":\"highValueFlag\",\"value\":\"False\"},{\"name\":\"inactiveFla" +
                            "g\",\"value\":\"False\"},{\"name\":\"isGeneratedBulkCredit\",\"value\":\"False\"},{\"name\":\"in" +
                            "sertedCreditType\",\"value\":\"\"},{\"name\":\"isGeneratedVoucher\",\"value\":\"False\"},{\"na" +
                            "me\":\"isReservedForBalancing\",\"value\":\"False\"},{\"name\":\"isRetrievedVoucher\",\"valu" +
                            "e\":\"False\"},{\"name\":\"listingPageNumber\",\"value\":null},{\"name\":\"manualRepair\",\"va" +
                            "lue\":\"0\"},{\"name\":\"micrFlag\",\"value\":\"False\"},{\"name\":\"operatorId\",\"value\":null}" +
                            ",{\"name\":\"postTransmissionQaAmountFlag\",\"value\":\"False\"},{\"name\":\"postTransmissi" +
                            "onQaCodelineFlag\",\"value\":\"False\"},{\"name\":\"preAdjustmentAmount\",\"value\":null},{" +
                            "\"name\":\"presentationMode\",\"value\":null},{\"name\":\"rawMICR\",\"value\":null},{\"name\":" +
                            "\"rawOCR\",\"value\":null},{\"name\":\"releaseFlag\",\"value\":\"\"},{\"name\":\"repostFromDRN\"" +
                            ",\"value\":null},{\"name\":\"repostFromProcessingDate\",\"value\":\"\"},{\"name\":\"surplusIt" +
                            "emFlag\",\"value\":\"False\"},{\"name\":\"suspectFraud\",\"value\":\"False\"},{\"name\":\"thirdP" +
                            "artyCheckFailed\",\"value\":\"False\"},{\"name\":\"thirdPartyMixedDepositReturnFlag\",\"va" +
                            "lue\":\"False\"},{\"name\":\"thirdPartyPoolFlag\",\"value\":\"False\"},{\"name\":\"transaction" +
                            "LinkNumber\",\"value\":null},{\"name\":\"unencodedECDReturnFlag\",\"value\":\"False\"},{\"na" +
                            "me\":\"unprocessable\",\"value\":\"False\"},{\"name\":\"voucherDelayedIndicator\",\"value\":n" +
                            "ull}]"});
#line 59
 testRunner.Then("a DipsResponseData table row will exist with the following values", ((string)(null)), table5, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table6.AddRow(new string[] {
                        "guid_name",
                        "SurplusItem_0093999d-4a95-4294-bbae-5e272c95e654"});
            table6.AddRow(new string[] {
                        "number_of_results",
                        "1"});
#line 64
 testRunner.And("a DipsResponseDone table row will exist with the following values", ((string)(null)), table6, "And ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
