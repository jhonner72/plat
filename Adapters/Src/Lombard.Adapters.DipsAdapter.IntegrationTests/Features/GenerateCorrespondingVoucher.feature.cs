// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.18408
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Lombard.Adapters.DipsAdapter.IntegrationTests.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class GenerateCorrespondingVoucherFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "GenerateCorrespondingVoucher.feature"
#line hidden
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "GenerateCorrespondingVoucher", "Given a valid batch\r\nWhen a Generate Corresponding Voucher request is issued to D" +
                    "IPS\r\nThe codeline correction request batch should be viewable in DIPS", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((TechTalk.SpecFlow.FeatureContext.Current != null) 
                        && (TechTalk.SpecFlow.FeatureContext.Current.FeatureInfo.Title != "GenerateCorrespondingVoucher")))
            {
                Lombard.Adapters.DipsAdapter.IntegrationTests.Features.GenerateCorrespondingVoucherFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Generate Corresponding Voucher")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "GenerateCorrespondingVoucher")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("GenerateCorrespondingVoucher")]
        public virtual void GenerateCorrespondingVoucher()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Generate Corresponding Voucher", new string[] {
                        "GenerateCorrespondingVoucher"});
#line 7
this.ScenarioSetup(scenarioInfo);
#line 8
 testRunner.Given("there are no GenerateCorrespondingVoucher rows for trace number 000111222 or 0001" +
                    "11223", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "auxDom",
                        "extraAuxDom",
                        "bsbNumber",
                        "accountNumber",
                        "transactionCode",
                        "documentReferenceNumber",
                        "imageRotation",
                        "capturedAmount",
                        "amountConfidenceLevel",
                        "amountRegionOfInterest",
                        "workType",
                        "processingDate",
                        "preAdjustmentAmount",
                        "adjustedFlag",
                        "thirdPartyCheckFailed",
                        "thirdPartyPoolFlag",
                        "highValueFlag",
                        "voucherDelayedIndicator",
                        "thirdPartyMixedDepositReturnFlag"});
            table1.AddRow(new string[] {
                        "001193",
                        "",
                        "013812",
                        "256902729",
                        "50",
                        "000111222",
                        "",
                        "45.67",
                        "",
                        "",
                        "NABCHQ_POD",
                        "2015/03/17",
                        "55",
                        "true",
                        "true",
                        "true",
                        "true",
                        "1",
                        "true"});
            table1.AddRow(new string[] {
                        "001193",
                        "",
                        "092002",
                        "814649",
                        "50",
                        "000111223",
                        "",
                        "2341.45",
                        "",
                        "",
                        "NABCHQ_POD",
                        "2015/03/17",
                        "55",
                        "false",
                        "false",
                        "false",
                        "false",
                        "0",
                        "false"});
#line 9
 testRunner.And("a GenerateCorrespondingVoucherRequest with batch number 58800018 is added to the " +
                    "queue for the following GenerateCorrespondingVoucher vouchers:", ((string)(null)), table1, "And ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table2.AddRow(new string[] {
                        "workType",
                        "NABCHQ_POD"});
            table2.AddRow(new string[] {
                        "processingState",
                        "SA"});
            table2.AddRow(new string[] {
                        "scannedBatchNumber",
                        "58800018"});
            table2.AddRow(new string[] {
                        "captureBSB",
                        "085384"});
            table2.AddRow(new string[] {
                        "collectingBank",
                        "123456"});
            table2.AddRow(new string[] {
                        "unitID",
                        "123"});
#line 13
 testRunner.And("a GenerateCorrespondingVoucherRequest with batch number 58800018 contains this vo" +
                    "ucher batch:", ((string)(null)), table2, "And ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table3.AddRow(new string[] {
                        "CorrelationId",
                        "NCST-6e5bc63b-be84-4053-a4ce-191abbd69f27"});
            table3.AddRow(new string[] {
                        "RoutingKey",
                        "NCST"});
            table3.AddRow(new string[] {
                        "PublishTimeOutSeconds",
                        "3"});
#line 21
 testRunner.When("the message is published to the queue and GenerateCorrespondingVoucherRequest pro" +
                    "cess the message with this information:", ((string)(null)), table3, "When ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table4.AddRow(new string[] {
                        "S_LOCATION",
                        "GenerateCorrespondingVoucher"});
            table4.AddRow(new string[] {
                        "S_LOCK",
                        "0"});
            table4.AddRow(new string[] {
                        "S_CLIENT",
                        "NabChq"});
            table4.AddRow(new string[] {
                        "S_JOB_ID",
                        "NabChqPod"});
            table4.AddRow(new string[] {
                        "S_MODIFIED",
                        "0"});
            table4.AddRow(new string[] {
                        "S_COMPLETE",
                        "0"});
            table4.AddRow(new string[] {
                        "S_TRACE",
                        "000111222"});
            table4.AddRow(new string[] {
                        "S_PRIORITY",
                        "5"});
            table4.AddRow(new string[] {
                        "S_VERSION",
                        "4.0.2.152"});
            table4.AddRow(new string[] {
                        "S_SDATE",
                        "17/03/15"});
            table4.AddRow(new string[] {
                        "RoutingKey",
                        "NCST"});
#line 26
 testRunner.Then("a DipsQueue table row will exist with the following GenerateCorrespondingVoucher " +
                    "values", ((string)(null)), table4, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "S_TRACE",
                        "S_LENGTH",
                        "trace",
                        "proc_date",
                        "ead",
                        "ser_num",
                        "bsb_num",
                        "acc_num",
                        "trancode",
                        "amount",
                        "job_id",
                        "processing_state",
                        "captureBSB",
                        "collecting_bank",
                        "unit_id",
                        "tpcMixedDepRet",
                        "fxa_tpc_suspense_pool_flag",
                        "highValueFlag"});
            table5.AddRow(new string[] {
                        "000111222",
                        "01025",
                        "000111222",
                        "20150317",
                        "",
                        "001193",
                        "013812",
                        "256902729",
                        "50",
                        "",
                        "NabChqPod",
                        "SA",
                        "085384",
                        "123456",
                        "123",
                        "1",
                        "1",
                        "1"});
            table5.AddRow(new string[] {
                        "000111223",
                        "01025",
                        "000111223",
                        "20150317",
                        "",
                        "001193",
                        "092002",
                        "814649",
                        "50",
                        "",
                        "NabChqPod",
                        "SA",
                        "085384",
                        "123456",
                        "123",
                        "0",
                        "0",
                        "0"});
#line 39
 testRunner.And("DipsNabChq table rows will exist with the following GenerateCorrespondingVoucher " +
                    "values", ((string)(null)), table5, "And ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "TRACE",
                        "TABLE_NO"});
            table6.AddRow(new string[] {
                        "000111222",
                        "0"});
            table6.AddRow(new string[] {
                        "000111223",
                        "0"});
#line 43
 testRunner.And("DipsDbIndex table rows will exist with the following GenerateCorrespondingVoucher" +
                    " values", ((string)(null)), table6, "And ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
