// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.34209
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Lombard.Adapters.A2iaAdapter.IntegrationTests.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class ProcessMultipleBatchesUsingA2IaFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "ProcessMultipleBatches.feature"
#line hidden
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "ProcessMultipleBatchesUsingA2Ia", "In order to read the courtesy amount from a cheque image\r\nAs FXA\r\nI want to be us" +
                    "e A2IA adapter to process the requested images", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((TechTalk.SpecFlow.FeatureContext.Current != null) 
                        && (TechTalk.SpecFlow.FeatureContext.Current.FeatureInfo.Title != "ProcessMultipleBatchesUsingA2Ia")))
            {
                Lombard.Adapters.A2iaAdapter.IntegrationTests.Features.ProcessMultipleBatchesUsingA2IaFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Auto read the courtesy amount from multiple batches")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ProcessMultipleBatchesUsingA2Ia")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("MultipleBatchProcessing")]
        public virtual void AutoReadTheCourtesyAmountFromMultipleBatches()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Auto read the courtesy amount from multiple batches", new string[] {
                        "MultipleBatchProcessing"});
#line 7
this.ScenarioSetup(scenarioInfo);
#line 8
 testRunner.Given("the ICR engine adapter service is running in a well setup environment", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "documentReferenceNumber",
                        "processingDate",
                        "transactionCode"});
            table1.AddRow(new string[] {
                        "000111222",
                        "2015/03/17",
                        "9"});
            table1.AddRow(new string[] {
                        "000111223",
                        "2015/03/17",
                        "95"});
            table1.AddRow(new string[] {
                        "000111224",
                        "2015/03/17",
                        "95"});
            table1.AddRow(new string[] {
                        "000111225",
                        "2015/03/17",
                        "95"});
            table1.AddRow(new string[] {
                        "000111226",
                        "2015/03/17",
                        "?"});
#line 9
 testRunner.When("a request is received for job identifier NSBD-765fe520-fdfc-4cd0-ae6c-63196ddf63b" +
                    "a with the following vouchers:", ((string)(null)), table1, "When ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "documentReferenceNumber",
                        "processingDate",
                        "transactionCode"});
            table2.AddRow(new string[] {
                        "000111222",
                        "2015/03/17",
                        "9"});
            table2.AddRow(new string[] {
                        "000111223",
                        "2015/03/17",
                        "95"});
            table2.AddRow(new string[] {
                        "000111224",
                        "2015/03/17",
                        "95"});
            table2.AddRow(new string[] {
                        "000111225",
                        "2015/03/17",
                        "95"});
            table2.AddRow(new string[] {
                        "000111226",
                        "2015/03/17",
                        "NO"});
#line 16
 testRunner.And("a request is received for job identifier NSBD-765fe520-fdfc-4cd0-ae6c-63196ddf63b" +
                    "b with the following vouchers:", ((string)(null)), table2, "And ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "documentReferenceNumber",
                        "imageRotation",
                        "capturedAmount",
                        "amountConfidenceLevel"});
            table3.AddRow(new string[] {
                        "000111222",
                        "0",
                        "1000",
                        "996"});
            table3.AddRow(new string[] {
                        "000111223",
                        "0",
                        "25000",
                        "956"});
            table3.AddRow(new string[] {
                        "000111224",
                        "0",
                        "3500",
                        "541"});
            table3.AddRow(new string[] {
                        "000111225",
                        "0",
                        "786773",
                        "996"});
            table3.AddRow(new string[] {
                        "000111226",
                        "0",
                        "30359",
                        "992"});
#line 23
 testRunner.Then("a CAR result for job identifier NSBD-765fe520-fdfc-4cd0-ae6c-63196ddf63ba with th" +
                    "e following values is returned:", ((string)(null)), table3, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "documentReferenceNumber",
                        "imageRotation",
                        "capturedAmount",
                        "amountConfidenceLevel"});
            table4.AddRow(new string[] {
                        "000111222",
                        "0",
                        "1000",
                        "996"});
            table4.AddRow(new string[] {
                        "000111223",
                        "0",
                        "25000",
                        "956"});
            table4.AddRow(new string[] {
                        "000111224",
                        "0",
                        "3500",
                        "541"});
            table4.AddRow(new string[] {
                        "000111225",
                        "0",
                        "786773",
                        "996"});
            table4.AddRow(new string[] {
                        "000111226",
                        "0",
                        "30359",
                        "992"});
#line 30
 testRunner.And("a CAR result for job identifier NSBD-765fe520-fdfc-4cd0-ae6c-63196ddf63bb with th" +
                    "e following values is returned:", ((string)(null)), table4, "And ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
